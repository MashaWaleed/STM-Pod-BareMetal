
FREE-RTOS-IMP-menu-f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b40  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b9f4  08009c70  08009c70  00019c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015664  08015664  00030234  2**0
                  CONTENTS
  4 .ARM          00000000  08015664  08015664  00030234  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015664  08015664  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015664  08015664  00025664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015668  08015668  00025668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801566c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  20000234  080158a0  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004954  080158a0  00034954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009438  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ba  00000000  00000000  000396d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0003be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000802  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006134  00000000  00000000  0003d182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da3b  00000000  00000000  000432b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000181ad  00000000  00000000  00050cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b58  00000000  00000000  00068ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0006c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000234 	.word	0x20000234
 800014c:	00000000 	.word	0x00000000
 8000150:	08009c58 	.word	0x08009c58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000238 	.word	0x20000238
 800016c:	08009c58 	.word	0x08009c58

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ba8:	d2ed      	bcs.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__gesf2>:
 8000fa4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fa8:	e006      	b.n	8000fb8 <__cmpsf2+0x4>
 8000faa:	bf00      	nop

08000fac <__lesf2>:
 8000fac:	f04f 0c01 	mov.w	ip, #1
 8000fb0:	e002      	b.n	8000fb8 <__cmpsf2+0x4>
 8000fb2:	bf00      	nop

08000fb4 <__cmpsf2>:
 8000fb4:	f04f 0c01 	mov.w	ip, #1
 8000fb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	bf18      	it	ne
 8000fca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fce:	d011      	beq.n	8000ff4 <__cmpsf2+0x40>
 8000fd0:	b001      	add	sp, #4
 8000fd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fd6:	bf18      	it	ne
 8000fd8:	ea90 0f01 	teqne	r0, r1
 8000fdc:	bf58      	it	pl
 8000fde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe2:	bf88      	it	hi
 8000fe4:	17c8      	asrhi	r0, r1, #31
 8000fe6:	bf38      	it	cc
 8000fe8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fec:	bf18      	it	ne
 8000fee:	f040 0001 	orrne.w	r0, r0, #1
 8000ff2:	4770      	bx	lr
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	d102      	bne.n	8001000 <__cmpsf2+0x4c>
 8000ffa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ffe:	d105      	bne.n	800100c <__cmpsf2+0x58>
 8001000:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001004:	d1e4      	bne.n	8000fd0 <__cmpsf2+0x1c>
 8001006:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100a:	d0e1      	beq.n	8000fd0 <__cmpsf2+0x1c>
 800100c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <__aeabi_cfrcmple>:
 8001014:	4684      	mov	ip, r0
 8001016:	4608      	mov	r0, r1
 8001018:	4661      	mov	r1, ip
 800101a:	e7ff      	b.n	800101c <__aeabi_cfcmpeq>

0800101c <__aeabi_cfcmpeq>:
 800101c:	b50f      	push	{r0, r1, r2, r3, lr}
 800101e:	f7ff ffc9 	bl	8000fb4 <__cmpsf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	bf48      	it	mi
 8001026:	f110 0f00 	cmnmi.w	r0, #0
 800102a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800102c <__aeabi_fcmpeq>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff fff4 	bl	800101c <__aeabi_cfcmpeq>
 8001034:	bf0c      	ite	eq
 8001036:	2001      	moveq	r0, #1
 8001038:	2000      	movne	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmplt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffea 	bl	800101c <__aeabi_cfcmpeq>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmple>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffe0 	bl	800101c <__aeabi_cfcmpeq>
 800105c:	bf94      	ite	ls
 800105e:	2001      	movls	r0, #1
 8001060:	2000      	movhi	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmpge>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffd2 	bl	8001014 <__aeabi_cfrcmple>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpgt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffc8 	bl	8001014 <__aeabi_cfrcmple>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_f2uiz>:
 8001090:	0042      	lsls	r2, r0, #1
 8001092:	d20e      	bcs.n	80010b2 <__aeabi_f2uiz+0x22>
 8001094:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001098:	d30b      	bcc.n	80010b2 <__aeabi_f2uiz+0x22>
 800109a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800109e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a2:	d409      	bmi.n	80010b8 <__aeabi_f2uiz+0x28>
 80010a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ac:	fa23 f002 	lsr.w	r0, r3, r2
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2uiz+0x32>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d102      	bne.n	80010c8 <__aeabi_f2uiz+0x38>
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	4770      	bx	lr
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <Pin_Position>:

#include "stm32f103x8.h"
#include "GPIO.h"
#include "ADC.h"

static uint8_t Pin_Position(uint16_t PinNumber) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010e0:	f000 80a5 	beq.w	800122e <Pin_Position+0x15e>
 80010e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010e8:	f300 80a3 	bgt.w	8001232 <Pin_Position+0x162>
 80010ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010f0:	f000 809b 	beq.w	800122a <Pin_Position+0x15a>
 80010f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010f8:	f300 809b 	bgt.w	8001232 <Pin_Position+0x162>
 80010fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001100:	f000 8091 	beq.w	8001226 <Pin_Position+0x156>
 8001104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001108:	f300 8093 	bgt.w	8001232 <Pin_Position+0x162>
 800110c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001110:	f000 8087 	beq.w	8001222 <Pin_Position+0x152>
 8001114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001118:	f300 808b 	bgt.w	8001232 <Pin_Position+0x162>
 800111c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001120:	d07d      	beq.n	800121e <Pin_Position+0x14e>
 8001122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001126:	f300 8084 	bgt.w	8001232 <Pin_Position+0x162>
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112e:	d074      	beq.n	800121a <Pin_Position+0x14a>
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	dc7d      	bgt.n	8001232 <Pin_Position+0x162>
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	d06c      	beq.n	8001216 <Pin_Position+0x146>
 800113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001140:	dc77      	bgt.n	8001232 <Pin_Position+0x162>
 8001142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001146:	d064      	beq.n	8001212 <Pin_Position+0x142>
 8001148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800114c:	dc71      	bgt.n	8001232 <Pin_Position+0x162>
 800114e:	2b80      	cmp	r3, #128	; 0x80
 8001150:	d05d      	beq.n	800120e <Pin_Position+0x13e>
 8001152:	2b80      	cmp	r3, #128	; 0x80
 8001154:	dc6d      	bgt.n	8001232 <Pin_Position+0x162>
 8001156:	2b20      	cmp	r3, #32
 8001158:	dc48      	bgt.n	80011ec <Pin_Position+0x11c>
 800115a:	2b00      	cmp	r3, #0
 800115c:	dd69      	ble.n	8001232 <Pin_Position+0x162>
 800115e:	3b01      	subs	r3, #1
 8001160:	2b1f      	cmp	r3, #31
 8001162:	d866      	bhi.n	8001232 <Pin_Position+0x162>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <Pin_Position+0x9c>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	080011f3 	.word	0x080011f3
 8001170:	080011f7 	.word	0x080011f7
 8001174:	08001233 	.word	0x08001233
 8001178:	080011fb 	.word	0x080011fb
 800117c:	08001233 	.word	0x08001233
 8001180:	08001233 	.word	0x08001233
 8001184:	08001233 	.word	0x08001233
 8001188:	080011ff 	.word	0x080011ff
 800118c:	08001233 	.word	0x08001233
 8001190:	08001233 	.word	0x08001233
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001203 	.word	0x08001203
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	08001233 	.word	0x08001233
 80011cc:	08001233 	.word	0x08001233
 80011d0:	08001233 	.word	0x08001233
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001233 	.word	0x08001233
 80011dc:	08001233 	.word	0x08001233
 80011e0:	08001233 	.word	0x08001233
 80011e4:	08001233 	.word	0x08001233
 80011e8:	08001207 	.word	0x08001207
 80011ec:	2b40      	cmp	r3, #64	; 0x40
 80011ee:	d00c      	beq.n	800120a <Pin_Position+0x13a>
 80011f0:	e01f      	b.n	8001232 <Pin_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e01e      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01c      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e01a      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 3;
 80011fe:	2303      	movs	r3, #3
 8001200:	e018      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 4;
 8001202:	2304      	movs	r3, #4
 8001204:	e016      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 5;
 8001206:	2305      	movs	r3, #5
 8001208:	e014      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 6;
 800120a:	2306      	movs	r3, #6
 800120c:	e012      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 7;
 800120e:	2307      	movs	r3, #7
 8001210:	e010      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 8;
 8001212:	2308      	movs	r3, #8
 8001214:	e00e      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 9;
 8001216:	2309      	movs	r3, #9
 8001218:	e00c      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 10;
 800121a:	230a      	movs	r3, #10
 800121c:	e00a      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 11;
 800121e:	230b      	movs	r3, #11
 8001220:	e008      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 12;
 8001222:	230c      	movs	r3, #12
 8001224:	e006      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 13;
 8001226:	230d      	movs	r3, #13
 8001228:	e004      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 14;
 800122a:	230e      	movs	r3, #14
 800122c:	e002      	b.n	8001234 <Pin_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 15;
 800122e:	230f      	movs	r3, #15
 8001230:	e000      	b.n	8001234 <Pin_Position+0x164>
		break;
	}
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <delay>:

static void delay(uint32_t u) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 10000; i++) {
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e00c      	b.n	8001270 <delay+0x30>
		for (j = 0; j < u; j++)
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	e002      	b.n	8001262 <delay+0x22>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	d8f8      	bhi.n	800125c <delay+0x1c>
	for (i = 0; i < 10000; i++) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f242 720f 	movw	r2, #9999	; 0x270f
 8001276:	4293      	cmp	r3, r2
 8001278:	dded      	ble.n	8001256 <delay+0x16>
			;
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
	...

08001288 <MCAL_ADC_Init>:

uint8_t MCAL_ADC_Init(ADC_TypeDef *adcx, GPIO_TypeDef *gpiox, uint16_t pin) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	80fb      	strh	r3, [r7, #6]
	uint8_t channel;
	if (gpiox == GPIOA) {
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <MCAL_ADC_Init+0xc0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10b      	bne.n	80012b6 <MCAL_ADC_Init+0x2e>
		if (pin >= GPIO_PIN_8) {
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2bff      	cmp	r3, #255	; 0xff
 80012a2:	d901      	bls.n	80012a8 <MCAL_ADC_Init+0x20>
			return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e04a      	b.n	800133e <MCAL_ADC_Init+0xb6>
		}
		channel = Pin_Position(pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff10 	bl	80010d0 <Pin_Position>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	e020      	b.n	80012f8 <MCAL_ADC_Init+0x70>
	}

	else if (gpiox == GPIOB) {
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4a24      	ldr	r2, [pc, #144]	; (800134c <MCAL_ADC_Init+0xc4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10c      	bne.n	80012d8 <MCAL_ADC_Init+0x50>
		if (pin >= GPIO_PIN_2) {
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d901      	bls.n	80012c8 <MCAL_ADC_Init+0x40>
			return 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e03a      	b.n	800133e <MCAL_ADC_Init+0xb6>
		}
		channel = Pin_Position(pin) + 8;
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff00 	bl	80010d0 <Pin_Position>
 80012d0:	4603      	mov	r3, r0
 80012d2:	3308      	adds	r3, #8
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e00f      	b.n	80012f8 <MCAL_ADC_Init+0x70>
	} else if (gpiox == GPIOC) {
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <MCAL_ADC_Init+0xc8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d10b      	bne.n	80012f8 <MCAL_ADC_Init+0x70>
		if (pin >= GPIO_PIN_6) {
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	2b3f      	cmp	r3, #63	; 0x3f
 80012e4:	d901      	bls.n	80012ea <MCAL_ADC_Init+0x62>
			return 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e029      	b.n	800133e <MCAL_ADC_Init+0xb6>
		}
		channel = Pin_Position(pin) + 10;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff feef 	bl	80010d0 <Pin_Position>
 80012f2:	4603      	mov	r3, r0
 80012f4:	330a      	adds	r3, #10
 80012f6:	75fb      	strb	r3, [r7, #23]
	}

	GPIO_PinConfig_t cfg;
	cfg.GPIO_PinNumber = pin;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	823b      	strh	r3, [r7, #16]
	cfg.GPIO_MODE = GPIO_MODE_Analog;
 80012fc:	2300      	movs	r3, #0
 80012fe:	74bb      	strb	r3, [r7, #18]
	MCAL_GPIO_Init(gpiox, &cfg);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f000 f9f0 	bl	80016ec <MCAL_GPIO_Init>

	adcx->ADC_SQR3 = channel;
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
	adcx->ADC_CR2 |= 1;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	609a      	str	r2, [r3, #8]
	delay(100);
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	f7ff ff8e 	bl	8001240 <delay>
	adcx->ADC_CR2 |= 1;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	609a      	str	r2, [r3, #8]
	adcx->ADC_CR2 |= 2;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f043 0202 	orr.w	r2, r3, #2
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	609a      	str	r2, [r3, #8]
	return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000

08001354 <MCAL_ADC_EOC>:

uint8_t MCAL_ADC_EOC(ADC_TypeDef *adcx) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint8_t check = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
	if (adcx->ADC_SR & 2) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MCAL_ADC_EOC+0x1c>
		check = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
	}
	return check;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <MCAL_ADC_Read>:

uint32_t MCAL_ADC_Read(ADC_TypeDef *adcx, GPIO_TypeDef *gpiox, uint16_t pin) {
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	80fb      	strh	r3, [r7, #6]
	int data = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
	data = adcx->ADC_DR;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	617b      	str	r3, [r7, #20]
	return data;
 8001394:	697b      	ldr	r3, [r7, #20]
}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <EXTI0_IRQHandler>:
 * 										ISR FUNCTIONS
 * =======================================================================================
 */


void EXTI0_IRQHandler(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <EXTI0_IRQHandler+0x14>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 80013aa:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <EXTI0_IRQHandler+0x18>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4798      	blx	r3
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010400 	.word	0x40010400
 80013b8:	20000250 	.word	0x20000250

080013bc <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <EXTI1_IRQHandler+0x14>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 80013c6:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <EXTI1_IRQHandler+0x18>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4798      	blx	r3
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010400 	.word	0x40010400
 80013d4:	20000250 	.word	0x20000250

080013d8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <EXTI2_IRQHandler+0x14>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <EXTI2_IRQHandler+0x18>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4798      	blx	r3
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010400 	.word	0x40010400
 80013f0:	20000250 	.word	0x20000250

080013f4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <EXTI3_IRQHandler+0x14>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 80013fe:	4b03      	ldr	r3, [pc, #12]	; (800140c <EXTI3_IRQHandler+0x18>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4798      	blx	r3
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010400 	.word	0x40010400
 800140c:	20000250 	.word	0x20000250

08001410 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <EXTI4_IRQHandler+0x14>)
 8001416:	2210      	movs	r2, #16
 8001418:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 800141a:	4b03      	ldr	r3, [pc, #12]	; (8001428 <EXTI4_IRQHandler+0x18>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	4798      	blx	r3
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010400 	.word	0x40010400
 8001428:	20000250 	.word	0x20000250

0800142c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <EXTI9_5_IRQHandler+0x1c>
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 800143e:	2220      	movs	r2, #32
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <EXTI9_5_IRQHandler+0x88>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <EXTI9_5_IRQHandler+0x34>
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <EXTI9_5_IRQHandler+0x88>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <EXTI9_5_IRQHandler+0x4c>
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <EXTI9_5_IRQHandler+0x88>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <EXTI9_5_IRQHandler+0x66>
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <EXTI9_5_IRQHandler+0x88>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <EXTI9_5_IRQHandler+0x80>
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <EXTI9_5_IRQHandler+0x84>)
 80014a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <EXTI9_5_IRQHandler+0x88>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	4798      	blx	r3
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010400 	.word	0x40010400
 80014b4:	20000250 	.word	0x20000250

080014b8 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <EXTI15_10_IRQHandler+0x22>
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d2:	6153      	str	r3, [r2, #20]
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <EXTI15_10_IRQHandler+0x40>
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <EXTI15_10_IRQHandler+0x5e>
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 800150a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150e:	6153      	str	r3, [r2, #20]
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <EXTI15_10_IRQHandler+0x7c>
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <EXTI15_10_IRQHandler+0x9a>
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6153      	str	r3, [r2, #20]
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <EXTI15_10_IRQHandler+0xb8>
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <EXTI15_10_IRQHandler+0xbc>)
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <EXTI15_10_IRQHandler+0xc0>)
 800156c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156e:	4798      	blx	r3
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40010400 	.word	0x40010400
 8001578:	20000250 	.word	0x20000250

0800157c <GET_CRLH_Position>:
#include "GPIO.h"

/**================================================================ */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	f000 80a5 	beq.w	80016da <GET_CRLH_Position+0x15e>
 8001590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001594:	f300 80a3 	bgt.w	80016de <GET_CRLH_Position+0x162>
 8001598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159c:	f000 809b 	beq.w	80016d6 <GET_CRLH_Position+0x15a>
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a4:	f300 809b 	bgt.w	80016de <GET_CRLH_Position+0x162>
 80015a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ac:	f000 8091 	beq.w	80016d2 <GET_CRLH_Position+0x156>
 80015b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b4:	f300 8093 	bgt.w	80016de <GET_CRLH_Position+0x162>
 80015b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015bc:	f000 8087 	beq.w	80016ce <GET_CRLH_Position+0x152>
 80015c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c4:	f300 808b 	bgt.w	80016de <GET_CRLH_Position+0x162>
 80015c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015cc:	d07d      	beq.n	80016ca <GET_CRLH_Position+0x14e>
 80015ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d2:	f300 8084 	bgt.w	80016de <GET_CRLH_Position+0x162>
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d074      	beq.n	80016c6 <GET_CRLH_Position+0x14a>
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	dc7d      	bgt.n	80016de <GET_CRLH_Position+0x162>
 80015e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e6:	d06c      	beq.n	80016c2 <GET_CRLH_Position+0x146>
 80015e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ec:	dc77      	bgt.n	80016de <GET_CRLH_Position+0x162>
 80015ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f2:	d064      	beq.n	80016be <GET_CRLH_Position+0x142>
 80015f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f8:	dc71      	bgt.n	80016de <GET_CRLH_Position+0x162>
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	d05d      	beq.n	80016ba <GET_CRLH_Position+0x13e>
 80015fe:	2b80      	cmp	r3, #128	; 0x80
 8001600:	dc6d      	bgt.n	80016de <GET_CRLH_Position+0x162>
 8001602:	2b20      	cmp	r3, #32
 8001604:	dc48      	bgt.n	8001698 <GET_CRLH_Position+0x11c>
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd69      	ble.n	80016de <GET_CRLH_Position+0x162>
 800160a:	3b01      	subs	r3, #1
 800160c:	2b1f      	cmp	r3, #31
 800160e:	d866      	bhi.n	80016de <GET_CRLH_Position+0x162>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <GET_CRLH_Position+0x9c>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	0800169f 	.word	0x0800169f
 800161c:	080016a3 	.word	0x080016a3
 8001620:	080016df 	.word	0x080016df
 8001624:	080016a7 	.word	0x080016a7
 8001628:	080016df 	.word	0x080016df
 800162c:	080016df 	.word	0x080016df
 8001630:	080016df 	.word	0x080016df
 8001634:	080016ab 	.word	0x080016ab
 8001638:	080016df 	.word	0x080016df
 800163c:	080016df 	.word	0x080016df
 8001640:	080016df 	.word	0x080016df
 8001644:	080016df 	.word	0x080016df
 8001648:	080016df 	.word	0x080016df
 800164c:	080016df 	.word	0x080016df
 8001650:	080016df 	.word	0x080016df
 8001654:	080016af 	.word	0x080016af
 8001658:	080016df 	.word	0x080016df
 800165c:	080016df 	.word	0x080016df
 8001660:	080016df 	.word	0x080016df
 8001664:	080016df 	.word	0x080016df
 8001668:	080016df 	.word	0x080016df
 800166c:	080016df 	.word	0x080016df
 8001670:	080016df 	.word	0x080016df
 8001674:	080016df 	.word	0x080016df
 8001678:	080016df 	.word	0x080016df
 800167c:	080016df 	.word	0x080016df
 8001680:	080016df 	.word	0x080016df
 8001684:	080016df 	.word	0x080016df
 8001688:	080016df 	.word	0x080016df
 800168c:	080016df 	.word	0x080016df
 8001690:	080016df 	.word	0x080016df
 8001694:	080016b3 	.word	0x080016b3
 8001698:	2b40      	cmp	r3, #64	; 0x40
 800169a:	d00c      	beq.n	80016b6 <GET_CRLH_Position+0x13a>
 800169c:	e01f      	b.n	80016de <GET_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	e01e      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	e01c      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80016a6:	2308      	movs	r3, #8
 80016a8:	e01a      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80016aa:	230c      	movs	r3, #12
 80016ac:	e018      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80016ae:	2310      	movs	r3, #16
 80016b0:	e016      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80016b2:	2314      	movs	r3, #20
 80016b4:	e014      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80016b6:	2318      	movs	r3, #24
 80016b8:	e012      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80016ba:	231c      	movs	r3, #28
 80016bc:	e010      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	e00e      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	e00c      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80016c6:	2308      	movs	r3, #8
 80016c8:	e00a      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80016ca:	230c      	movs	r3, #12
 80016cc:	e008      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80016ce:	2310      	movs	r3, #16
 80016d0:	e006      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80016d2:	2314      	movs	r3, #20
 80016d4:	e004      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80016d6:	2318      	movs	r3, #24
 80016d8:	e002      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80016da:	231c      	movs	r3, #28
 80016dc:	e000      	b.n	80016e0 <GET_CRLH_Position+0x164>
		break;
	}
	return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register = NULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
	config_register = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)?&GPIOX->CRL:&GPIOX->CRH;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d801      	bhi.n	8001706 <MCAL_GPIO_Init+0x1a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	e001      	b.n	800170a <MCAL_GPIO_Init+0x1e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff31 	bl	800157c <GET_CRLH_Position>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	210f      	movs	r1, #15
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	43d2      	mvns	r2, r2
 800172c:	401a      	ands	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	789b      	ldrb	r3, [r3, #2]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d00b      	beq.n	8001752 <MCAL_GPIO_Init+0x66>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d007      	beq.n	8001752 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8001746:	2b05      	cmp	r3, #5
 8001748:	d003      	beq.n	8001752 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d10e      	bne.n	8001770 <MCAL_GPIO_Init+0x84>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	789b      	ldrb	r3, [r3, #2]
 8001756:	3b04      	subs	r3, #4
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	b25a      	sxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	78db      	ldrb	r3, [r3, #3]
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	75fb      	strb	r3, [r7, #23]
 800176e:	e031      	b.n	80017d4 <MCAL_GPIO_Init+0xe8>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	789b      	ldrb	r3, [r3, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <MCAL_GPIO_Init+0x94>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <MCAL_GPIO_Init+0xa4>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	789b      	ldrb	r3, [r3, #2]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	75fb      	strb	r3, [r7, #23]
 800178e:	e021      	b.n	80017d4 <MCAL_GPIO_Init+0xe8>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d107      	bne.n	80017a8 <MCAL_GPIO_Init+0xbc>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	789b      	ldrb	r3, [r3, #2]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	75fb      	strb	r3, [r7, #23]
 80017a6:	e015      	b.n	80017d4 <MCAL_GPIO_Init+0xe8>
		}
		//if pin is PU or PD
		else{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 80017a8:	2308      	movs	r3, #8
 80017aa:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <MCAL_GPIO_Init+0xd8>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	e007      	b.n	80017d4 <MCAL_GPIO_Init+0xe8>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	8812      	ldrh	r2, [r2, #0]
 80017cc:	43d2      	mvns	r2, r2
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	7df9      	ldrb	r1, [r7, #23]
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	431a      	orrs	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <MCAL_GPIO_ReadPin>:
 * @param[in]	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOX , uint16_t PinNumber)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status;
	if (((GPIOX->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <MCAL_GPIO_ReadPin+0x1e>
	{
		bit_status = GPIO_PIN_SET;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	e001      	b.n	8001810 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bit_status = GPIO_PIN_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status ;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 8001838:	e002      	b.n	8001840 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	615a      	str	r2, [r3, #20]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <MCAL_NVIC_EnableIRQ>:
{
    SCB_AIRCR = Copy_PriorityGrouping;
}

Std_ReturnType MCAL_NVIC_EnableIRQ(IRQn_Type Copy_IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
    
    if (Copy_IRQn < 32)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b1f      	cmp	r3, #31
 800185e:	d807      	bhi.n	8001870 <MCAL_NVIC_EnableIRQ+0x24>
    {
        NVIC_ISER0 = (1 << Copy_IRQn);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MCAL_NVIC_EnableIRQ+0x64>)
 8001868:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus = E_OK;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e019      	b.n	80018a4 <MCAL_NVIC_EnableIRQ+0x58>
    }
    else if (Copy_IRQn < 64)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b3f      	cmp	r3, #63	; 0x3f
 8001874:	d808      	bhi.n	8001888 <MCAL_NVIC_EnableIRQ+0x3c>
    {
        NVIC_ISER1 = (1 << (Copy_IRQn - 32));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3b20      	subs	r3, #32
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <MCAL_NVIC_EnableIRQ+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus = E_OK;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e00d      	b.n	80018a4 <MCAL_NVIC_EnableIRQ+0x58>
    }
    else if (Copy_IRQn < 96)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b5f      	cmp	r3, #95	; 0x5f
 800188c:	d808      	bhi.n	80018a0 <MCAL_NVIC_EnableIRQ+0x54>
    {
        NVIC_ISER2 = (1 << (Copy_IRQn - 64));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	3b40      	subs	r3, #64	; 0x40
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MCAL_NVIC_EnableIRQ+0x6c>)
 8001898:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus = E_OK;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e001      	b.n	80018a4 <MCAL_NVIC_EnableIRQ+0x58>
    }
    else
    {
        Local_FunctionStatus = E_NOT_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
    }
    
    return Local_FunctionStatus;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000e104 	.word	0xe000e104
 80018b8:	e000e108 	.word	0xe000e108

080018bc <PWM_Init>:

#include "PWM.h"


void PWM_Init(uint32_t duty)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_TIM1EN);
 80018c4:	210b      	movs	r1, #11
 80018c6:	2002      	movs	r0, #2
 80018c8:	f000 f926 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	GPIO_PinConfig_t cfg;
	cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80018cc:	2306      	movs	r3, #6
 80018ce:	73bb      	strb	r3, [r7, #14]
	cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
	cfg.GPIO_PinNumber = GPIO_PIN_8;
 80018d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d8:	81bb      	strh	r3, [r7, #12]

	MCAL_GPIO_Init(GPIOA, &cfg);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4619      	mov	r1, r3
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <PWM_Init+0x70>)
 80018e2:	f7ff ff03 	bl	80016ec <MCAL_GPIO_Init>

	TIMER1->PSC = (16 - 1);
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <PWM_Init+0x74>)
 80018e8:	220f      	movs	r2, #15
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
	TIMER1->ARR = 60000;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <PWM_Init+0x74>)
 80018ee:	f64e 2260 	movw	r2, #60000	; 0xea60
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMER1->CNT = 0;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <PWM_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

	TIMER1->CCMR1 |= 0x60;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <PWM_Init+0x74>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <PWM_Init+0x74>)
 8001900:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001904:	6193      	str	r3, [r2, #24]

	TIMER1->CCER |= 0x3;
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <PWM_Init+0x74>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <PWM_Init+0x74>)
 800190c:	f043 0303 	orr.w	r3, r3, #3
 8001910:	6213      	str	r3, [r2, #32]

	TIMER1->BDTR |= 0x8000;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <PWM_Init+0x74>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <PWM_Init+0x74>)
 8001918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44

	TIMER1->CCR1 = duty ;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <PWM_Init+0x74>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40010800 	.word	0x40010800
 8001930:	40012c00 	.word	0x40012c00

08001934 <PWM_Duty>:
void PWM_Duty(uint32_t duty)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	TIMER1->CCR1 = duty ;
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <PWM_Duty+0x18>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40012c00 	.word	0x40012c00

08001950 <PWM_Freq>:

void PWM_Freq(uint32_t newFreq)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	uint32_t tempFreq = newFreq;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60fb      	str	r3, [r7, #12]
		if(newFreq == 0) tempFreq = 1;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <PWM_Freq+0x16>
 8001962:	2301      	movs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]

		uint32_t tempNewValue = 16000000/ 16 / tempFreq;
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <PWM_Freq+0x38>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	60bb      	str	r3, [r7, #8]

		// setting new value
		TIMER1 ->ARR = (uint32_t)tempNewValue;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <PWM_Freq+0x3c>)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIMER1 -> CCR1 = (uint32_t)tempNewValue/2;
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <PWM_Freq+0x3c>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	000f4240 	.word	0x000f4240
 800198c:	40012c00 	.word	0x40012c00

08001990 <PWM_Start>:

void PWM_Start(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	TIMER1->CR1 |= 1;
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <PWM_Start+0x18>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <PWM_Start+0x18>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40012c00 	.word	0x40012c00

080019ac <PWM_Stop>:

void PWM_Stop(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
	TIMER1->CR1 &= ~1;
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <PWM_Stop+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <PWM_Stop+0x18>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <PLL_MUL_Calculator>:
const uint8_t AHB_PrescaleTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
const uint8_t APB_PrescaleTable[8U] = {0,0,0,0,1,2,3,4};
/*****************************< Private Function Implementations *****************************/

u32 PLL_MUL_Calculator(u32 Copy_u32Input_CLkValue, u8 Copy_u8MUL_Factor)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
	//Handle the 6.5 corner case
    Copy_u8MUL_Factor = (Copy_u8MUL_Factor == 0xD) ? 4.5 : Copy_u8MUL_Factor;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	2b0d      	cmp	r3, #13
 80019d8:	d00c      	beq.n	80019f4 <PLL_MUL_Calculator+0x2c>
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd21 	bl	8000424 <__aeabi_i2d>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f85d 	bl	8000aa8 <__aeabi_d2uiz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e000      	b.n	80019f6 <PLL_MUL_Calculator+0x2e>
 80019f4:	2304      	movs	r3, #4
 80019f6:	70fb      	strb	r3, [r7, #3]

    //conditional for the Frequency value
	if((Copy_u32Input_CLkValue * (Copy_u8MUL_Factor + 2)) <= SYSCLK_SAFE_LIMIT)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	3302      	adds	r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <PLL_MUL_Calculator+0x5c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d806      	bhi.n	8001a18 <PLL_MUL_Calculator+0x50>
	{

		return (Copy_u32Input_CLkValue * (Copy_u8MUL_Factor + 2));
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	e000      	b.n	8001a1a <PLL_MUL_Calculator+0x52>
	}
	else{
		return E_NOT_OK;
 8001a18:	2300      	movs	r3, #0
	}
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	044aa200 	.word	0x044aa200

08001a28 <MCAL_RCC_InitSysClock>:
//}


/*****************************< API Implementations *****************************/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
    #elif RCC_SYSCLK == RCC_PLL

        /**< Specify PLL source. */
		#if RCC_PLL_SRC == RCC_HSE

        	CLR_BIT(RCC_CR, RCC_CR_HSEBYP);
 8001a32:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a35      	ldr	r2, [pc, #212]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
        	SET_BIT(RCC_CR, RCC_CR_HSEON);
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]

        	while (!(RCC_CR & (1 << 17)));
 8001a4a:	bf00      	nop
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f9      	beq.n	8001a4c <MCAL_RCC_InitSysClock+0x24>

			#ifdef Is_72MHZ
        	FLASH_ACR |= 0x12;
			#endif

        	SET_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //PREDIV1 SELECTED (HSE undivided reset value)
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
		#elif RCC_PLL_SRC == RCC_HSI
        	CLR_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //HSI/2 SELECTED
		#endif

        /**< Check if multiplied value is within safe frequency limit. */
		if(PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL) != E_NOT_OK )
 8001a64:	2100      	movs	r1, #0
 8001a66:	482b      	ldr	r0, [pc, #172]	; (8001b14 <MCAL_RCC_InitSysClock+0xec>)
 8001a68:	f7ff ffae 	bl	80019c8 <PLL_MUL_Calculator>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d045      	beq.n	8001afe <MCAL_RCC_InitSysClock+0xd6>
		{
			// PRESCALERS
			RCC_CFGR |= (AHB_PRESCALE<<4);
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (APB2_PRESCALE<<11);
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (APB1_PRESCALE<<8);
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (ADC_PRESCALE<<14);
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6013      	str	r3, [r2, #0]

			/**< Set configure PLL MUL value . */
			RCC_CFGR &= ~(0xF << RCC_CFGR_PLLMUL);
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001a9c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001aa0:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (RCC_PLL_MUL << RCC_CFGR_PLLMUL);
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6013      	str	r3, [r2, #0]


			/**< Enable the PLL . */
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]
			while (!(RCC_CR & (1 << 25)));
 8001ab6:	bf00      	nop
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f9      	beq.n	8001ab8 <MCAL_RCC_InitSysClock+0x90>
			/**< Wait until the PLL clock is stable. */
			while(!GET_BIT(RCC_CR, RCC_CR_PLLRDY));
 8001ac4:	bf00      	nop
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MCAL_RCC_InitSysClock+0xe4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <MCAL_RCC_InitSysClock+0x9e>
			/**< select PLL as SYSCLK without changing remaining bits. */
			RCC_CFGR &= ~(0b11 << RCC_CFGR_SW);
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001ad8:	f023 0303 	bic.w	r3, r3, #3
 8001adc:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (0b10 << RCC_CFGR_SW);
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6013      	str	r3, [r2, #0]

			while (!(RCC_CFGR & (1 << 3)));
 8001aea:	bf00      	nop
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MCAL_RCC_InitSysClock+0xe8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f9      	beq.n	8001aec <MCAL_RCC_InitSysClock+0xc4>


			Local_FunctionStatus = E_OK;
 8001af8:	2301      	movs	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	e001      	b.n	8001b02 <MCAL_RCC_InitSysClock+0xda>

		}
		else
		{
			Local_FunctionStatus = E_NOT_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71fb      	strb	r3, [r7, #7]
    #else
        #error "Wrong Choice !!"

    #endif /**< RCC_SYSCLK */

    return Local_FunctionStatus;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021004 	.word	0x40021004
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <MCAL_RCC_EnablePeripheral>:

Std_ReturnType MCAL_RCC_EnablePeripheral(u8 Copy_BusId, u8 Copy_PeripheralId)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

    switch(Copy_BusId)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d020      	beq.n	8001b74 <MCAL_RCC_EnablePeripheral+0x5c>
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	dc2b      	bgt.n	8001b8e <MCAL_RCC_EnablePeripheral+0x76>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <MCAL_RCC_EnablePeripheral+0x28>
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d00d      	beq.n	8001b5a <MCAL_RCC_EnablePeripheral+0x42>
 8001b3e:	e026      	b.n	8001b8e <MCAL_RCC_EnablePeripheral+0x76>
    {
        /**< Enable the peripheral on the AHB bus. */
        case RCC_AHB:
            SET_BIT(RCC_AHBENR, Copy_PeripheralId);
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MCAL_RCC_EnablePeripheral+0x88>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	79ba      	ldrb	r2, [r7, #6]
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <MCAL_RCC_EnablePeripheral+0x88>)
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
            break;
 8001b58:	e01c      	b.n	8001b94 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB1 bus. */
        case RCC_APB1:
            SET_BIT(RCC_APB1ENR, Copy_PeripheralId);
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MCAL_RCC_EnablePeripheral+0x8c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	4611      	mov	r1, r2
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <MCAL_RCC_EnablePeripheral+0x8c>)
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
            break;
 8001b72:	e00f      	b.n	8001b94 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB2 bus. */
        case RCC_APB2:
            SET_BIT(RCC_APB2ENR, Copy_PeripheralId);
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MCAL_RCC_EnablePeripheral+0x90>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	79ba      	ldrb	r2, [r7, #6]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <MCAL_RCC_EnablePeripheral+0x90>)
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
            break;
 8001b8c:	e002      	b.n	8001b94 <MCAL_RCC_EnablePeripheral+0x7c>

        default:
            Local_FunctionStatus = E_NOT_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
            break;
 8001b92:	bf00      	nop
    }

    return Local_FunctionStatus;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021014 	.word	0x40021014
 8001ba4:	4002101c 	.word	0x4002101c
 8001ba8:	40021018 	.word	0x40021018

08001bac <MCAL_RCC_GetSYSCLK>:

    return Local_FunctionStatus;
}

uint32_t MCAL_RCC_GetSYSCLK(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
#if RCC_SYSCLK == RCC_HSE
	return HSE_VAL;
#elif RCC_SYSCLK == RCC_HSI
	return HSI_VAL;
#elif RCC_SYSCLK == RCC_PLL
	return (PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL));
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MCAL_RCC_GetSYSCLK+0x14>)
 8001bb4:	f7ff ff08 	bl	80019c8 <PLL_MUL_Calculator>
 8001bb8:	4603      	mov	r3, r0
#else
	return E_NOT_OK;
#endif
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	007a1200 	.word	0x007a1200

08001bc4 <MCAL_RCC_GetHCLK>:
uint32_t MCAL_RCC_GetHCLK(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYSCLK() >> AHB_PrescaleTable[AHB_PRESCALE]);
 8001bc8:	f7ff fff0 	bl	8001bac <MCAL_RCC_GetSYSCLK>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	40d3      	lsrs	r3, r2
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <MCAL_RCC_GetPCLK1>:
uint32_t MCAL_RCC_GetPCLK1(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB1_PRESCALE]);
 8001bda:	f7ff fff3 	bl	8001bc4 <MCAL_RCC_GetHCLK>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2200      	movs	r2, #0
 8001be2:	40d3      	lsrs	r3, r2
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <MCAL_RCC_GetPCLK2>:
uint32_t MCAL_RCC_GetPCLK2(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB2_PRESCALE]);
 8001bec:	f7ff ffea 	bl	8001bc4 <MCAL_RCC_GetHCLK>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	40d3      	lsrs	r3, r2
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <CheckFlag_TXE>:

/////////////////////////////////////////////////////////////////////////////
//                          Private functions                             //
////////////////////////////////////////////////////////////////////////////

static uint8_t CheckFlag_TXE(SPI_TypeDef *SPIx) {
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 1));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3

}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <CheckFlag_RXNE>:

static uint8_t CheckFlag_RXNE(SPI_TypeDef *SPIx) {
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 0));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <CheckFlag_ERR>:
static uint8_t CheckFlag_ERR(SPI_TypeDef *SPIx) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 4));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <MCAL_SPI_Init>:

/////////////////////////////////////////////////////////////////////////////
//                                A P I                                   //
////////////////////////////////////////////////////////////////////////////

void MCAL_SPI_Init(SPI_TypeDef *SPIx, SPI_Config_t *cfg) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	// Temporary registers image for configurations to be mirrored onto without worrying about option precedence
	uint16_t tempregcr1 = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]
	uint16_t tempregcr2 = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <MCAL_SPI_Init+0xa8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d103      	bne.n	8001c7a <MCAL_SPI_Init+0x22>
		Global_SPI_CFG[SPI1_CFG] = cfg;
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <MCAL_SPI_Init+0xac>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e006      	b.n	8001c88 <MCAL_SPI_Init+0x30>
	} else if (SPIx == SPI2) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <MCAL_SPI_Init+0xb0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d102      	bne.n	8001c88 <MCAL_SPI_Init+0x30>
		Global_SPI_CFG[SPI2_CFG] = cfg;
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <MCAL_SPI_Init+0xac>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6053      	str	r3, [r2, #4]
	}
	tempregcr1 |= (0x1U << 6);
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8e:	81fb      	strh	r3, [r7, #14]

	tempregcr1 |= cfg->Device_Mode;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	89fb      	ldrh	r3, [r7, #14]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Com_Mode;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	885a      	ldrh	r2, [r3, #2]
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Frame_Format;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	889a      	ldrh	r2, [r3, #4]
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Data_Size;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	88da      	ldrh	r2, [r3, #6]
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->CLK_POL;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	891a      	ldrh	r2, [r3, #8]
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->CLK_PHA;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	895a      	ldrh	r2, [r3, #10]
 8001cc6:	89fb      	ldrh	r3, [r7, #14]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Baud_PS;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	89da      	ldrh	r2, [r3, #14]
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->NSS;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	899a      	ldrh	r2, [r3, #12]
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	81fb      	strh	r3, [r7, #14]

	tempregcr2 |= cfg->IRQ_En;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	8a1a      	ldrh	r2, [r3, #16]
 8001ce4:	89bb      	ldrh	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	81bb      	strh	r3, [r7, #12]

	SPIx->SPI_CR1 = tempregcr1;
 8001cea:	89fa      	ldrh	r2, [r7, #14]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempregcr2;
 8001cf0:	89ba      	ldrh	r2, [r7, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	605a      	str	r2, [r3, #4]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40013000 	.word	0x40013000
 8001d04:	2000028c 	.word	0x2000028c
 8001d08:	40013800 	.word	0x40013800

08001d0c <MCAL_SPI_GPIO_PINS>:

void MCAL_SPI_GPIO_PINS(SPI_TypeDef *SPIx) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t cfg;
	if (SPIx == SPI1) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <MCAL_SPI_GPIO_PINS+0x178>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d154      	bne.n	8001dc6 <MCAL_SPI_GPIO_PINS+0xba>
		// PA4 NSS
		// PA5 SCK
		// PA6 MISO
		// PA7 MOSI

		if (Global_SPI_CFG[SPI1_CFG]->Device_Mode == SPI_Device_Mode_Master) {
 8001d1c:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d129      	bne.n	8001d7a <MCAL_SPI_GPIO_PINS+0x6e>

			//NSS TO DOOOOOOO I WILL JUST USE SW NIGGER

			// SCK PA5 AFPP
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d26:	2306      	movs	r3, #6
 8001d28:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_5;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4619      	mov	r1, r3
 8001d38:	4854      	ldr	r0, [pc, #336]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001d3a:	f7ff fcd7 	bl	80016ec <MCAL_GPIO_Init>

			// MISO PA6 AFPP only in bidirectional
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 8001d3e:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <MCAL_SPI_GPIO_PINS+0x54>
				cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d48:	2306      	movs	r3, #6
 8001d4a:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_6;
 8001d4c:	2340      	movs	r3, #64	; 0x40
 8001d4e:	81bb      	strh	r3, [r7, #12]
				cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001d50:	2303      	movs	r3, #3
 8001d52:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &cfg);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484c      	ldr	r0, [pc, #304]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001d5c:	f7ff fcc6 	bl	80016ec <MCAL_GPIO_Init>
			}

			// MOSI PA7 AFPP
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d60:	2306      	movs	r3, #6
 8001d62:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_7;
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	4846      	ldr	r0, [pc, #280]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001d74:	f7ff fcba 	bl	80016ec <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &cfg);

		}

	}
}
 8001d78:	e07f      	b.n	8001e7a <MCAL_SPI_GPIO_PINS+0x16e>
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_5;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4619      	mov	r1, r3
 8001d88:	4840      	ldr	r0, [pc, #256]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001d8a:	f7ff fcaf 	bl	80016ec <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	885b      	ldrh	r3, [r3, #2]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <MCAL_SPI_GPIO_PINS+0xa0>
				cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_7;
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &cfg);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	4839      	ldr	r0, [pc, #228]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001da8:	f7ff fca0 	bl	80016ec <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001dac:	2306      	movs	r3, #6
 8001dae:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_6;
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001db4:	2303      	movs	r3, #3
 8001db6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4833      	ldr	r0, [pc, #204]	; (8001e8c <MCAL_SPI_GPIO_PINS+0x180>)
 8001dc0:	f7ff fc94 	bl	80016ec <MCAL_GPIO_Init>
}
 8001dc4:	e059      	b.n	8001e7a <MCAL_SPI_GPIO_PINS+0x16e>
		if (Global_SPI_CFG[SPI2_CFG]->Device_Mode == SPI_Device_Mode_Master) {
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d12c      	bne.n	8001e2a <MCAL_SPI_GPIO_PINS+0x11e>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd8:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	482a      	ldr	r0, [pc, #168]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001de6:	f7ff fc81 	bl	80016ec <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	885b      	ldrh	r3, [r3, #2]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <MCAL_SPI_GPIO_PINS+0x102>
				cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001df4:	2306      	movs	r3, #6
 8001df6:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_14;
 8001df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfc:	81bb      	strh	r3, [r7, #12]
				cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &cfg);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4619      	mov	r1, r3
 8001e08:	4821      	ldr	r0, [pc, #132]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001e0a:	f7ff fc6f 	bl	80016ec <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001e0e:	2306      	movs	r3, #6
 8001e10:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_15;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	481b      	ldr	r0, [pc, #108]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001e24:	f7ff fc62 	bl	80016ec <MCAL_GPIO_Init>
}
 8001e28:	e027      	b.n	8001e7a <MCAL_SPI_GPIO_PINS+0x16e>
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 8001e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e32:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4815      	ldr	r0, [pc, #84]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001e3c:	f7ff fc56 	bl	80016ec <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <MCAL_SPI_GPIO_PINS+0x154>
				cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_14;
 8001e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e52:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &cfg);
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001e5c:	f7ff fc46 	bl	80016ec <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001e60:	2306      	movs	r3, #6
 8001e62:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_15;
 8001e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e68:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MCAL_SPI_GPIO_PINS+0x184>)
 8001e76:	f7ff fc39 	bl	80016ec <MCAL_GPIO_Init>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40013000 	.word	0x40013000
 8001e88:	2000028c 	.word	0x2000028c
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <MCAL_SPI_TX>:

// this only really works in full duplux 2 line uindirectional , or 1 line unidirectional, bidirectional requires more logic (i think ?)

void MCAL_SPI_TX(SPI_TypeDef *SPIx, uint8_t *Pdata, uint16_t size) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t tempctr = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	82fb      	strh	r3, [r7, #22]
	uint8_t *tempPdata = Pdata;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	613b      	str	r3, [r7, #16]

	while (!CheckFlag_TXE(SPIx))
 8001eaa:	bf00      	nop
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fea4 	bl	8001bfa <CheckFlag_TXE>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f9      	beq.n	8001eac <MCAL_SPI_TX+0x18>
		;

	SPIx->SPI_DR = *tempPdata;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	60da      	str	r2, [r3, #12]
	tempPdata += sizeof(uint8_t);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
	tempctr++;
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	82fb      	strh	r3, [r7, #22]

	while (tempctr <= size) {
 8001ece:	e010      	b.n	8001ef2 <MCAL_SPI_TX+0x5e>
		if (CheckFlag_TXE(SPIx)) {
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fe92 	bl	8001bfa <CheckFlag_TXE>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <MCAL_SPI_TX+0x5e>
			SPIx->SPI_DR = *tempPdata;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	60da      	str	r2, [r3, #12]
			tempPdata += sizeof(uint8_t);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
			tempctr++;
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	82fb      	strh	r3, [r7, #22]
	while (tempctr <= size) {
 8001ef2:	8afa      	ldrh	r2, [r7, #22]
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d9ea      	bls.n	8001ed0 <MCAL_SPI_TX+0x3c>

	// TO DO WAIT FOR END OF TRANSMITTION --> BUSY FLAG "MAYBE UNNECESSARY"

	//while(CheckFlag_BSY);

}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SPI1_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
//                                I R Q                                   //
////////////////////////////////////////////////////////////////////////////

void SPI1_IRQHandler(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC src;

	src.TXE = CheckFlag_TXE(SPI1);
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <SPI1_IRQHandler+0x5c>)
 8001f0c:	f7ff fe75 	bl	8001bfa <CheckFlag_TXE>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	793b      	ldrb	r3, [r7, #4]
 8001f1a:	f362 0300 	bfi	r3, r2, #0, #1
 8001f1e:	713b      	strb	r3, [r7, #4]
	src.RXNE = CheckFlag_RXNE(SPI1);
 8001f20:	480f      	ldr	r0, [pc, #60]	; (8001f60 <SPI1_IRQHandler+0x5c>)
 8001f22:	f7ff fe7a 	bl	8001c1a <CheckFlag_RXNE>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	793b      	ldrb	r3, [r7, #4]
 8001f30:	f362 0341 	bfi	r3, r2, #1, #1
 8001f34:	713b      	strb	r3, [r7, #4]
	src.ERRI = CheckFlag_ERR(SPI1);
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <SPI1_IRQHandler+0x5c>)
 8001f38:	f7ff fe7e 	bl	8001c38 <CheckFlag_ERR>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	793b      	ldrb	r3, [r7, #4]
 8001f46:	f362 0382 	bfi	r3, r2, #2, #1
 8001f4a:	713b      	strb	r3, [r7, #4]

	Global_SPI_CFG[SPI1_CFG]->P_IRq_CallBack(src);
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SPI1_IRQHandler+0x60>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	7938      	ldrb	r0, [r7, #4]
 8001f54:	4798      	blx	r3
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000
 8001f64:	2000028c 	.word	0x2000028c

08001f68 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC src;

	src.TXE = CheckFlag_TXE(SPI2);
 8001f6e:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <SPI2_IRQHandler+0x5c>)
 8001f70:	f7ff fe43 	bl	8001bfa <CheckFlag_TXE>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	793b      	ldrb	r3, [r7, #4]
 8001f7e:	f362 0300 	bfi	r3, r2, #0, #1
 8001f82:	713b      	strb	r3, [r7, #4]
	src.RXNE = CheckFlag_RXNE(SPI2);
 8001f84:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <SPI2_IRQHandler+0x5c>)
 8001f86:	f7ff fe48 	bl	8001c1a <CheckFlag_RXNE>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	793b      	ldrb	r3, [r7, #4]
 8001f94:	f362 0341 	bfi	r3, r2, #1, #1
 8001f98:	713b      	strb	r3, [r7, #4]
	src.ERRI = CheckFlag_ERR(SPI2);
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <SPI2_IRQHandler+0x5c>)
 8001f9c:	f7ff fe4c 	bl	8001c38 <CheckFlag_ERR>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	793b      	ldrb	r3, [r7, #4]
 8001faa:	f362 0382 	bfi	r3, r2, #2, #1
 8001fae:	713b      	strb	r3, [r7, #4]

	Global_SPI_CFG[SPI2_CFG]->P_IRq_CallBack(src);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SPI2_IRQHandler+0x60>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	7938      	ldrb	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	2000028c 	.word	0x2000028c

08001fcc <TIM2_IRQHandler>:

static volatile uint32_t elapsed_ms = 0;

/////////// PROGRESS SECTION ///////////////

void TIM2_IRQHandler(void) {
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	elapsed_ms += 1000;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <TIM2_IRQHandler+0x28>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <TIM2_IRQHandler+0x28>)
 8001fda:	6013      	str	r3, [r2, #0]
	TIMER2->SR &= ~1;
 8001fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6113      	str	r3, [r2, #16]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000294 	.word	0x20000294

08001ff8 <Ticker_Init>:

void Ticker_Init(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	MCAL_NVIC_EnableIRQ(NVIC_TIM2_IRQn);
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f7ff fc25 	bl	800184c <MCAL_NVIC_EnableIRQ>
	TIMER2->DIER |= 1;
 8002002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	60d3      	str	r3, [r2, #12]

	TIMER2->PSC = 15999;
 8002012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002016:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
	TIMER2->ARR = 1000;
 800201c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <Ticker_Start>:

void Ticker_Start(void) {
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
	TIMER2->CR1 |= 1;
 800202e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <Ticker_Stop>:

void Ticker_Stop(void) {
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
	TIMER2->CR1 &= ~1;
 800204a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <Ticker_Reset_Count>:

void Ticker_Reset_Count(void) {
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	elapsed_ms = 0;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <Ticker_Reset_Count+0x1c>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
	TIMER2->CNT = 0;
 800206e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000294 	.word	0x20000294

08002084 <Get_ms>:

uint32_t Get_ms(void) {
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

	return (elapsed_ms + TIMER2->CNT);
 8002088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800208c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208e:	4b03      	ldr	r3, [pc, #12]	; (800209c <Get_ms+0x18>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000294 	.word	0x20000294

080020a0 <Ticker_us>:


//////////////  PRE DELAY SECTION  //////////////////

void Ticker_us(uint32_t us) {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	TIMER2->CNT = 0;
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
	TIMER2->PSC = (16 -1);
 80020b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b4:	220f      	movs	r2, #15
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28

	TIMER2->ARR = (us - 1);
 80020b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIMER2->CR1 |= 0x9;
 80020c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020cc:	f043 0309 	orr.w	r3, r3, #9
 80020d0:	6013      	str	r3, [r2, #0]

	while(TIMER2->CR1 & 1);
 80020d2:	bf00      	nop
 80020d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f8      	bne.n	80020d4 <Ticker_us+0x34>
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <Ticker_ms>:



void Ticker_ms(uint32_t ms)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

	int i;
	for(i = 0; i<ms; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e006      	b.n	800210a <Ticker_ms+0x1c>
	{
		Ticker_us(1000);
 80020fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002100:	f7ff ffce 	bl	80020a0 <Ticker_us>
	for(i = 0; i<ms; i++)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3301      	adds	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d8f4      	bhi.n	80020fc <Ticker_ms+0xe>
	}

	// RESET CONFIGURTIONS FOR TICKER INIT
	TIMER2->CR1 &= ~(1<<3); //zero out opm option
 8002112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211c:	f023 0308 	bic.w	r3, r3, #8
 8002120:	6013      	str	r3, [r2, #0]
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <GetIndex>:
/*************<Global Variables***********/
USART_Config_t *Global_USART_Config[3] = { NULL };

/*************<Private Helper Functions***********/

static uint8_t GetIndex(USART_TypeDef *USARTx) {
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	if (USARTx == USART1) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <GetIndex+0x2c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <GetIndex+0x14>
		return 0;
 800213c:	2300      	movs	r3, #0
 800213e:	e006      	b.n	800214e <GetIndex+0x22>
	} else if (USARTx == USART2) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a06      	ldr	r2, [pc, #24]	; (800215c <GetIndex+0x30>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <GetIndex+0x20>
		return 1;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <GetIndex+0x22>
	} else {
		return 2;
 800214c:	2302      	movs	r3, #2
	}
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40013800 	.word	0x40013800
 800215c:	40004400 	.word	0x40004400

08002160 <MCAL_USART_Init>:

/*************<Implementation***********/

void MCAL_USART_Init(USART_TypeDef *USARTx, USART_Config_t *config) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	u32 pclk, BRR;

	uint8_t LocalIndex = GetIndex(USARTx);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffde 	bl	800212c <GetIndex>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]
	Global_USART_Config[LocalIndex] = config;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	4937      	ldr	r1, [pc, #220]	; (8002254 <MCAL_USART_Init+0xf4>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//EN USART
	USARTx->CR1 |= 1 << 13;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60da      	str	r2, [r3, #12]
	//Enable TX or RX or both
	USARTx->CR1 |= config->USART_Mode;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
	//Configure Parity width
	USARTx->CR1 |= config->PayLoadLength;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60da      	str	r2, [r3, #12]
	//configure Parity bit
	USARTx->CR1 |= config->Parity;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
	//configure Stop bits
	USARTx->CR2 |= config->StopBits;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
	//configure Flow Control
	USARTx->CR3 |= config->FlowCTRL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	615a      	str	r2, [r3, #20]
	//configure Baud Rate
	//call RCC get clk to know the clock for which you will calculate the baud rate
	if (USARTx == USART1) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <MCAL_USART_Init+0xf8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <MCAL_USART_Init+0x80>
		pclk = MCAL_RCC_GetPCLK2();
 80021d8:	f7ff fd06 	bl	8001be8 <MCAL_RCC_GetPCLK2>
 80021dc:	6178      	str	r0, [r7, #20]
 80021de:	e002      	b.n	80021e6 <MCAL_USART_Init+0x86>
	} else {
		pclk = MCAL_RCC_GetPCLK1();
 80021e0:	f7ff fcf9 	bl	8001bd6 <MCAL_RCC_GetPCLK1>
 80021e4:	6178      	str	r0, [r7, #20]
	}
	BRR = UART_BRR_VALUE(pclk, config->BaudRate);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	0119      	lsls	r1, r3, #4
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009a      	lsls	r2, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	fbb2 f2f3 	udiv	r2, r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	6978      	ldr	r0, [r7, #20]
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	2064      	movs	r0, #100	; 0x64
 8002218:	fb00 f303 	mul.w	r3, r0, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <MCAL_USART_Init+0xfc>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	430b      	orrs	r3, r1
 800222e:	60fb      	str	r3, [r7, #12]
	USARTx->BRR = BRR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]

	//Enable or Disable interrupt
	if (config->IRQ_Enable != USART_IRQ_ENABLE_NONE) {
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <MCAL_USART_Init+0xec>
		USARTx->CR1 |= (config->IRQ_Enable);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
	}

	//NVIC is handled separately as well as RCC initialization
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000298 	.word	0x20000298
 8002258:	40013800 	.word	0x40013800
 800225c:	51eb851f 	.word	0x51eb851f

08002260 <MCAL_USART_Send_Data>:
		MCAL_NVIC_DisableIRQ(NVIC_USART3_IRQn);
	}
}

void MCAL_USART_Send_Data(USART_TypeDef *USARTx, uint16_t *pTxBuffer,
		enum Polling_Mechanism PollingEN, uint8_t size) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	460b      	mov	r3, r1
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	4613      	mov	r3, r2
 8002274:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_cnt = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
	uint8_t LocalIndex = GetIndex(USARTx);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ff56 	bl	800212c <GetIndex>
 8002280:	4603      	mov	r3, r0
 8002282:	75bb      	strb	r3, [r7, #22]
	while (temp_cnt <= size) {
 8002284:	e029      	b.n	80022da <MCAL_USART_Send_Data+0x7a>
		if (PollingEN == enable) {
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <MCAL_USART_Send_Data+0x3a>
			while (!(USARTx->SR & 1 << 7))
 800228c:	bf00      	nop
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f9      	beq.n	800228e <MCAL_USART_Send_Data+0x2e>
				;
		}
		if (Global_USART_Config[LocalIndex]->PayLoadLength == USART_DATA_9bits) {
 800229a:	7dbb      	ldrb	r3, [r7, #22]
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <MCAL_USART_Send_Data+0x8c>)
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d10c      	bne.n	80022c4 <MCAL_USART_Send_Data+0x64>
			USARTx->DR = (*pTxBuffer & (u16) 0x1FF);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]
			pTxBuffer += 1;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3302      	adds	r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
			temp_cnt++;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	3301      	adds	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
 80022c2:	e00a      	b.n	80022da <MCAL_USART_Send_Data+0x7a>
		} else {
			USARTx->DR = (*pTxBuffer & (u8) 0xFF);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
			pTxBuffer += 1;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3302      	adds	r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
			temp_cnt++;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	3301      	adds	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
	while (temp_cnt <= size) {
 80022da:	7dfa      	ldrb	r2, [r7, #23]
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d9d1      	bls.n	8002286 <MCAL_USART_Send_Data+0x26>
		}
	}

}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000298 	.word	0x20000298

080022f0 <MCAL_USART_Get_Data>:
	while (!(USARTx->SR & 1 << 6))
		;
}

void MCAL_USART_Get_Data(USART_TypeDef *USARTx, uint16_t *pRxBuffer,
		enum Polling_Mechanism PollingEN, uint8_t size) {
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	460b      	mov	r3, r1
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	4613      	mov	r3, r2
 8002304:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_cnt = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
	//uint8_t LocalIndex = GetIndex(USARTx);

	while (temp_cnt <= size) {
 800230a:	e016      	b.n	800233a <MCAL_USART_Get_Data+0x4a>
		if (PollingEN == enable) {
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <MCAL_USART_Get_Data+0x30>
			while (!(USARTx->SR & 1 << 5))
 8002312:	bf00      	nop
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f9      	beq.n	8002314 <MCAL_USART_Get_Data+0x24>
//				pRxBuffer += 1;
//				temp_cnt++;
//			}
//		} else {
//			if (Global_USART_Config[LocalIndex]->Parity == USART_PARITY_NONE) {
				*((u16*) pRxBuffer) = (USARTx->DR & (u8) 0xFF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b29a      	uxth	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	801a      	strh	r2, [r3, #0]
				pRxBuffer += 1;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3302      	adds	r3, #2
 8002332:	60bb      	str	r3, [r7, #8]
				temp_cnt++;
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	3301      	adds	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
	while (temp_cnt <= size) {
 800233a:	7dfa      	ldrb	r2, [r7, #23]
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d9e4      	bls.n	800230c <MCAL_USART_Get_Data+0x1c>
//				pRxBuffer += 1;
//				temp_cnt++;
//			}
//		}
	}
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
	...

08002350 <MCAL_USART_GPIO_SetPins>:

void MCAL_USART_GPIO_SetPins(USART_TypeDef *USARTx) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t cfg;
	if (USARTx == USART1) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <MCAL_USART_GPIO_SetPins+0x1d8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d149      	bne.n	80023f4 <MCAL_USART_GPIO_SetPins+0xa4>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		cfg.GPIO_PinNumber = GPIO_PIN_9;
 8002360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002364:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8002366:	2306      	movs	r3, #6
 8002368:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800236a:	2302      	movs	r3, #2
 800236c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	4619      	mov	r1, r3
 8002374:	486d      	ldr	r0, [pc, #436]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8002376:	f7ff f9b9 	bl	80016ec <MCAL_GPIO_Init>

		//PA10 RX
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8002380:	2301      	movs	r3, #1
 8002382:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	4868      	ldr	r0, [pc, #416]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 800238c:	f7ff f9ae 	bl	80016ec <MCAL_GPIO_Init>

		//PA11 CTS
		if (Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_CTS
 8002390:	4b67      	ldr	r3, [pc, #412]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239a:	d005      	beq.n	80023a8 <MCAL_USART_GPIO_SetPins+0x58>
				|| Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023a6:	d10a      	bne.n	80023be <MCAL_USART_GPIO_SetPins+0x6e>
			cfg.GPIO_PinNumber = GPIO_PIN_11;
 80023a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ac:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &cfg);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	485c      	ldr	r0, [pc, #368]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 80023ba:	f7ff f997 	bl	80016ec <MCAL_GPIO_Init>
		}

		//PA12 RTS
		if (Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_RTS
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d006      	beq.n	80023d8 <MCAL_USART_GPIO_SetPins+0x88>
				|| Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023d4:	f040 80a3 	bne.w	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
			cfg.GPIO_PinNumber = GPIO_PIN_12;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80023de:	2306      	movs	r3, #6
 80023e0:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	484f      	ldr	r0, [pc, #316]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 80023ee:	f7ff f97d 	bl	80016ec <MCAL_GPIO_Init>
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &cfg);

		}
	}
}
 80023f2:	e094      	b.n	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
	} else if (USARTx == USART2) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <MCAL_USART_GPIO_SetPins+0x1e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d144      	bne.n	8002486 <MCAL_USART_GPIO_SetPins+0x136>
		cfg.GPIO_PinNumber = GPIO_PIN_2;
 80023fc:	2304      	movs	r3, #4
 80023fe:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8002400:	2306      	movs	r3, #6
 8002402:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	4619      	mov	r1, r3
 800240e:	4847      	ldr	r0, [pc, #284]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8002410:	f7ff f96c 	bl	80016ec <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_3;
 8002414:	2308      	movs	r3, #8
 8002416:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8002418:	2301      	movs	r3, #1
 800241a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4619      	mov	r1, r3
 8002422:	4842      	ldr	r0, [pc, #264]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8002424:	f7ff f962 	bl	80016ec <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_CTS
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002432:	d005      	beq.n	8002440 <MCAL_USART_GPIO_SetPins+0xf0>
				|| Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 8002434:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800243e:	d109      	bne.n	8002454 <MCAL_USART_GPIO_SetPins+0x104>
			cfg.GPIO_PinNumber = GPIO_PIN_0;
 8002440:	2301      	movs	r3, #1
 8002442:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8002444:	2301      	movs	r3, #1
 8002446:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4619      	mov	r1, r3
 800244e:	4837      	ldr	r0, [pc, #220]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8002450:	f7ff f94c 	bl	80016ec <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_RTS
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245e:	d005      	beq.n	800246c <MCAL_USART_GPIO_SetPins+0x11c>
				|| Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246a:	d158      	bne.n	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
			cfg.GPIO_PinNumber = GPIO_PIN_1;
 800246c:	2302      	movs	r3, #2
 800246e:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8002470:	2306      	movs	r3, #6
 8002472:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	482b      	ldr	r0, [pc, #172]	; (800252c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8002480:	f7ff f934 	bl	80016ec <MCAL_GPIO_Init>
}
 8002484:	e04b      	b.n	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
	} else if (USARTx == USART3) {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <MCAL_USART_GPIO_SetPins+0x1e8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d147      	bne.n	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 800248e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002492:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8002494:	2306      	movs	r3, #6
 8002496:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &cfg);
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	4826      	ldr	r0, [pc, #152]	; (800253c <MCAL_USART_GPIO_SetPins+0x1ec>)
 80024a4:	f7ff f922 	bl	80016ec <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_11;
 80024a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ac:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &cfg);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	4820      	ldr	r0, [pc, #128]	; (800253c <MCAL_USART_GPIO_SetPins+0x1ec>)
 80024ba:	f7ff f917 	bl	80016ec <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_CTS
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c8:	d005      	beq.n	80024d6 <MCAL_USART_GPIO_SetPins+0x186>
				|| Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024d4:	d10a      	bne.n	80024ec <MCAL_USART_GPIO_SetPins+0x19c>
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 80024d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024da:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80024dc:	2301      	movs	r3, #1
 80024de:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &cfg);
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	4619      	mov	r1, r3
 80024e6:	4815      	ldr	r0, [pc, #84]	; (800253c <MCAL_USART_GPIO_SetPins+0x1ec>)
 80024e8:	f7ff f900 	bl	80016ec <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_RTS
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f6:	d005      	beq.n	8002504 <MCAL_USART_GPIO_SetPins+0x1b4>
				|| Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_CTS_RTS) {
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <MCAL_USART_GPIO_SetPins+0x1e0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002502:	d10c      	bne.n	800251e <MCAL_USART_GPIO_SetPins+0x1ce>
			cfg.GPIO_PinNumber = GPIO_PIN_14;
 8002504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002508:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800250a:	2306      	movs	r3, #6
 800250c:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4619      	mov	r1, r3
 8002518:	4808      	ldr	r0, [pc, #32]	; (800253c <MCAL_USART_GPIO_SetPins+0x1ec>)
 800251a:	f7ff f8e7 	bl	80016ec <MCAL_GPIO_Init>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40013800 	.word	0x40013800
 800252c:	40010800 	.word	0x40010800
 8002530:	20000298 	.word	0x20000298
 8002534:	40004400 	.word	0x40004400
 8002538:	40004800 	.word	0x40004800
 800253c:	40010c00 	.word	0x40010c00

08002540 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8002544:	4b02      	ldr	r3, [pc, #8]	; (8002550 <USART1_IRQHandler+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4798      	blx	r3
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000298 	.word	0x20000298

08002554 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <USART2_IRQHandler+0x10>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4798      	blx	r3
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000298 	.word	0x20000298

08002568 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <USART3_IRQHandler+0x10>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4798      	blx	r3
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000298 	.word	0x20000298

0800257c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002582:	2018      	movs	r0, #24
 8002584:	f001 fec4 	bl	8004310 <pvPortMalloc>
 8002588:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f938 	bl	8002810 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80025a0:	687b      	ldr	r3, [r7, #4]
    }
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
    #endif

    vTaskSuspendAll();
 80025c6:	f000 ffc7 	bl	8003558 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	69f8      	ldr	r0, [r7, #28]
 80025d6:	f000 f8fa 	bl	80027ce <prvTestWaitCondition>
 80025da:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <xEventGroupWaitBits+0x54>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <xEventGroupWaitBits+0x96>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e020      	b.n	8002642 <xEventGroupWaitBits+0x96>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d104      	bne.n	8002610 <xEventGroupWaitBits+0x64>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 800260a:	2301      	movs	r3, #1
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	e018      	b.n	8002642 <xEventGroupWaitBits+0x96>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <xEventGroupWaitBits+0x72>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <xEventGroupWaitBits+0x80>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	1d18      	adds	r0, r3, #4
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	4313      	orrs	r3, r2
 8002636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002638:	4619      	mov	r1, r3
 800263a:	f001 f9e9 	bl	8003a10 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8002642:	f000 ff97 	bl	8003574 <xTaskResumeAll>
 8002646:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	2b00      	cmp	r3, #0
 800264c:	d031      	beq.n	80026b2 <xEventGroupWaitBits+0x106>
    {
        if( xAlreadyYielded == pdFALSE )
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <xEventGroupWaitBits+0xb8>
        {
            portYIELD_WITHIN_API();
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <xEventGroupWaitBits+0x110>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8002664:	f001 fc90 	bl	8003f88 <uxTaskResetEventItemValue>
 8002668:	62f8      	str	r0, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11a      	bne.n	80026aa <xEventGroupWaitBits+0xfe>
        {
            taskENTER_CRITICAL();
 8002674:	f001 fdb2 	bl	80041dc <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002684:	f000 f8a3 	bl	80027ce <prvTestWaitCondition>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <xEventGroupWaitBits+0xf6>
                {
                    if( xClearOnExit != pdFALSE )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <xEventGroupWaitBits+0xf6>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 80026a6:	f001 fdb3 	bl	8004210 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    taskENTER_CRITICAL();
 80026ce:	f001 fd85 	bl	80041dc <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 80026e6:	f001 fd93 	bl	8004210 <vPortExitCritical>

    return uxReturn;
 80026ea:	68bb      	ldr	r3, [r7, #8]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	3304      	adds	r3, #4
 800270e:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3308      	adds	r3, #8
 8002714:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8002716:	f000 ff1f 	bl	8003558 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	431a      	orrs	r2, r3
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800272c:	e03c      	b.n	80027a8 <xEventGroupSetBits+0xb4>
        {
            pxNext = listGET_NEXT( pxListItem );
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002744:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800274c:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <xEventGroupSetBits+0x76>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <xEventGroupSetBits+0x88>
                {
                    xMatchFound = pdTRUE;
 8002764:	2301      	movs	r3, #1
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e008      	b.n	800277c <xEventGroupSetBits+0x88>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d101      	bne.n	800277c <xEventGroupSetBits+0x88>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8002778:	2301      	movs	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <xEventGroupSetBits+0xb0>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <xEventGroupSetBits+0xa0>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800278c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800279c:	4619      	mov	r1, r3
 800279e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a0:	f001 fa36 	bl	8003c10 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1be      	bne.n	800272e <xEventGroupSetBits+0x3a>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80027be:	f000 fed9 	bl	8003574 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3730      	adds	r7, #48	; 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e007      	b.n	8002804 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d101      	bne.n	8002804 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8002804:	697b      	ldr	r3, [r7, #20]
}
 8002806:	4618      	mov	r0, r3
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0208 	add.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0208 	add.w	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e00c      	b.n	80028e6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3308      	adds	r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e002      	b.n	80028da <vListInsert+0x2e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d2f6      	bcs.n	80028d4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d103      	bne.n	8002950 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800297a:	2301      	movs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05d      	beq.n	8002a44 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d059      	beq.n	8002a44 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	2100      	movs	r1, #0
 800299a:	fba3 2302 	umull	r2, r3, r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d000      	beq.n	80029a4 <xQueueGenericReset+0x34>
 80029a2:	2101      	movs	r1, #1
 80029a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14c      	bne.n	8002a44 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80029aa:	f001 fc17 	bl	80041dc <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	441a      	add	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	3b01      	subs	r3, #1
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	441a      	add	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d114      	bne.n	8002a2a <xQueueGenericReset+0xba>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <xQueueGenericReset+0xce>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 f837 	bl	8003a80 <xTaskRemoveFromEventList>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <xQueueGenericReset+0xce>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <xQueueGenericReset+0xe4>)
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	e009      	b.n	8002a3e <xQueueGenericReset+0xce>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff feee 	bl	8002810 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fee9 	bl	8002810 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8002a3e:	f001 fbe7 	bl	8004210 <vPortExitCritical>
 8002a42:	e001      	b.n	8002a48 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02d      	beq.n	8002acc <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a70:	2100      	movs	r1, #0
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d000      	beq.n	8002a80 <xQueueGenericCreate+0x28>
 8002a7e:	2101      	movs	r1, #1
 8002a80:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d122      	bne.n	8002acc <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a8e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8002a92:	d81b      	bhi.n	8002acc <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3348      	adds	r3, #72	; 0x48
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fc34 	bl	8004310 <pvPortMalloc>
 8002aa8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3348      	adds	r3, #72	; 0x48
 8002ab8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f805 	bl	8002ad6 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002acc:	69fb      	ldr	r3, [r7, #28]
    }
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b04:	2101      	movs	r1, #1
 8002b06:	69b8      	ldr	r0, [r7, #24]
 8002b08:	f7ff ff32 	bl	8002970 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b2a:	f001 fb57 	bl	80041dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <xQueueGenericSend+0x2c>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d129      	bne.n	8002b94 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	6a38      	ldr	r0, [r7, #32]
 8002b46:	f000 f931 	bl	8002dac <prvCopyDataToQueue>
 8002b4a:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 ff91 	bl	8003a80 <xTaskRemoveFromEventList>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002b64:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <xQueueGenericSend+0x150>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	e00a      	b.n	8002b8c <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <xQueueGenericSend+0x150>)
 8002b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002b8c:	f001 fb40 	bl	8004210 <vPortExitCritical>
                return pdPASS;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e063      	b.n	8002c5c <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b9a:	f001 fb39 	bl	8004210 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e05c      	b.n	8002c5c <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 f8cf 	bl	8003d50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bb6:	f001 fb2b 	bl	8004210 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bba:	f000 fccd 	bl	8003558 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bbe:	f001 fb0d 	bl	80041dc <vPortEnterCritical>
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d103      	bne.n	8002bd8 <xQueueGenericSend+0xc4>
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSend+0xda>
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bee:	f001 fb0f 	bl	8004210 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bf2:	1d3a      	adds	r2, r7, #4
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 f8be 	bl	8003d7c <xTaskCheckForTimeOut>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d124      	bne.n	8002c50 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c06:	6a38      	ldr	r0, [r7, #32]
 8002c08:	f000 f9ba 	bl	8002f80 <prvIsQueueFull>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	3310      	adds	r3, #16
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fee2 	bl	80039e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c20:	6a38      	ldr	r0, [r7, #32]
 8002c22:	f000 f945 	bl	8002eb0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c26:	f000 fca5 	bl	8003574 <xTaskResumeAll>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f47f af7c 	bne.w	8002b2a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <xQueueGenericSend+0x150>)
 8002c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	e772      	b.n	8002b2a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002c44:	6a38      	ldr	r0, [r7, #32]
 8002c46:	f000 f933 	bl	8002eb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c4a:	f000 fc93 	bl	8003574 <xTaskResumeAll>
 8002c4e:	e76c      	b.n	8002b2a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002c50:	6a38      	ldr	r0, [r7, #32]
 8002c52:	f000 f92d 	bl	8002eb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c56:	f000 fc8d 	bl	8003574 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002c5a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	e000ed04 	.word	0xe000ed04

08002c68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c7c:	f001 faae 	bl	80041dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01f      	beq.n	8002ccc <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6a38      	ldr	r0, [r7, #32]
 8002c90:	f000 f8e8 	bl	8002e64 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fee9 	bl	8003a80 <xTaskRemoveFromEventList>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <xQueueReceive+0x140>)
 8002cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cc4:	f001 faa4 	bl	8004210 <vPortExitCritical>
                return pdPASS;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e069      	b.n	8002da0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cd2:	f001 fa9d 	bl	8004210 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e062      	b.n	8002da0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f833 	bl	8003d50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cee:	f001 fa8f 	bl	8004210 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cf2:	f000 fc31 	bl	8003558 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cf6:	f001 fa71 	bl	80041dc <vPortEnterCritical>
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d103      	bne.n	8002d10 <xQueueReceive+0xa8>
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d103      	bne.n	8002d26 <xQueueReceive+0xbe>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d26:	f001 fa73 	bl	8004210 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d2a:	1d3a      	adds	r2, r7, #4
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 f822 	bl	8003d7c <xTaskCheckForTimeOut>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d123      	bne.n	8002d86 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d3e:	6a38      	ldr	r0, [r7, #32]
 8002d40:	f000 f908 	bl	8002f54 <prvIsQueueEmpty>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	3324      	adds	r3, #36	; 0x24
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe46 	bl	80039e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d58:	6a38      	ldr	r0, [r7, #32]
 8002d5a:	f000 f8a9 	bl	8002eb0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d5e:	f000 fc09 	bl	8003574 <xTaskResumeAll>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d189      	bne.n	8002c7c <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <xQueueReceive+0x140>)
 8002d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	e780      	b.n	8002c7c <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d7a:	6a38      	ldr	r0, [r7, #32]
 8002d7c:	f000 f898 	bl	8002eb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d80:	f000 fbf8 	bl	8003574 <xTaskResumeAll>
 8002d84:	e77a      	b.n	8002c7c <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f000 f892 	bl	8002eb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d8c:	f000 fbf2 	bl	8003574 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d90:	6a38      	ldr	r0, [r7, #32]
 8002d92:	f000 f8df 	bl	8002f54 <prvIsQueueEmpty>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f43f af6f 	beq.w	8002c7c <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002d9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d043      	beq.n	8002e52 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d119      	bne.n	8002e04 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6858      	ldr	r0, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	f004 ffa4 	bl	8007d28 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d32b      	bcc.n	8002e52 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e026      	b.n	8002e52 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68d8      	ldr	r0, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	f004 ff8a 	bl	8007d28 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	441a      	add	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	425b      	negs	r3, r3
 8002e3a:	441a      	add	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d105      	bne.n	8002e52 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e5a:	693b      	ldr	r3, [r7, #16]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d303      	bcc.n	8002e98 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f004 ff40 	bl	8007d28 <memcpy>
    }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002eb8:	f001 f990 	bl	80041dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec4:	e011      	b.n	8002eea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fdd4 	bl	8003a80 <xTaskRemoveFromEventList>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ede:	f000 ff97 	bl	8003e10 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dce9      	bgt.n	8002ec6 <prvUnlockQueue+0x16>
 8002ef2:	e000      	b.n	8002ef6 <prvUnlockQueue+0x46>
                        break;
 8002ef4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002efe:	f001 f987 	bl	8004210 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f02:	f001 f96b 	bl	80041dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f0c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f0e:	e011      	b.n	8002f34 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fdaf 	bl	8003a80 <xTaskRemoveFromEventList>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f28:	f000 ff72 	bl	8003e10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dce9      	bgt.n	8002f10 <prvUnlockQueue+0x60>
 8002f3c:	e000      	b.n	8002f40 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f3e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f48:	f001 f962 	bl	8004210 <vPortExitCritical>
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f5c:	f001 f93e 	bl	80041dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e001      	b.n	8002f72 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f72:	f001 f94d 	bl	8004210 <vPortExitCritical>

    return xReturn;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f88:	f001 f928 	bl	80041dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d102      	bne.n	8002f9e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e001      	b.n	8002fa2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fa2:	f001 f935 	bl	8004210 <vPortExitCritical>

    return xReturn;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 f9a3 	bl	8004310 <pvPortMalloc>
 8002fca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fd2:	204c      	movs	r0, #76	; 0x4c
 8002fd4:	f001 f99c 	bl	8004310 <pvPortMalloc>
 8002fd8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	e005      	b.n	8002ff4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002fe8:	6978      	ldr	r0, [r7, #20]
 8002fea:	f001 fa3f 	bl	800446c <vPortFree>
 8002fee:	e001      	b.n	8002ff4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d013      	beq.n	8003022 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9303      	str	r3, [sp, #12]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	9302      	str	r3, [sp, #8]
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f80e 	bl	8003032 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003016:	69f8      	ldr	r0, [r7, #28]
 8003018:	f000 f884 	bl	8003124 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e002      	b.n	8003028 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003028:	69bb      	ldr	r3, [r7, #24]
    }
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800304a:	3b01      	subs	r3, #1
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01f      	beq.n	80030a0 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e012      	b.n	800308c <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4413      	add	r3, r2
 800306c:	7819      	ldrb	r1, [r3, #0]
 800306e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4413      	add	r3, r2
 8003074:	3334      	adds	r3, #52	; 0x34
 8003076:	460a      	mov	r2, r1
 8003078:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d9e9      	bls.n	8003066 <prvInitialiseNewTask+0x34>
 8003092:	e000      	b.n	8003096 <prvInitialiseNewTask+0x64>
            {
                break;
 8003094:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800309e:	e003      	b.n	80030a8 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d901      	bls.n	80030b2 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030ae:	2304      	movs	r3, #4
 80030b0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fbc6 	bl	800284e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	3318      	adds	r3, #24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fbc1 	bl	800284e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f1c3 0205 	rsb	r2, r3, #5
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	3344      	adds	r3, #68	; 0x44
 80030e6:	2204      	movs	r2, #4
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fd7f 	bl	8007bee <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	3348      	adds	r3, #72	; 0x48
 80030f4:	2201      	movs	r2, #1
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 fd78 	bl	8007bee <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	6938      	ldr	r0, [r7, #16]
 8003104:	f000 ffd8 	bl	80040b8 <pxPortInitialiseStack>
 8003108:	4602      	mov	r2, r0
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003118:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800312c:	f001 f856 	bl	80041dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <prvAddNewTaskToReadyList+0x108>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <prvAddNewTaskToReadyList+0x108>)
 8003138:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <prvAddNewTaskToReadyList+0x10c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003142:	4a3b      	ldr	r2, [pc, #236]	; (8003230 <prvAddNewTaskToReadyList+0x10c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003148:	4b38      	ldr	r3, [pc, #224]	; (800322c <prvAddNewTaskToReadyList+0x108>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003150:	f000 fe82 	bl	8003e58 <prvInitialiseTaskLists>
 8003154:	e00d      	b.n	8003172 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <prvAddNewTaskToReadyList+0x110>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <prvAddNewTaskToReadyList+0x10c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800316c:	4a30      	ldr	r2, [pc, #192]	; (8003230 <prvAddNewTaskToReadyList+0x10c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <prvAddNewTaskToReadyList+0x114>)
 800317a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <prvAddNewTaskToReadyList+0x118>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <prvAddNewTaskToReadyList+0x118>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003192:	492b      	ldr	r1, [pc, #172]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3304      	adds	r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	3204      	adds	r2, #4
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1d1a      	adds	r2, r3, #4
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4918      	ldr	r1, [pc, #96]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	4814      	ldr	r0, [pc, #80]	; (8003240 <prvAddNewTaskToReadyList+0x11c>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4403      	add	r3, r0
 80031f8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80031fa:	f001 f809 	bl	8004210 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <prvAddNewTaskToReadyList+0x110>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <prvAddNewTaskToReadyList+0x10c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <prvAddNewTaskToReadyList+0x120>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000037c 	.word	0x2000037c
 8003230:	200002a4 	.word	0x200002a4
 8003234:	20000388 	.word	0x20000388
 8003238:	20000398 	.word	0x20000398
 800323c:	20000384 	.word	0x20000384
 8003240:	200002a8 	.word	0x200002a8
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800325a:	f000 f97d 	bl	8003558 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800325e:	2100      	movs	r1, #0
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fea9 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003266:	f000 f985 	bl	8003574 <xTaskResumeAll>
 800326a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <vTaskDelay+0x44>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003298:	f000 ffa0 	bl	80041dc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <vTaskSuspend+0x18>
 80032a2:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <vTaskSuspend+0x100>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	e000      	b.n	80032aa <vTaskSuspend+0x1a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fb33 	bl	800291c <uxListRemove>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d115      	bne.n	80032e8 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c0:	4934      	ldr	r1, [pc, #208]	; (8003394 <vTaskSuspend+0x104>)
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <vTaskSuspend+0x58>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2201      	movs	r2, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <vTaskSuspend+0x108>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4013      	ands	r3, r2
 80032e4:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <vTaskSuspend+0x108>)
 80032e6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3318      	adds	r3, #24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fb11 	bl	800291c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4826      	ldr	r0, [pc, #152]	; (800339c <vTaskSuspend+0x10c>)
 8003302:	f7ff fab0 	bl	8002866 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e010      	b.n	800332e <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	3348      	adds	r3, #72	; 0x48
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	3348      	adds	r3, #72	; 0x48
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	ddeb      	ble.n	800330c <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003334:	f000 ff6c 	bl	8004210 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <vTaskSuspend+0x110>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003340:	f000 ff4c 	bl	80041dc <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003344:	f000 fe06 	bl	8003f54 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003348:	f000 ff62 	bl	8004210 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <vTaskSuspend+0x100>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d118      	bne.n	8003388 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <vTaskSuspend+0x110>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <vTaskSuspend+0x114>)
 8003360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800336e:	e00b      	b.n	8003388 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <vTaskSuspend+0x10c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <vTaskSuspend+0x118>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d103      	bne.n	8003384 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <vTaskSuspend+0x100>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    }
 8003382:	e001      	b.n	8003388 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8003384:	f000 fae8 	bl	8003958 <vTaskSwitchContext>
    }
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200002a4 	.word	0x200002a4
 8003394:	200002a8 	.word	0x200002a8
 8003398:	20000384 	.word	0x20000384
 800339c:	20000368 	.word	0x20000368
 80033a0:	20000388 	.word	0x20000388
 80033a4:	e000ed04 	.word	0xe000ed04
 80033a8:	2000037c 	.word	0x2000037c

080033ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <prvTaskIsTaskSuspended+0x3c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10a      	bne.n	80033dc <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <prvTaskIsTaskSuspended+0x40>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d005      	beq.n	80033dc <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 80033d8:	2301      	movs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80033dc:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000368 	.word	0x20000368
 80033ec:	2000033c 	.word	0x2000033c

080033f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <vTaskResume+0xe0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	429a      	cmp	r2, r3
 8003404:	d05f      	beq.n	80034c6 <vTaskResume+0xd6>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05c      	beq.n	80034c6 <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 800340c:	f000 fee6 	bl	80041dc <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ffcb 	bl	80033ac <prvTaskIsTaskSuspended>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d052      	beq.n	80034c2 <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3304      	adds	r3, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fa7b 	bl	800291c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <vTaskResume+0xe4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <vTaskResume+0xe4>)
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	4926      	ldr	r1, [pc, #152]	; (80034d8 <vTaskResume+0xe8>)
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3304      	adds	r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	3204      	adds	r2, #4
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <vTaskResume+0xe8>)
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	615a      	str	r2, [r3, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4914      	ldr	r1, [pc, #80]	; (80034d8 <vTaskResume+0xe8>)
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1c59      	adds	r1, r3, #1
 8003496:	4810      	ldr	r0, [pc, #64]	; (80034d8 <vTaskResume+0xe8>)
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <vTaskResume+0xe0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d307      	bcc.n	80034c2 <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <vTaskResume+0xec>)
 80034b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80034c2:	f000 fea5 	bl	8004210 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200002a4 	.word	0x200002a4
 80034d4:	20000384 	.word	0x20000384
 80034d8:	200002a8 	.word	0x200002a8
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <vTaskStartScheduler+0x5c>)
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	4913      	ldr	r1, [pc, #76]	; (8003540 <vTaskStartScheduler+0x60>)
 80034f4:	4813      	ldr	r0, [pc, #76]	; (8003544 <vTaskStartScheduler+0x64>)
 80034f6:	f7ff fd5b 	bl	8002fb0 <xTaskCreate>
 80034fa:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d115      	bne.n	800352e <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003502:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003514:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <vTaskStartScheduler+0x68>)
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <vTaskStartScheduler+0x6c>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <vTaskStartScheduler+0x70>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800352a:	f000 fe37 	bl	800419c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <vTaskStartScheduler+0x74>)
 8003530:	681b      	ldr	r3, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200003a0 	.word	0x200003a0
 8003540:	08009c70 	.word	0x08009c70
 8003544:	08003e29 	.word	0x08003e29
 8003548:	2000039c 	.word	0x2000039c
 800354c:	20000388 	.word	0x20000388
 8003550:	20000380 	.word	0x20000380
 8003554:	20000000 	.word	0x20000000

08003558 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vTaskSuspendAll+0x18>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a03      	ldr	r2, [pc, #12]	; (8003570 <vTaskSuspendAll+0x18>)
 8003564:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	200003a4 	.word	0x200003a4

08003574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003582:	f000 fe2b 	bl	80041dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003586:	4b68      	ldr	r3, [pc, #416]	; (8003728 <xTaskResumeAll+0x1b4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	4a66      	ldr	r2, [pc, #408]	; (8003728 <xTaskResumeAll+0x1b4>)
 800358e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003590:	4b65      	ldr	r3, [pc, #404]	; (8003728 <xTaskResumeAll+0x1b4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 80c0 	bne.w	800371a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800359a:	4b64      	ldr	r3, [pc, #400]	; (800372c <xTaskResumeAll+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80bb 	beq.w	800371a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035a4:	e08a      	b.n	80036bc <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <xTaskResumeAll+0x1bc>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	6a12      	ldr	r2, [r2, #32]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	69d2      	ldr	r2, [r2, #28]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3318      	adds	r3, #24
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d103      	bne.n	80035dc <xTaskResumeAll+0x68>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3304      	adds	r3, #4
 800360e:	429a      	cmp	r2, r3
 8003610:	d103      	bne.n	800361a <xTaskResumeAll+0xa6>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	2201      	movs	r2, #1
 8003630:	409a      	lsls	r2, r3
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <xTaskResumeAll+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <xTaskResumeAll+0x1c0>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	493d      	ldr	r1, [pc, #244]	; (8003738 <xTaskResumeAll+0x1c4>)
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	3204      	adds	r2, #4
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1d1a      	adds	r2, r3, #4
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4a2e      	ldr	r2, [pc, #184]	; (8003738 <xTaskResumeAll+0x1c4>)
 8003680:	441a      	add	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	492b      	ldr	r1, [pc, #172]	; (8003738 <xTaskResumeAll+0x1c4>)
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c59      	adds	r1, r3, #1
 800369a:	4827      	ldr	r0, [pc, #156]	; (8003738 <xTaskResumeAll+0x1c4>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <xTaskResumeAll+0x1c8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <xTaskResumeAll+0x1cc>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <xTaskResumeAll+0x1bc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f af70 	bne.w	80035a6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036cc:	f000 fc42 	bl	8003f54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <xTaskResumeAll+0x1d0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036dc:	f000 f836 	bl	800374c <xTaskIncrementTick>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <xTaskResumeAll+0x1cc>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f1      	bne.n	80036dc <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <xTaskResumeAll+0x1d0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <xTaskResumeAll+0x1cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <xTaskResumeAll+0x1d4>)
 800370c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800371a:	f000 fd79 	bl	8004210 <vPortExitCritical>

    return xAlreadyYielded;
 800371e:	693b      	ldr	r3, [r7, #16]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200003a4 	.word	0x200003a4
 800372c:	2000037c 	.word	0x2000037c
 8003730:	2000033c 	.word	0x2000033c
 8003734:	20000384 	.word	0x20000384
 8003738:	200002a8 	.word	0x200002a8
 800373c:	200002a4 	.word	0x200002a4
 8003740:	20000390 	.word	0x20000390
 8003744:	2000038c 	.word	0x2000038c
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003756:	4b75      	ldr	r3, [pc, #468]	; (800392c <xTaskIncrementTick+0x1e0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 80dc 	bne.w	8003918 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003760:	4b73      	ldr	r3, [pc, #460]	; (8003930 <xTaskIncrementTick+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003768:	4a71      	ldr	r2, [pc, #452]	; (8003930 <xTaskIncrementTick+0x1e4>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d110      	bne.n	8003796 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003774:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <xTaskIncrementTick+0x1e8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <xTaskIncrementTick+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6d      	ldr	r2, [pc, #436]	; (8003934 <xTaskIncrementTick+0x1e8>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4a6d      	ldr	r2, [pc, #436]	; (8003938 <xTaskIncrementTick+0x1ec>)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b6c      	ldr	r3, [pc, #432]	; (800393c <xTaskIncrementTick+0x1f0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	4a6b      	ldr	r2, [pc, #428]	; (800393c <xTaskIncrementTick+0x1f0>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	f000 fbdf 	bl	8003f54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003796:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <xTaskIncrementTick+0x1f4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	f0c0 80a6 	bcc.w	80038ee <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a2:	4b64      	ldr	r3, [pc, #400]	; (8003934 <xTaskIncrementTick+0x1e8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ac:	4b64      	ldr	r3, [pc, #400]	; (8003940 <xTaskIncrementTick+0x1f4>)
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295
 80037b2:	601a      	str	r2, [r3, #0]
                    break;
 80037b4:	e09b      	b.n	80038ee <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <xTaskIncrementTick+0x1e8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d203      	bcs.n	80037d6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037ce:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <xTaskIncrementTick+0x1f4>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80037d4:	e08b      	b.n	80038ee <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	3304      	adds	r3, #4
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d103      	bne.n	8003804 <xTaskIncrementTick+0xb8>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2200      	movs	r2, #0
 8003808:	615a      	str	r2, [r3, #20]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01e      	beq.n	800385a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	6a12      	ldr	r2, [r2, #32]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	69d2      	ldr	r2, [r2, #28]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3318      	adds	r3, #24
 800383e:	429a      	cmp	r2, r3
 8003840:	d103      	bne.n	800384a <xTaskIncrementTick+0xfe>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2200      	movs	r2, #0
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	2201      	movs	r2, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <xTaskIncrementTick+0x1f8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	4a36      	ldr	r2, [pc, #216]	; (8003944 <xTaskIncrementTick+0x1f8>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <xTaskIncrementTick+0x1fc>)
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	3204      	adds	r2, #4
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a26      	ldr	r2, [pc, #152]	; (8003948 <xTaskIncrementTick+0x1fc>)
 80038b0:	441a      	add	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	615a      	str	r2, [r3, #20]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4923      	ldr	r1, [pc, #140]	; (8003948 <xTaskIncrementTick+0x1fc>)
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	1c59      	adds	r1, r3, #1
 80038ca:	481f      	ldr	r0, [pc, #124]	; (8003948 <xTaskIncrementTick+0x1fc>)
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4403      	add	r3, r0
 80038d6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <xTaskIncrementTick+0x200>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f4ff af5d 	bcc.w	80037a2 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ec:	e759      	b.n	80037a2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ee:	4b17      	ldr	r3, [pc, #92]	; (800394c <xTaskIncrementTick+0x200>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4914      	ldr	r1, [pc, #80]	; (8003948 <xTaskIncrementTick+0x1fc>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d901      	bls.n	800390a <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <xTaskIncrementTick+0x204>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e004      	b.n	8003922 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <xTaskIncrementTick+0x208>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <xTaskIncrementTick+0x208>)
 8003920:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003922:	69fb      	ldr	r3, [r7, #28]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200003a4 	.word	0x200003a4
 8003930:	20000380 	.word	0x20000380
 8003934:	20000334 	.word	0x20000334
 8003938:	20000338 	.word	0x20000338
 800393c:	20000394 	.word	0x20000394
 8003940:	2000039c 	.word	0x2000039c
 8003944:	20000384 	.word	0x20000384
 8003948:	200002a8 	.word	0x200002a8
 800394c:	200002a4 	.word	0x200002a4
 8003950:	20000390 	.word	0x20000390
 8003954:	2000038c 	.word	0x2000038c

08003958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <vTaskSwitchContext+0x78>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <vTaskSwitchContext+0x7c>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800396c:	e02a      	b.n	80039c4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <vTaskSwitchContext+0x7c>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <vTaskSwitchContext+0x80>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f1c3 031f 	rsb	r3, r3, #31
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <vTaskSwitchContext+0x84>)
 8003996:	4413      	add	r3, r2
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3308      	adds	r3, #8
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d104      	bne.n	80039ba <vTaskSwitchContext+0x62>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <vTaskSwitchContext+0x88>)
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	200003a4 	.word	0x200003a4
 80039d4:	20000390 	.word	0x20000390
 80039d8:	20000384 	.word	0x20000384
 80039dc:	200002a8 	.word	0x200002a8
 80039e0:	200002a4 	.word	0x200002a4

080039e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <vTaskPlaceOnEventList+0x28>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3318      	adds	r3, #24
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe ff58 	bl	80028ac <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039fc:	2101      	movs	r1, #1
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f000 fada 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200002a4 	.word	0x200002a4

08003a10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
    configASSERT( uxSchedulerSuspended != 0 );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a26:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	61da      	str	r2, [r3, #28]
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	621a      	str	r2, [r3, #32]
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	3218      	adds	r2, #24
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f103 0218 	add.w	r2, r3, #24
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 faa3 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
}
 8003a72:	bf00      	nop
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200002a4 	.word	0x200002a4

08003a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	6a12      	ldr	r2, [r2, #32]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	69d2      	ldr	r2, [r2, #28]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d103      	bne.n	8003abe <xTaskRemoveFromEventList+0x3e>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <xTaskRemoveFromEventList+0x178>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d15e      	bne.n	8003b94 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	68d2      	ldr	r2, [r2, #12]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	3304      	adds	r3, #4
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d103      	bne.n	8003b04 <xTaskRemoveFromEventList+0x84>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2200      	movs	r2, #0
 8003b08:	615a      	str	r2, [r3, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1e5a      	subs	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	2201      	movs	r2, #1
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <xTaskRemoveFromEventList+0x17c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <xTaskRemoveFromEventList+0x17c>)
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	4935      	ldr	r1, [pc, #212]	; (8003c00 <xTaskRemoveFromEventList+0x180>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3304      	adds	r3, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	3204      	adds	r2, #4
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <xTaskRemoveFromEventList+0x180>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	615a      	str	r2, [r3, #20]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4922      	ldr	r1, [pc, #136]	; (8003c00 <xTaskRemoveFromEventList+0x180>)
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	481e      	ldr	r0, [pc, #120]	; (8003c00 <xTaskRemoveFromEventList+0x180>)
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4403      	add	r3, r0
 8003b90:	6019      	str	r1, [r3, #0]
 8003b92:	e01b      	b.n	8003bcc <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <xTaskRemoveFromEventList+0x184>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	61da      	str	r2, [r3, #28]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	3218      	adds	r2, #24
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f103 0218 	add.w	r2, r3, #24
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <xTaskRemoveFromEventList+0x184>)
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <xTaskRemoveFromEventList+0x184>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <xTaskRemoveFromEventList+0x184>)
 8003bca:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <xTaskRemoveFromEventList+0x188>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d905      	bls.n	8003be6 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <xTaskRemoveFromEventList+0x18c>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e001      	b.n	8003bea <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003bea:	69fb      	ldr	r3, [r7, #28]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3724      	adds	r7, #36	; 0x24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	200003a4 	.word	0x200003a4
 8003bfc:	20000384 	.word	0x20000384
 8003c00:	200002a8 	.word	0x200002a8
 8003c04:	2000033c 	.word	0x2000033c
 8003c08:	200002a4 	.word	0x200002a4
 8003c0c:	20000390 	.word	0x20000390

08003c10 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6892      	ldr	r2, [r2, #8]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6852      	ldr	r2, [r2, #4]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d103      	bne.n	8003c56 <vTaskRemoveFromUnorderedEventList+0x46>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	68d2      	ldr	r2, [r2, #12]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3304      	adds	r3, #4
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d103      	bne.n	8003c94 <vTaskRemoveFromUnorderedEventList+0x84>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	615a      	str	r2, [r3, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <vTaskRemoveFromUnorderedEventList+0x130>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <vTaskRemoveFromUnorderedEventList+0x130>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cba:	4922      	ldr	r1, [pc, #136]	; (8003d44 <vTaskRemoveFromUnorderedEventList+0x134>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	3204      	adds	r2, #4
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <vTaskRemoveFromUnorderedEventList+0x134>)
 8003cfa:	441a      	add	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	490f      	ldr	r1, [pc, #60]	; (8003d44 <vTaskRemoveFromUnorderedEventList+0x134>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	480b      	ldr	r0, [pc, #44]	; (8003d44 <vTaskRemoveFromUnorderedEventList+0x134>)
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4403      	add	r3, r0
 8003d20:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <vTaskRemoveFromUnorderedEventList+0x138>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d902      	bls.n	8003d36 <vTaskRemoveFromUnorderedEventList+0x126>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <vTaskRemoveFromUnorderedEventList+0x13c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    }
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000384 	.word	0x20000384
 8003d44:	200002a8 	.word	0x200002a8
 8003d48:	200002a4 	.word	0x200002a4
 8003d4c:	20000390 	.word	0x20000390

08003d50 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <vTaskInternalSetTimeOutState+0x24>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <vTaskInternalSetTimeOutState+0x28>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000394 	.word	0x20000394
 8003d78:	20000380 	.word	0x20000380

08003d7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8003d86:	f000 fa29 	bl	80041dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d8a:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <xTaskCheckForTimeOut+0x8c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d102      	bne.n	8003daa <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e026      	b.n	8003df8 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <xTaskCheckForTimeOut+0x90>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d00a      	beq.n	8003dcc <xTaskCheckForTimeOut+0x50>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d305      	bcc.n	8003dcc <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e015      	b.n	8003df8 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d20b      	bcs.n	8003dee <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ffb4 	bl	8003d50 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e004      	b.n	8003df8 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003df8:	f000 fa0a 	bl	8004210 <vPortExitCritical>

    return xReturn;
 8003dfc:	697b      	ldr	r3, [r7, #20]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000380 	.word	0x20000380
 8003e0c:	20000394 	.word	0x20000394

08003e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <vTaskMissedYield+0x14>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000390 	.word	0x20000390

08003e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e30:	f000 f852 	bl	8003ed8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <prvIdleTask+0x28>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d9f9      	bls.n	8003e30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <prvIdleTask+0x2c>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e4c:	e7f0      	b.n	8003e30 <prvIdleTask+0x8>
 8003e4e:	bf00      	nop
 8003e50:	200002a8 	.word	0x200002a8
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	e00c      	b.n	8003e7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <prvInitialiseTaskLists+0x60>)
 8003e70:	4413      	add	r3, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fccc 	bl	8002810 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d9ef      	bls.n	8003e64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <prvInitialiseTaskLists+0x64>)
 8003e86:	f7fe fcc3 	bl	8002810 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e8a:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <prvInitialiseTaskLists+0x68>)
 8003e8c:	f7fe fcc0 	bl	8002810 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <prvInitialiseTaskLists+0x6c>)
 8003e92:	f7fe fcbd 	bl	8002810 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003e96:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <prvInitialiseTaskLists+0x70>)
 8003e98:	f7fe fcba 	bl	8002810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003e9c:	480b      	ldr	r0, [pc, #44]	; (8003ecc <prvInitialiseTaskLists+0x74>)
 8003e9e:	f7fe fcb7 	bl	8002810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <prvInitialiseTaskLists+0x78>)
 8003ea4:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <prvInitialiseTaskLists+0x64>)
 8003ea6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <prvInitialiseTaskLists+0x7c>)
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <prvInitialiseTaskLists+0x68>)
 8003eac:	601a      	str	r2, [r3, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200002a8 	.word	0x200002a8
 8003ebc:	2000030c 	.word	0x2000030c
 8003ec0:	20000320 	.word	0x20000320
 8003ec4:	2000033c 	.word	0x2000033c
 8003ec8:	20000350 	.word	0x20000350
 8003ecc:	20000368 	.word	0x20000368
 8003ed0:	20000334 	.word	0x20000334
 8003ed4:	20000338 	.word	0x20000338

08003ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ede:	e019      	b.n	8003f14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ee0:	f000 f97c 	bl	80041dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <prvCheckTasksWaitingTermination+0x50>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fd13 	bl	800291c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <prvCheckTasksWaitingTermination+0x54>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <prvCheckTasksWaitingTermination+0x54>)
 8003efe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <prvCheckTasksWaitingTermination+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <prvCheckTasksWaitingTermination+0x58>)
 8003f08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f0a:	f000 f981 	bl	8004210 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f810 	bl	8003f34 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <prvCheckTasksWaitingTermination+0x58>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e1      	bne.n	8003ee0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000350 	.word	0x20000350
 8003f2c:	2000037c 	.word	0x2000037c
 8003f30:	20000364 	.word	0x20000364

08003f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fa93 	bl	800446c <vPortFree>
                vPortFree( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa90 	bl	800446c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <prvResetNextTaskUnblockTime+0x2c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <prvResetNextTaskUnblockTime+0x30>)
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f6a:	e005      	b.n	8003f78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <prvResetNextTaskUnblockTime+0x2c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <prvResetNextTaskUnblockTime+0x30>)
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	20000334 	.word	0x20000334
 8003f84:	2000039c 	.word	0x2000039c

08003f88 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <uxTaskResetEventItemValue+0x2c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <uxTaskResetEventItemValue+0x2c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <uxTaskResetEventItemValue+0x2c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1c2 0205 	rsb	r2, r2, #5
 8003fa4:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	200002a4 	.word	0x200002a4

08003fb8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fca4 	bl	800291c <uxListRemove>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4013      	ands	r3, r2
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ff0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d124      	bne.n	8004044 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d021      	beq.n	8004044 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	6892      	ldr	r2, [r2, #8]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	3204      	adds	r2, #4
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1d1a      	adds	r2, r3, #4
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004034:	615a      	str	r2, [r3, #20]
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004042:	e026      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	d209      	bcs.n	8004070 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe fc1f 	bl	80028ac <vListInsert>
}
 800406e:	e010      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fc15 	bl	80028ac <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d202      	bcs.n	8004092 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000380 	.word	0x20000380
 80040a0:	200002a4 	.word	0x200002a4
 80040a4:	20000384 	.word	0x20000384
 80040a8:	20000368 	.word	0x20000368
 80040ac:	20000338 	.word	0x20000338
 80040b0:	20000334 	.word	0x20000334
 80040b4:	2000039c 	.word	0x2000039c

080040b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b04      	subs	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b04      	subs	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <pxPortInitialiseStack+0x54>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b14      	subs	r3, #20
 80040f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b20      	subs	r3, #32
 80040fe:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004100:	68fb      	ldr	r3, [r7, #12]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	08004111 	.word	0x08004111

08004110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004116:	2300      	movs	r3, #0
 8004118:	603b      	str	r3, [r7, #0]
        __asm volatile
 800411a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	607b      	str	r3, [r7, #4]
    }
 800412c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800412e:	bf00      	nop
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0fc      	beq.n	8004130 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
	...

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	200002a4 	.word	0x200002a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004178:	4806      	ldr	r0, [pc, #24]	; (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
 8004192:	0000      	.short	0x0000
 8004194:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop

0800419c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <xPortStartScheduler+0x38>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <xPortStartScheduler+0x38>)
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <xPortStartScheduler+0x38>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <xPortStartScheduler+0x38>)
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041b8:	f000 f890 	bl	80042dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <xPortStartScheduler+0x3c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041c2:	f7ff ffd9 	bl	8004178 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041c6:	f7ff fbc7 	bl	8003958 <vTaskSwitchContext>
    prvTaskExitError();
 80041ca:	f7ff ffa1 	bl	8004110 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	e000ed20 	.word	0xe000ed20
 80041d8:	20000004 	.word	0x20000004

080041dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
        __asm volatile
 80041e2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	607b      	str	r3, [r7, #4]
    }
 80041f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <vPortEnterCritical+0x30>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a03      	ldr	r2, [pc, #12]	; (800420c <vPortEnterCritical+0x30>)
 80041fe:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000004 	.word	0x20000004

08004210 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <vPortExitCritical+0x30>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	4a08      	ldr	r2, [pc, #32]	; (8004240 <vPortExitCritical+0x30>)
 800421e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <vPortExitCritical+0x30>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <vPortExitCritical+0x24>
 8004228:	2300      	movs	r3, #0
 800422a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004232:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000004 	.word	0x20000004
	...

08004250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004250:	f3ef 8009 	mrs	r0, PSP
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <pxCurrentTCBConst>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004260:	6010      	str	r0, [r2, #0]
 8004262:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004266:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800426a:	f380 8811 	msr	BASEPRI, r0
 800426e:	f7ff fb73 	bl	8003958 <vTaskSwitchContext>
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	6808      	ldr	r0, [r1, #0]
 8004282:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004286:	f380 8809 	msr	PSP, r0
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	4770      	bx	lr

08004290 <pxCurrentTCBConst>:
 8004290:	200002a4 	.word	0x200002a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
        __asm volatile
 800429e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	607b      	str	r3, [r7, #4]
    }
 80042b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042b2:	f7ff fa4b 	bl	800374c <xTaskIncrementTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <SysTick_Handler+0x40>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	2300      	movs	r3, #0
 80042c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f383 8811 	msr	BASEPRI, r3
    }
 80042ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <vPortSetupTimerInterrupt+0x28>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <vPortSetupTimerInterrupt+0x2c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <vPortSetupTimerInterrupt+0x30>)
 80042ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80042f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <vPortSetupTimerInterrupt+0x28>)
 80042f6:	2207      	movs	r2, #7
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000e010 	.word	0xe000e010
 8004308:	e000e018 	.word	0xe000e018
 800430c:	e000e014 	.word	0xe000e014

08004310 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800431c:	f7ff f91c 	bl	8003558 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <pvPortMalloc+0x144>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004328:	f000 f8e0 	bl	80044ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800432c:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <pvPortMalloc+0x148>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 8086 	bne.w	8004446 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01e      	beq.n	800437e <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004340:	2208      	movs	r2, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d218      	bcs.n	800437e <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800434c:	2208      	movs	r2, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	2b00      	cmp	r3, #0
 800435c:	d011      	beq.n	8004382 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f023 0307 	bic.w	r3, r3, #7
 8004364:	3308      	adds	r3, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d205      	bcs.n	8004378 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	3308      	adds	r3, #8
 8004374:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004376:	e004      	b.n	8004382 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800437c:	e001      	b.n	8004382 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05e      	beq.n	8004446 <pvPortMalloc+0x136>
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <pvPortMalloc+0x14c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d859      	bhi.n	8004446 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004392:	4b33      	ldr	r3, [pc, #204]	; (8004460 <pvPortMalloc+0x150>)
 8004394:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <pvPortMalloc+0x150>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800439c:	e004      	b.n	80043a8 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d903      	bls.n	80043ba <pvPortMalloc+0xaa>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f1      	bne.n	800439e <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043ba:	4b26      	ldr	r3, [pc, #152]	; (8004454 <pvPortMalloc+0x144>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d040      	beq.n	8004446 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	4413      	add	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad2      	subs	r2, r2, r3
 80043de:	2308      	movs	r3, #8
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d90f      	bls.n	8004406 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004400:	68b8      	ldr	r0, [r7, #8]
 8004402:	f000 f8d5 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <pvPortMalloc+0x14c>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	4a12      	ldr	r2, [pc, #72]	; (800445c <pvPortMalloc+0x14c>)
 8004412:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <pvPortMalloc+0x14c>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <pvPortMalloc+0x154>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d203      	bcs.n	8004428 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <pvPortMalloc+0x14c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <pvPortMalloc+0x154>)
 8004426:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <pvPortMalloc+0x148>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	431a      	orrs	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <pvPortMalloc+0x158>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <pvPortMalloc+0x158>)
 8004444:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004446:	f7ff f895 	bl	8003574 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200047b0 	.word	0x200047b0
 8004458:	200047c4 	.word	0x200047c4
 800445c:	200047b4 	.word	0x200047b4
 8004460:	200047a8 	.word	0x200047a8
 8004464:	200047b8 	.word	0x200047b8
 8004468:	200047bc 	.word	0x200047bc

0800446c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02c      	beq.n	80044d8 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800447e:	2308      	movs	r3, #8
 8004480:	425b      	negs	r3, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <vPortFree+0x74>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01e      	beq.n	80044d8 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11a      	bne.n	80044d8 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <vPortFree+0x74>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	401a      	ands	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80044b2:	f7ff f851 	bl	8003558 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <vPortFree+0x78>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <vPortFree+0x78>)
 80044c2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f000 f873 	bl	80045b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <vPortFree+0x7c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <vPortFree+0x7c>)
 80044d2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044d4:	f7ff f84e 	bl	8003574 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200047c4 	.word	0x200047c4
 80044e4:	200047b4 	.word	0x200047b4
 80044e8:	200047c0 	.word	0x200047c0

080044ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044f2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <prvHeapInit+0xac>)
 80044fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0307 	bic.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <prvHeapInit+0xac>)
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <prvHeapInit+0xb0>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <prvHeapInit+0xb0>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004538:	2208      	movs	r2, #8
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <prvHeapInit+0xb4>)
 800454c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <prvHeapInit+0xb4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvHeapInit+0xb4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvHeapInit+0xb4>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <prvHeapInit+0xb8>)
 800457a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <prvHeapInit+0xbc>)
 8004582:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <prvHeapInit+0xc0>)
 8004586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	200003a8 	.word	0x200003a8
 800459c:	200047a8 	.word	0x200047a8
 80045a0:	200047b0 	.word	0x200047b0
 80045a4:	200047b8 	.word	0x200047b8
 80045a8:	200047b4 	.word	0x200047b4
 80045ac:	200047c4 	.word	0x200047c4

080045b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <prvInsertBlockIntoFreeList+0xa8>)
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e002      	b.n	80045c4 <prvInsertBlockIntoFreeList+0x14>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f7      	bhi.n	80045be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d108      	bne.n	80045f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d118      	bne.n	8004638 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d00d      	beq.n	800462e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e008      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e003      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	200047a8 	.word	0x200047a8
 800465c:	200047b0 	.word	0x200047b0

08004660 <Buzz>:

char temp = 50;


static void Buzz(uint32_t freq, uint32_t duration)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	PWM_Freq(freq);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd f970 	bl	8001950 <PWM_Freq>
	PWM_Start();
 8004670:	f7fd f98e 	bl	8001990 <PWM_Start>

	Ticker_ms(duration);
 8004674:	6838      	ldr	r0, [r7, #0]
 8004676:	f7fd fd3a 	bl	80020ee <Ticker_ms>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <frequency>:

static int frequency(char note)
{
 8004684:	b4b0      	push	{r4, r5, r7}
 8004686:	b08f      	sub	sp, #60	; 0x3c
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]

  int i;
  const int numNotes = 8;  // number of notes we're storing
 800468e:	2308      	movs	r3, #8
 8004690:	633b      	str	r3, [r7, #48]	; 0x30

  char names[] = { 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C' };
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <frequency+0x70>)
 8004694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800469c:	e883 0003 	stmia.w	r3, {r0, r1}
  int frequencies[] = {262, 294, 330, 349, 392, 440, 494, 523};
 80046a0:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <frequency+0x74>)
 80046a2:	f107 0408 	add.w	r4, r7, #8
 80046a6:	461d      	mov	r5, r3
 80046a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80046b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


  for (i = 0; i < numNotes; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	e011      	b.n	80046de <frequency+0x5a>
  {
    if (names[i] == note)
 80046ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	79fa      	ldrb	r2, [r7, #7]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d106      	bne.n	80046d8 <frequency+0x54>
    {
      return(frequencies[i]);
 80046ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	3338      	adds	r3, #56	; 0x38
 80046d0:	443b      	add	r3, r7
 80046d2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80046d6:	e007      	b.n	80046e8 <frequency+0x64>
  for (i = 0; i < numNotes; i++)
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	3301      	adds	r3, #1
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
 80046de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbe9      	blt.n	80046ba <frequency+0x36>
    }
  }
  return(0);
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	373c      	adds	r7, #60	; 0x3c
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bcb0      	pop	{r4, r5, r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	08009c78 	.word	0x08009c78
 80046f8:	08009c80 	.word	0x08009c80

080046fc <playNote>:


void playNote(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
	int i;
	int duration;
	for(i = 0 ; i < 18; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e033      	b.n	8004770 <playNote+0x74>
	{
		duration = beats[i] * temp;
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <playNote+0x90>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	4b1f      	ldr	r3, [pc, #124]	; (8004790 <playNote+0x94>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	603b      	str	r3, [r7, #0]
		if(notes[i] == ' ')
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <playNote+0x98>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b20      	cmp	r3, #32
 8004726:	d104      	bne.n	8004732 <playNote+0x36>
		{
			Ticker_ms(duration);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fd fcdf 	bl	80020ee <Ticker_ms>
 8004730:	e011      	b.n	8004756 <playNote+0x5a>
		}

		else {
			Buzz(frequency(notes[i]) , duration );
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <playNote+0x98>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ffa2 	bl	8004684 <frequency>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7ff ff89 	bl	8004660 <Buzz>
			Ticker_ms(duration );
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fd fccc 	bl	80020ee <Ticker_ms>
		}
		Ticker_ms(temp / 10);
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <playNote+0x94>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <playNote+0x9c>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	08db      	lsrs	r3, r3, #3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	f7fd fcc2 	bl	80020ee <Ticker_ms>
	for(i = 0 ; i < 18; i++)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3301      	adds	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b11      	cmp	r3, #17
 8004774:	ddc8      	ble.n	8004708 <playNote+0xc>
	}
	PWM_Duty(60000);
 8004776:	f64e 2060 	movw	r0, #60000	; 0xea60
 800477a:	f7fd f8db 	bl	8001934 <PWM_Duty>
	PWM_Stop();
 800477e:	f7fd f915 	bl	80019ac <PWM_Stop>

}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	2000001c 	.word	0x2000001c
 8004790:	2000002e 	.word	0x2000002e
 8004794:	20000008 	.word	0x20000008
 8004798:	cccccccd 	.word	0xcccccccd

0800479c <drawPixel>:
#include "stdint.h"
#include "stdlib.h"


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
 80047a6:	460b      	mov	r3, r1
 80047a8:	80bb      	strh	r3, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	88b9      	ldrh	r1, [r7, #4]
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd81 	bl	80052bc <ST7735_DrawPixel>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80047c2:	b590      	push	{r4, r7, lr}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	461a      	mov	r2, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	80fb      	strh	r3, [r7, #6]
 80047d4:	4603      	mov	r3, r0
 80047d6:	80bb      	strh	r3, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80047e0:	88f8      	ldrh	r0, [r7, #6]
 80047e2:	88b9      	ldrh	r1, [r7, #4]
 80047e4:	887a      	ldrh	r2, [r7, #2]
 80047e6:	883c      	ldrh	r4, [r7, #0]
 80047e8:	8b3b      	ldrh	r3, [r7, #24]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4623      	mov	r3, r4
 80047ee:	f000 fe5b 	bl	80054a8 <ST7735_FillRectangle>
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd90      	pop	{r4, r7, pc}

080047fa <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	80fb      	strh	r3, [r7, #6]
 8004804:	460b      	mov	r3, r1
 8004806:	80bb      	strh	r3, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800480c:	887a      	ldrh	r2, [r7, #2]
 800480e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ffc0 	bl	800479c <drawPixel>
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	461a      	mov	r2, r3
 8004832:	4623      	mov	r3, r4
 8004834:	80fb      	strh	r3, [r7, #6]
 8004836:	4603      	mov	r3, r0
 8004838:	80bb      	strh	r3, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	807b      	strh	r3, [r7, #2]
 800483e:	4613      	mov	r3, r2
 8004840:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8004842:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004850:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004854:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800485c:	1acb      	subs	r3, r1, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	425b      	neglt	r3, r3
 8004864:	429a      	cmp	r2, r3
 8004866:	bfcc      	ite	gt
 8004868:	2301      	movgt	r3, #1
 800486a:	2300      	movle	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8004870:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	833b      	strh	r3, [r7, #24]
 800487c:	88bb      	ldrh	r3, [r7, #4]
 800487e:	80fb      	strh	r3, [r7, #6]
 8004880:	8b3b      	ldrh	r3, [r7, #24]
 8004882:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	82fb      	strh	r3, [r7, #22]
 8004888:	883b      	ldrh	r3, [r7, #0]
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	8afb      	ldrh	r3, [r7, #22]
 800488e:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8004890:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004894:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004898:	429a      	cmp	r2, r3
 800489a:	dd0b      	ble.n	80048b4 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	82bb      	strh	r3, [r7, #20]
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	80fb      	strh	r3, [r7, #6]
 80048a4:	8abb      	ldrh	r3, [r7, #20]
 80048a6:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80048a8:	88bb      	ldrh	r3, [r7, #4]
 80048aa:	827b      	strh	r3, [r7, #18]
 80048ac:	883b      	ldrh	r3, [r7, #0]
 80048ae:	80bb      	strh	r3, [r7, #4]
 80048b0:	8a7b      	ldrh	r3, [r7, #18]
 80048b2:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80048b4:	887a      	ldrh	r2, [r7, #2]
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80048be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80048c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bfb8      	it	lt
 80048cc:	425b      	neglt	r3, r3
 80048ce:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80048d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048d4:	0fda      	lsrs	r2, r3, #31
 80048d6:	4413      	add	r3, r2
 80048d8:	105b      	asrs	r3, r3, #1
 80048da:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80048dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80048e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	da02      	bge.n	80048ee <writeLine+0xca>
        ystep = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	83bb      	strh	r3, [r7, #28]
 80048ec:	e031      	b.n	8004952 <writeLine+0x12e>
    } else {
        ystep = -1;
 80048ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048f2:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80048f4:	e02d      	b.n	8004952 <writeLine+0x12e>
        if (steep) {
 80048f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <writeLine+0xec>
            writePixel(y0, x0, color);
 80048fe:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004900:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004904:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff76 	bl	80047fa <writePixel>
 800490e:	e007      	b.n	8004920 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8004910:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004912:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff6d 	bl	80047fa <writePixel>
        }
        err -= dy;
 8004920:	8bfa      	ldrh	r2, [r7, #30]
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800492a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800492e:	2b00      	cmp	r3, #0
 8004930:	da09      	bge.n	8004946 <writeLine+0x122>
            y0 += ystep;
 8004932:	88ba      	ldrh	r2, [r7, #4]
 8004934:	8bbb      	ldrh	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800493c:	8bfa      	ldrh	r2, [r7, #30]
 800493e:	8a3b      	ldrh	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	b29b      	uxth	r3, r3
 800494c:	3301      	adds	r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	80fb      	strh	r3, [r7, #6]
 8004952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800495a:	429a      	cmp	r2, r3
 800495c:	ddcb      	ble.n	80048f6 <writeLine+0xd2>
        }
    }
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	3724      	adds	r7, #36	; 0x24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd90      	pop	{r4, r7, pc}

08004968 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af02      	add	r7, sp, #8
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	4611      	mov	r1, r2
 8004974:	461a      	mov	r2, r3
 8004976:	4623      	mov	r3, r4
 8004978:	80fb      	strh	r3, [r7, #6]
 800497a:	4603      	mov	r3, r0
 800497c:	80bb      	strh	r3, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]
 8004982:	4613      	mov	r3, r2
 8004984:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8004986:	88ba      	ldrh	r2, [r7, #4]
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	4413      	add	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	b21c      	sxth	r4, r3
 8004994:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004998:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800499c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80049a0:	883b      	ldrh	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7ff ff3d 	bl	8004824 <writeLine>
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}

080049b2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80049b2:	b590      	push	{r4, r7, lr}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	80fb      	strh	r3, [r7, #6]
 80049c4:	4603      	mov	r3, r0
 80049c6:	80bb      	strh	r3, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	4413      	add	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	b21a      	sxth	r2, r3
 80049de:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80049e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80049e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80049ea:	883b      	ldrh	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4623      	mov	r3, r4
 80049f0:	f7ff ff18 	bl	8004824 <writeLine>
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}

080049fc <fillCircleHelper>:
        }
    }
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	80fb      	strh	r3, [r7, #6]
 8004a0e:	4603      	mov	r3, r0
 8004a10:	80bb      	strh	r3, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	807b      	strh	r3, [r7, #2]
 8004a16:	4613      	mov	r3, r2
 8004a18:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	f1c3 0301 	rsb	r3, r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	03d2      	lsls	r2, r2, #15
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8004a3e:	8a3b      	ldrh	r3, [r7, #16]
 8004a40:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8004a42:	89fb      	ldrh	r3, [r7, #14]
 8004a44:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8004a46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8004a52:	e095      	b.n	8004b80 <fillCircleHelper+0x184>
        if (f >= 0) {
 8004a54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db0e      	blt.n	8004a7a <fillCircleHelper+0x7e>
            y--;
 8004a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8004a70:	8afa      	ldrh	r2, [r7, #22]
 8004a72:	8a7b      	ldrh	r3, [r7, #18]
 8004a74:	4413      	add	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004a7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004a86:	8abb      	ldrh	r3, [r7, #20]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8004a8e:	8afa      	ldrh	r2, [r7, #22]
 8004a90:	8abb      	ldrh	r3, [r7, #20]
 8004a92:	4413      	add	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8004a98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	db31      	blt.n	8004b08 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d013      	beq.n	8004ad6 <fillCircleHelper+0xda>
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	8a3b      	ldrh	r3, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	b218      	sxth	r0, r3
 8004ab8:	88ba      	ldrh	r2, [r7, #4]
 8004aba:	89fb      	ldrh	r3, [r7, #14]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	b219      	sxth	r1, r3
 8004ac2:	89fb      	ldrh	r3, [r7, #14]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004aca:	4413      	add	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b21a      	sxth	r2, r3
 8004ad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad2:	f7ff ff49 	bl	8004968 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004ad6:	787b      	ldrb	r3, [r7, #1]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <fillCircleHelper+0x10c>
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	8a3b      	ldrh	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	b218      	sxth	r0, r3
 8004aea:	88ba      	ldrh	r2, [r7, #4]
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b219      	sxth	r1, r3
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004afc:	4413      	add	r3, r2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	b21a      	sxth	r2, r3
 8004b02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b04:	f7ff ff30 	bl	8004968 <drawFastVLine>
        }
        if(y != py) {
 8004b08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004b0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d033      	beq.n	8004b7c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d013      	beq.n	8004b46 <fillCircleHelper+0x14a>
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	897b      	ldrh	r3, [r7, #10]
 8004b22:	4413      	add	r3, r2
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	b218      	sxth	r0, r3
 8004b28:	88ba      	ldrh	r2, [r7, #4]
 8004b2a:	89bb      	ldrh	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b219      	sxth	r1, r3
 8004b32:	89bb      	ldrh	r3, [r7, #12]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b21a      	sxth	r2, r3
 8004b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b42:	f7ff ff11 	bl	8004968 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8004b46:	787b      	ldrb	r3, [r7, #1]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <fillCircleHelper+0x17c>
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	b218      	sxth	r0, r3
 8004b5a:	88ba      	ldrh	r2, [r7, #4]
 8004b5c:	89bb      	ldrh	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b219      	sxth	r1, r3
 8004b64:	89bb      	ldrh	r3, [r7, #12]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b74:	f7ff fef8 	bl	8004968 <drawFastVLine>
            py = y;
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8004b7c:	8a3b      	ldrh	r3, [r7, #16]
 8004b7e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8004b80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	f6ff af63 	blt.w	8004a54 <fillCircleHelper+0x58>
    }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd90      	pop	{r4, r7, pc}

08004b98 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	80fb      	strh	r3, [r7, #6]
 8004baa:	4603      	mov	r3, r0
 8004bac:	80bb      	strh	r3, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	807b      	strh	r3, [r7, #2]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8004bb6:	88ba      	ldrh	r2, [r7, #4]
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b219      	sxth	r1, r3
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21a      	sxth	r2, r3
 8004bcc:	883b      	ldrh	r3, [r7, #0]
 8004bce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004bd2:	f7ff fec9 	bl	8004968 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8004bd6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bda:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004bde:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004be2:	883b      	ldrh	r3, [r7, #0]
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2303      	movs	r3, #3
 8004bec:	f7ff ff06 	bl	80049fc <fillCircleHelper>
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}

08004bf8 <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	80fb      	strh	r3, [r7, #6]
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	80bb      	strh	r3, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	807b      	strh	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8004c16:	8b3b      	ldrh	r3, [r7, #24]
 8004c18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c24:	f7ff fec5 	bl	80049b2 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8004c28:	88ba      	ldrh	r2, [r7, #4]
 8004c2a:	883b      	ldrh	r3, [r7, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	b219      	sxth	r1, r3
 8004c36:	8b3b      	ldrh	r3, [r7, #24]
 8004c38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c3c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c40:	f7ff feb7 	bl	80049b2 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8004c44:	8b3b      	ldrh	r3, [r7, #24]
 8004c46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004c4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c52:	f7ff fe89 	bl	8004968 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	b218      	sxth	r0, r3
 8004c64:	8b3b      	ldrh	r3, [r7, #24]
 8004c66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004c6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c6e:	f7ff fe7b 	bl	8004968 <drawFastVLine>
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}

08004c7a <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004c7a:	b590      	push	{r4, r7, lr}
 8004c7c:	b08f      	sub	sp, #60	; 0x3c
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4604      	mov	r4, r0
 8004c82:	4608      	mov	r0, r1
 8004c84:	4611      	mov	r1, r2
 8004c86:	461a      	mov	r2, r3
 8004c88:	4623      	mov	r3, r4
 8004c8a:	80fb      	strh	r3, [r7, #6]
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	80bb      	strh	r3, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
 8004c94:	4613      	mov	r3, r2
 8004c96:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8004c98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004c9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	dd0b      	ble.n	8004cbc <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004ca4:	88bb      	ldrh	r3, [r7, #4]
 8004ca6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ca8:	883b      	ldrh	r3, [r7, #0]
 8004caa:	80bb      	strh	r3, [r7, #4]
 8004cac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cae:	803b      	strh	r3, [r7, #0]
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cba:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8004cbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004cc0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	dd0f      	ble.n	8004ce8 <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8004cc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ccc:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cce:	883b      	ldrh	r3, [r7, #0]
 8004cd0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cd6:	803b      	strh	r3, [r7, #0]
 8004cd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cdc:	843b      	strh	r3, [r7, #32]
 8004cde:	887b      	ldrh	r3, [r7, #2]
 8004ce0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ce4:	8c3b      	ldrh	r3, [r7, #32]
 8004ce6:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8004ce8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004cec:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	dd0b      	ble.n	8004d0c <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004cf4:	88bb      	ldrh	r3, [r7, #4]
 8004cf6:	83fb      	strh	r3, [r7, #30]
 8004cf8:	883b      	ldrh	r3, [r7, #0]
 8004cfa:	80bb      	strh	r3, [r7, #4]
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	803b      	strh	r3, [r7, #0]
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	83bb      	strh	r3, [r7, #28]
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	80fb      	strh	r3, [r7, #6]
 8004d08:	8bbb      	ldrh	r3, [r7, #28]
 8004d0a:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8004d0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004d10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d137      	bne.n	8004d88 <fillTriangle+0x10e>
        a = b = x0;
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8004d20:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d24:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	da02      	bge.n	8004d32 <fillTriangle+0xb8>
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d30:	e007      	b.n	8004d42 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8004d32:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	dd01      	ble.n	8004d42 <fillTriangle+0xc8>
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8004d42:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004d46:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	da03      	bge.n	8004d56 <fillTriangle+0xdc>
 8004d4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d54:	e008      	b.n	8004d68 <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8004d56:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004d5a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	dd02      	ble.n	8004d68 <fillTriangle+0xee>
 8004d62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d66:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 8004d68:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	b21a      	sxth	r2, r3
 8004d76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004d7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d7e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004d82:	f7ff fe16 	bl	80049b2 <drawFastHLine>
        return;
 8004d86:	e0d4      	b.n	8004f32 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8004d92:	883a      	ldrh	r2, [r7, #0]
 8004d94:	88bb      	ldrh	r3, [r7, #4]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8004d9c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8004da8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004dac:	88bb      	ldrh	r3, [r7, #4]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8004db4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8004dc0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004dc4:	883b      	ldrh	r3, [r7, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8004dd4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004dd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d102      	bne.n	8004de6 <fillTriangle+0x16c>
 8004de0:	883b      	ldrh	r3, [r7, #0]
 8004de2:	863b      	strh	r3, [r7, #48]	; 0x30
 8004de4:	e003      	b.n	8004dee <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 8004de6:	883b      	ldrh	r3, [r7, #0]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8004dee:	88bb      	ldrh	r3, [r7, #4]
 8004df0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004df2:	e03e      	b.n	8004e72 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8004df4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8004e08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	4413      	add	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8004e1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e22:	4413      	add	r3, r2
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8004e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e2c:	4413      	add	r3, r2
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8004e30:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004e34:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	dd05      	ble.n	8004e48 <fillTriangle+0x1ce>
 8004e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e3e:	81bb      	strh	r3, [r7, #12]
 8004e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e44:	89bb      	ldrh	r3, [r7, #12]
 8004e46:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8004e48:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	b21a      	sxth	r2, r3
 8004e56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004e5a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004e5e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004e62:	f7ff fda6 	bl	80049b2 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8004e66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e72:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004e76:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	ddba      	ble.n	8004df4 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8004e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e82:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004e86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e8a:	1a8a      	subs	r2, r1, r2
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8004e92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e96:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004e9a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e9e:	1a8a      	subs	r2, r1, r2
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8004ea6:	e03e      	b.n	8004f26 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 8004ea8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8004ebc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8004ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed6:	4413      	add	r3, r2
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8004eda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee0:	4413      	add	r3, r2
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8004ee4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004ee8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004eec:	429a      	cmp	r2, r3
 8004eee:	dd05      	ble.n	8004efc <fillTriangle+0x282>
 8004ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ef2:	81fb      	strh	r3, [r7, #14]
 8004ef4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ef6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ef8:	89fb      	ldrh	r3, [r7, #14]
 8004efa:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8004efc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004efe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	b21a      	sxth	r2, r3
 8004f0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f0e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004f12:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004f16:	f7ff fd4c 	bl	80049b2 <drawFastHLine>
    for(; y<=y2; y++) {
 8004f1a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f26:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004f2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	ddba      	ble.n	8004ea8 <fillTriangle+0x22e>
    }
}
 8004f32:	373c      	adds	r7, #60	; 0x3c
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}

08004f38 <Send_cmd>:

// 0 --> No Feedback  1 --> For Feedback
#define Feedback   0x00

void Send_cmd (uint16_t cmd, uint16_t Parameter1, uint16_t Parameter2)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	80fb      	strh	r3, [r7, #6]
 8004f42:	460b      	mov	r3, r1
 8004f44:	80bb      	strh	r3, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	807b      	strh	r3, [r7, #2]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	88bb      	ldrh	r3, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	887b      	ldrh	r3, [r7, #2]
 8004f54:	4413      	add	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f203 1305 	addw	r3, r3, #261	; 0x105
 8004f5c:	83fb      	strh	r3, [r7, #30]
	Checksum = 0-Checksum;
 8004f5e:	8bfb      	ldrh	r3, [r7, #30]
 8004f60:	425b      	negs	r3, r3
 8004f62:	83fb      	strh	r3, [r7, #30]

	uint16_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8004f64:	237e      	movs	r3, #126	; 0x7e
 8004f66:	813b      	strh	r3, [r7, #8]
 8004f68:	23ff      	movs	r3, #255	; 0xff
 8004f6a:	817b      	strh	r3, [r7, #10]
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	81bb      	strh	r3, [r7, #12]
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	81fb      	strh	r3, [r7, #14]
 8004f74:	2300      	movs	r3, #0
 8004f76:	823b      	strh	r3, [r7, #16]
 8004f78:	88bb      	ldrh	r3, [r7, #4]
 8004f7a:	827b      	strh	r3, [r7, #18]
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	82bb      	strh	r3, [r7, #20]
 8004f80:	8bfb      	ldrh	r3, [r7, #30]
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	82fb      	strh	r3, [r7, #22]
 8004f88:	8bfb      	ldrh	r3, [r7, #30]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	833b      	strh	r3, [r7, #24]
 8004f90:	23ef      	movs	r3, #239	; 0xef
 8004f92:	837b      	strh	r3, [r7, #26]
	MCAL_USART_Send_Data(DF_UART, CmdSequence, enable, 10);
 8004f94:	f107 0108 	add.w	r1, r7, #8
 8004f98:	230a      	movs	r3, #10
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4803      	ldr	r0, [pc, #12]	; (8004fac <Send_cmd+0x74>)
 8004f9e:	f7fd f95f 	bl	8002260 <MCAL_USART_Send_Data>
}
 8004fa2:	bf00      	nop
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40013800 	.word	0x40013800

08004fb0 <HAL_DF_Init>:


uint8_t HAL_DF_Init (uint8_t volume)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
	uint16_t rec[10];
	Send_cmd(0x3F, 0x00, Source);
 8004fba:	2202      	movs	r2, #2
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	203f      	movs	r0, #63	; 0x3f
 8004fc0:	f7ff ffba 	bl	8004f38 <Send_cmd>
	Send_cmd(0x06, 0x00, volume);
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2100      	movs	r1, #0
 8004fcc:	2006      	movs	r0, #6
 8004fce:	f7ff ffb3 	bl	8004f38 <Send_cmd>


	MCAL_USART_Get_Data(DF_UART, rec,enable, 3);
 8004fd2:	f107 010c 	add.w	r1, r7, #12
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4806      	ldr	r0, [pc, #24]	; (8004ff4 <HAL_DF_Init+0x44>)
 8004fdc:	f7fd f988 	bl	80022f0 <MCAL_USART_Get_Data>
	if(rec[1] == 254)
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	2bfe      	cmp	r3, #254	; 0xfe
 8004fe4:	d101      	bne.n	8004fea <HAL_DF_Init+0x3a>
	{
		return TF_OFFLINE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_DF_Init+0x3c>
	}
	return TF_ONLINE;
 8004fea:	2301      	movs	r3, #1
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40013800 	.word	0x40013800

08004ff8 <HAL_DF_Wait_Push>:

void HAL_DF_Wait_Push (void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
	uint16_t rec[10] = {0,0,0,0,0,0,0,0,0,0};
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
	while(rec[2] == 0)
 800500c:	e005      	b.n	800501a <HAL_DF_Wait_Push+0x22>
	{
		MCAL_USART_Get_Data(DF_UART, rec,enable, 3);
 800500e:	1d39      	adds	r1, r7, #4
 8005010:	2303      	movs	r3, #3
 8005012:	2200      	movs	r2, #0
 8005014:	4805      	ldr	r0, [pc, #20]	; (800502c <HAL_DF_Wait_Push+0x34>)
 8005016:	f7fd f96b 	bl	80022f0 <MCAL_USART_Get_Data>
	while(rec[2] == 0)
 800501a:	893b      	ldrh	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f6      	beq.n	800500e <HAL_DF_Wait_Push+0x16>
	}

}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40013800 	.word	0x40013800

08005030 <HAL_DF_Next>:


void HAL_DF_Next (void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
	Send_cmd(0x01, 0x00, 0x00);
 8005034:	2200      	movs	r2, #0
 8005036:	2100      	movs	r1, #0
 8005038:	2001      	movs	r0, #1
 800503a:	f7ff ff7d 	bl	8004f38 <Send_cmd>
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_DF_Pause>:

void HAL_DF_Pause (void)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	200e      	movs	r0, #14
 800504c:	f7ff ff74 	bl	8004f38 <Send_cmd>
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_DF_Previous>:

void HAL_DF_Previous (void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	Send_cmd(0x02, 0, 0);
 8005058:	2200      	movs	r2, #0
 800505a:	2100      	movs	r1, #0
 800505c:	2002      	movs	r0, #2
 800505e:	f7ff ff6b 	bl	8004f38 <Send_cmd>
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_DF_Playback>:

void HAL_DF_Playback (void)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800506a:	2200      	movs	r2, #0
 800506c:	2100      	movs	r1, #0
 800506e:	200d      	movs	r0, #13
 8005070:	f7ff ff62 	bl	8004f38 <Send_cmd>
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_DF_SpecifyVolume>:

void HAL_DF_SpecifyVolume(uint8_t volume)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x06, 0x00, volume);
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	b29b      	uxth	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	2100      	movs	r1, #0
 800508a:	2006      	movs	r0, #6
 800508c:	f7ff ff54 	bl	8004f38 <Send_cmd>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_DF_SpecifyTrack>:

void HAL_DF_SpecifyTrack(uint8_t track)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
	track ++;
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	3301      	adds	r3, #1
 80050a6:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x03, 0x00, track);
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	2003      	movs	r0, #3
 80050b2:	f7ff ff41 	bl	8004f38 <Send_cmd>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <getTrackName>:
		"Rapp Snitch", "Atlas", "Faded", "Nosebleed", "After image", "Dream Head", "Imagine", "Focus" };

const int duration[MAX_TRACK_NUM] = { 255, 236, 173, 188, 199, 234, 240, 199, 245, 235};


const char* getTrackName(uint8_t trackNumber) {
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
	return trackNames[trackNumber];
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	4a03      	ldr	r2, [pc, #12]	; (80050dc <getTrackName+0x1c>)
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	20000030 	.word	0x20000030

080050e0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80050e4:	2200      	movs	r2, #0
 80050e6:	2108      	movs	r1, #8
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <ST7735_Select+0x14>)
 80050ea:	f7fc fb97 	bl	800181c <MCAL_GPIO_WritePin>
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40010800 	.word	0x40010800

080050f8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80050fc:	2201      	movs	r2, #1
 80050fe:	2108      	movs	r1, #8
 8005100:	4802      	ldr	r0, [pc, #8]	; (800510c <ST7735_Unselect+0x14>)
 8005102:	f7fc fb8b 	bl	800181c <MCAL_GPIO_WritePin>
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40010800 	.word	0x40010800

08005110 <ST7735_Reset>:

static void ST7735_Reset() {
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8005114:	2200      	movs	r2, #0
 8005116:	2104      	movs	r1, #4
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <ST7735_Reset+0x1c>)
 800511a:	f7fc fb7f 	bl	800181c <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800511e:	2201      	movs	r2, #1
 8005120:	2104      	movs	r1, #4
 8005122:	4802      	ldr	r0, [pc, #8]	; (800512c <ST7735_Reset+0x1c>)
 8005124:	f7fc fb7a 	bl	800181c <MCAL_GPIO_WritePin>
}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40010800 	.word	0x40010800

08005130 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800513a:	2200      	movs	r2, #0
 800513c:	2110      	movs	r1, #16
 800513e:	4806      	ldr	r0, [pc, #24]	; (8005158 <ST7735_WriteCommand+0x28>)
 8005140:	f7fc fb6c 	bl	800181c <MCAL_GPIO_WritePin>
    MCAL_SPI_TX(ST7735_SPI_PORT, &cmd, sizeof(cmd));
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	4804      	ldr	r0, [pc, #16]	; (800515c <ST7735_WriteCommand+0x2c>)
 800514c:	f7fc fea2 	bl	8001e94 <MCAL_SPI_TX>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40010800 	.word	0x40010800
 800515c:	40013000 	.word	0x40013000

08005160 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800516a:	2201      	movs	r2, #1
 800516c:	2110      	movs	r1, #16
 800516e:	4807      	ldr	r0, [pc, #28]	; (800518c <ST7735_WriteData+0x2c>)
 8005170:	f7fc fb54 	bl	800181c <MCAL_GPIO_WritePin>
    MCAL_SPI_TX(ST7735_SPI_PORT, buff, buff_size);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4804      	ldr	r0, [pc, #16]	; (8005190 <ST7735_WriteData+0x30>)
 800517e:	f7fc fe89 	bl	8001e94 <MCAL_SPI_TX>
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40010800 	.word	0x40010800
 8005190:	40013000 	.word	0x40013000

08005194 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80051a6:	e030      	b.n	800520a <ST7735_ExecuteCommandList+0x76>
        uint8_t cmd = *addr++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	73bb      	strb	r3, [r7, #14]
        ST7735_WriteCommand(cmd);
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ffbb 	bl	8005130 <ST7735_WriteCommand>

        numArgs = *addr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	737b      	strb	r3, [r7, #13]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80051c4:	7b7b      	ldrb	r3, [r7, #13]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	817b      	strh	r3, [r7, #10]
        numArgs &= ~DELAY;
 80051ce:	7b7b      	ldrb	r3, [r7, #13]
 80051d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d4:	737b      	strb	r3, [r7, #13]
        if(numArgs) {
 80051d6:	7b7b      	ldrb	r3, [r7, #13]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80051dc:	7b7b      	ldrb	r3, [r7, #13]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ffbd 	bl	8005160 <ST7735_WriteData>
            addr += numArgs;
 80051e6:	7b7b      	ldrb	r3, [r7, #13]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <ST7735_ExecuteCommandList+0x76>
            ms = *addr++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	817b      	strh	r3, [r7, #10]
            if(ms == 255) ms = 500;
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	2bff      	cmp	r3, #255	; 0xff
 8005202:	d102      	bne.n	800520a <ST7735_ExecuteCommandList+0x76>
 8005204:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005208:	817b      	strh	r3, [r7, #10]
    while(numCommands--) {
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	73fa      	strb	r2, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1c9      	bne.n	80051a8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800521e:	b590      	push	{r4, r7, lr}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	4604      	mov	r4, r0
 8005226:	4608      	mov	r0, r1
 8005228:	4611      	mov	r1, r2
 800522a:	461a      	mov	r2, r3
 800522c:	4623      	mov	r3, r4
 800522e:	71fb      	strb	r3, [r7, #7]
 8005230:	4603      	mov	r3, r0
 8005232:	71bb      	strb	r3, [r7, #6]
 8005234:	460b      	mov	r3, r1
 8005236:	717b      	strb	r3, [r7, #5]
 8005238:	4613      	mov	r3, r2
 800523a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800523c:	202a      	movs	r0, #42	; 0x2a
 800523e:	f7ff ff77 	bl	8005130 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8005242:	2300      	movs	r3, #0
 8005244:	733b      	strb	r3, [r7, #12]
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	737b      	strb	r3, [r7, #13]
 800524a:	2300      	movs	r3, #0
 800524c:	73bb      	strb	r3, [r7, #14]
 800524e:	797b      	ldrb	r3, [r7, #5]
 8005250:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	2104      	movs	r1, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff81 	bl	8005160 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800525e:	202b      	movs	r0, #43	; 0x2b
 8005260:	f7ff ff66 	bl	8005130 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8005264:	79bb      	ldrb	r3, [r7, #6]
 8005266:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8005268:	793b      	ldrb	r3, [r7, #4]
 800526a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	2104      	movs	r1, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff ff74 	bl	8005160 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8005278:	202c      	movs	r0, #44	; 0x2c
 800527a:	f7ff ff59 	bl	8005130 <ST7735_WriteCommand>
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}
	...

08005288 <ST7735_Init>:

void ST7735_Init() {
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800528c:	f7ff ff28 	bl	80050e0 <ST7735_Select>
    ST7735_Reset();
 8005290:	f7ff ff3e 	bl	8005110 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8005294:	4806      	ldr	r0, [pc, #24]	; (80052b0 <ST7735_Init+0x28>)
 8005296:	f7ff ff7d 	bl	8005194 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800529a:	4806      	ldr	r0, [pc, #24]	; (80052b4 <ST7735_Init+0x2c>)
 800529c:	f7ff ff7a 	bl	8005194 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80052a0:	4805      	ldr	r0, [pc, #20]	; (80052b8 <ST7735_Init+0x30>)
 80052a2:	f7ff ff77 	bl	8005194 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80052a6:	f7ff ff27 	bl	80050f8 <ST7735_Unselect>
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	0800b27c 	.word	0x0800b27c
 80052b4:	0800b2b8 	.word	0x0800b2b8
 80052b8:	0800b2c8 	.word	0x0800b2c8

080052bc <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
 80052c6:	460b      	mov	r3, r1
 80052c8:	80bb      	strh	r3, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b9f      	cmp	r3, #159	; 0x9f
 80052d2:	d823      	bhi.n	800531c <ST7735_DrawPixel+0x60>
 80052d4:	88bb      	ldrh	r3, [r7, #4]
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d820      	bhi.n	800531c <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 80052da:	f7ff ff01 	bl	80050e0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	b2d8      	uxtb	r0, r3
 80052e2:	88bb      	ldrh	r3, [r7, #4]
 80052e4:	b2d9      	uxtb	r1, r3
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	88bb      	ldrh	r3, [r7, #4]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f7ff ff92 	bl	800521e <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	b29b      	uxth	r3, r3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	733b      	strb	r3, [r7, #12]
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	2102      	movs	r1, #2
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff25 	bl	8005160 <ST7735_WriteData>

    ST7735_Unselect();
 8005316:	f7ff feef 	bl	80050f8 <ST7735_Unselect>
 800531a:	e000      	b.n	800531e <ST7735_DrawPixel+0x62>
        return;
 800531c:	bf00      	nop
}
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005324:	b082      	sub	sp, #8
 8005326:	b590      	push	{r4, r7, lr}
 8005328:	b089      	sub	sp, #36	; 0x24
 800532a:	af00      	add	r7, sp, #0
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	4603      	mov	r3, r0
 8005330:	80fb      	strh	r3, [r7, #6]
 8005332:	460b      	mov	r3, r1
 8005334:	80bb      	strh	r3, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	b2d8      	uxtb	r0, r3
 800533e:	88bb      	ldrh	r3, [r7, #4]
 8005340:	b2d9      	uxtb	r1, r3
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800534a:	4413      	add	r3, r2
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b2dc      	uxtb	r4, r3
 8005352:	88bb      	ldrh	r3, [r7, #4]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800535a:	4413      	add	r3, r2
 800535c:	b2db      	uxtb	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4622      	mov	r2, r4
 8005364:	f7ff ff5b 	bl	800521e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e043      	b.n	80053f6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800536e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b20      	subs	r3, #32
 8005374:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4619      	mov	r1, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	440b      	add	r3, r1
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e029      	b.n	80053e4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80053a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	743b      	strb	r3, [r7, #16]
 80053aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80053b0:	f107 0310 	add.w	r3, r7, #16
 80053b4:	2102      	movs	r1, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fed2 	bl	8005160 <ST7735_WriteData>
 80053bc:	e00f      	b.n	80053de <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80053be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	733b      	strb	r3, [r7, #12]
 80053ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80053d2:	f107 030c 	add.w	r3, r7, #12
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fec1 	bl	8005160 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3301      	adds	r3, #1
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053e8:	461a      	mov	r2, r3
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d3cf      	bcc.n	8005390 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80053fa:	461a      	mov	r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d3b5      	bcc.n	800536e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3724      	adds	r7, #36	; 0x24
 8005408:	46bd      	mov	sp, r7
 800540a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800540e:	b002      	add	sp, #8
 8005410:	4770      	bx	lr

08005412 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005412:	b082      	sub	sp, #8
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af04      	add	r7, sp, #16
 800541a:	603a      	str	r2, [r7, #0]
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
 8005422:	460b      	mov	r3, r1
 8005424:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8005426:	f7ff fe5b 	bl	80050e0 <ST7735_Select>

    while(*str) {
 800542a:	e02d      	b.n	8005488 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	7d3a      	ldrb	r2, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	2b9f      	cmp	r3, #159	; 0x9f
 8005434:	dd13      	ble.n	800545e <ST7735_WriteString+0x4c>
            x = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800543a:	7d7b      	ldrb	r3, [r7, #21]
 800543c:	b29a      	uxth	r2, r3
 800543e:	88bb      	ldrh	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8005444:	88bb      	ldrh	r3, [r7, #4]
 8005446:	7d7a      	ldrb	r2, [r7, #21]
 8005448:	4413      	add	r3, r2
 800544a:	2b7f      	cmp	r3, #127	; 0x7f
 800544c:	dc21      	bgt.n	8005492 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b20      	cmp	r3, #32
 8005454:	d103      	bne.n	800545e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	603b      	str	r3, [r7, #0]
                continue;
 800545c:	e014      	b.n	8005488 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	88b9      	ldrh	r1, [r7, #4]
 8005464:	88f8      	ldrh	r0, [r7, #6]
 8005466:	8c3b      	ldrh	r3, [r7, #32]
 8005468:	9302      	str	r3, [sp, #8]
 800546a:	8bbb      	ldrh	r3, [r7, #28]
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f7ff ff56 	bl	8005324 <ST7735_WriteChar>
        x += font.width;
 8005478:	7d3b      	ldrb	r3, [r7, #20]
 800547a:	b29a      	uxth	r2, r3
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	4413      	add	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
        str++;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1cd      	bne.n	800542c <ST7735_WriteString+0x1a>
 8005490:	e000      	b.n	8005494 <ST7735_WriteString+0x82>
                break;
 8005492:	bf00      	nop
    }

    ST7735_Unselect();
 8005494:	f7ff fe30 	bl	80050f8 <ST7735_Unselect>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b002      	add	sp, #8
 80054a4:	4770      	bx	lr
	...

080054a8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	461a      	mov	r2, r3
 80054b6:	4623      	mov	r3, r4
 80054b8:	80fb      	strh	r3, [r7, #6]
 80054ba:	4603      	mov	r3, r0
 80054bc:	80bb      	strh	r3, [r7, #4]
 80054be:	460b      	mov	r3, r1
 80054c0:	807b      	strh	r3, [r7, #2]
 80054c2:	4613      	mov	r3, r2
 80054c4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b9f      	cmp	r3, #159	; 0x9f
 80054ca:	d856      	bhi.n	800557a <ST7735_FillRectangle+0xd2>
 80054cc:	88bb      	ldrh	r3, [r7, #4]
 80054ce:	2b7f      	cmp	r3, #127	; 0x7f
 80054d0:	d853      	bhi.n	800557a <ST7735_FillRectangle+0xd2>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	887b      	ldrh	r3, [r7, #2]
 80054d6:	4413      	add	r3, r2
 80054d8:	2ba0      	cmp	r3, #160	; 0xa0
 80054da:	dd03      	ble.n	80054e4 <ST7735_FillRectangle+0x3c>
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80054e2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80054e4:	88ba      	ldrh	r2, [r7, #4]
 80054e6:	883b      	ldrh	r3, [r7, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	dd03      	ble.n	80054f6 <ST7735_FillRectangle+0x4e>
 80054ee:	88bb      	ldrh	r3, [r7, #4]
 80054f0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80054f4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80054f6:	f7ff fdf3 	bl	80050e0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	b2d8      	uxtb	r0, r3
 80054fe:	88bb      	ldrh	r3, [r7, #4]
 8005500:	b2d9      	uxtb	r1, r3
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	4413      	add	r3, r2
 800550c:	b2db      	uxtb	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b2dc      	uxtb	r4, r3
 8005512:	88bb      	ldrh	r3, [r7, #4]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	883b      	ldrh	r3, [r7, #0]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	4413      	add	r3, r2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4622      	mov	r2, r4
 8005524:	f7ff fe7b 	bl	800521e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8005528:	8c3b      	ldrh	r3, [r7, #32]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	b29b      	uxth	r3, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	733b      	strb	r3, [r7, #12]
 8005532:	8c3b      	ldrh	r3, [r7, #32]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	737b      	strb	r3, [r7, #13]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005538:	2201      	movs	r2, #1
 800553a:	2110      	movs	r1, #16
 800553c:	4811      	ldr	r0, [pc, #68]	; (8005584 <ST7735_FillRectangle+0xdc>)
 800553e:	f7fc f96d 	bl	800181c <MCAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8005542:	883b      	ldrh	r3, [r7, #0]
 8005544:	80bb      	strh	r3, [r7, #4]
 8005546:	e012      	b.n	800556e <ST7735_FillRectangle+0xc6>
        for(x = w; x > 0; x--) {
 8005548:	887b      	ldrh	r3, [r7, #2]
 800554a:	80fb      	strh	r3, [r7, #6]
 800554c:	e009      	b.n	8005562 <ST7735_FillRectangle+0xba>
            MCAL_SPI_TX(ST7735_SPI_PORT, data, sizeof(data));
 800554e:	f107 030c 	add.w	r3, r7, #12
 8005552:	2202      	movs	r2, #2
 8005554:	4619      	mov	r1, r3
 8005556:	480c      	ldr	r0, [pc, #48]	; (8005588 <ST7735_FillRectangle+0xe0>)
 8005558:	f7fc fc9c 	bl	8001e94 <MCAL_SPI_TX>
        for(x = w; x > 0; x--) {
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	3b01      	subs	r3, #1
 8005560:	80fb      	strh	r3, [r7, #6]
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f2      	bne.n	800554e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8005568:	88bb      	ldrh	r3, [r7, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	80bb      	strh	r3, [r7, #4]
 800556e:	88bb      	ldrh	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e9      	bne.n	8005548 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8005574:	f7ff fdc0 	bl	80050f8 <ST7735_Unselect>
 8005578:	e000      	b.n	800557c <ST7735_FillRectangle+0xd4>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800557a:	bf00      	nop
}
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bd90      	pop	{r4, r7, pc}
 8005582:	bf00      	nop
 8005584:	40010800 	.word	0x40010800
 8005588:	40013000 	.word	0x40013000

0800558c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af02      	add	r7, sp, #8
 8005592:	4603      	mov	r3, r0
 8005594:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	22a0      	movs	r2, #160	; 0xa0
 800559e:	2100      	movs	r1, #0
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7ff ff81 	bl	80054a8 <ST7735_FillRectangle>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <ST7735_DrawImage>:

void ST7735_FillScreenFast(uint16_t color) {
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4604      	mov	r4, r0
 80055b6:	4608      	mov	r0, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	461a      	mov	r2, r3
 80055bc:	4623      	mov	r3, r4
 80055be:	80fb      	strh	r3, [r7, #6]
 80055c0:	4603      	mov	r3, r0
 80055c2:	80bb      	strh	r3, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	807b      	strh	r3, [r7, #2]
 80055c8:	4613      	mov	r3, r2
 80055ca:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	2b9f      	cmp	r3, #159	; 0x9f
 80055d0:	d831      	bhi.n	8005636 <ST7735_DrawImage+0x88>
 80055d2:	88bb      	ldrh	r3, [r7, #4]
 80055d4:	2b7f      	cmp	r3, #127	; 0x7f
 80055d6:	d82e      	bhi.n	8005636 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	887b      	ldrh	r3, [r7, #2]
 80055dc:	4413      	add	r3, r2
 80055de:	2ba0      	cmp	r3, #160	; 0xa0
 80055e0:	dc2b      	bgt.n	800563a <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 80055e2:	88ba      	ldrh	r2, [r7, #4]
 80055e4:	883b      	ldrh	r3, [r7, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	dc28      	bgt.n	800563e <ST7735_DrawImage+0x90>

    ST7735_Select();
 80055ec:	f7ff fd78 	bl	80050e0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	b2d8      	uxtb	r0, r3
 80055f4:	88bb      	ldrh	r3, [r7, #4]
 80055f6:	b2d9      	uxtb	r1, r3
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	4413      	add	r3, r2
 8005602:	b2db      	uxtb	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b2dc      	uxtb	r4, r3
 8005608:	88bb      	ldrh	r3, [r7, #4]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	883b      	ldrh	r3, [r7, #0]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	4413      	add	r3, r2
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4622      	mov	r2, r4
 800561a:	f7ff fe00 	bl	800521e <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	883a      	ldrh	r2, [r7, #0]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4619      	mov	r1, r3
 800562a:	69b8      	ldr	r0, [r7, #24]
 800562c:	f7ff fd98 	bl	8005160 <ST7735_WriteData>
    ST7735_Unselect();
 8005630:	f7ff fd62 	bl	80050f8 <ST7735_Unselect>
 8005634:	e004      	b.n	8005640 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800563e:	bf00      	nop
}
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
	...

08005648 <main>:
QueueHandle_t xBrightnessQueue;
QueueHandle_t xProgressQueue;

/*** Semaphore Handles***/
//SemaphoreHandle_t xProgressSemaphore;
int main(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b094      	sub	sp, #80	; 0x50
 800564c:	af04      	add	r7, sp, #16

	// Event Groups

	buttonEventGroup = xEventGroupCreate();
 800564e:	f7fc ff95 	bl	800257c <xEventGroupCreate>
 8005652:	4603      	mov	r3, r0
 8005654:	4ac4      	ldr	r2, [pc, #784]	; (8005968 <main+0x320>)
 8005656:	6013      	str	r3, [r2, #0]
	buttonEventGroup_M = xEventGroupCreate();
 8005658:	f7fc ff90 	bl	800257c <xEventGroupCreate>
 800565c:	4603      	mov	r3, r0
 800565e:	4ac3      	ldr	r2, [pc, #780]	; (800596c <main+0x324>)
 8005660:	6013      	str	r3, [r2, #0]
	MenuEventGroup = xEventGroupCreate();
 8005662:	f7fc ff8b 	bl	800257c <xEventGroupCreate>
 8005666:	4603      	mov	r3, r0
 8005668:	4ac1      	ldr	r2, [pc, #772]	; (8005970 <main+0x328>)
 800566a:	6013      	str	r3, [r2, #0]
	TickerEventGroup = xEventGroupCreate();
 800566c:	f7fc ff86 	bl	800257c <xEventGroupCreate>
 8005670:	4603      	mov	r3, r0
 8005672:	4ac0      	ldr	r2, [pc, #768]	; (8005974 <main+0x32c>)
 8005674:	6013      	str	r3, [r2, #0]

	// Task Creation

	xTaskCreate(vUpdate_Screen_Handler, "Screen Updater", 512, NULL, 1,
 8005676:	4bc0      	ldr	r3, [pc, #768]	; (8005978 <main+0x330>)
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	2301      	movs	r3, #1
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005684:	49bd      	ldr	r1, [pc, #756]	; (800597c <main+0x334>)
 8005686:	48be      	ldr	r0, [pc, #760]	; (8005980 <main+0x338>)
 8005688:	f7fd fc92 	bl	8002fb0 <xTaskCreate>
			&xUpdate_Screen_Handle);
	xTaskCreate(vMP3_Player_Handler, "MP3 USART1", configMINIMAL_STACK_SIZE,
 800568c:	4bbd      	ldr	r3, [pc, #756]	; (8005984 <main+0x33c>)
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	2301      	movs	r3, #1
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	49bb      	ldr	r1, [pc, #748]	; (8005988 <main+0x340>)
 800569a:	48bc      	ldr	r0, [pc, #752]	; (800598c <main+0x344>)
 800569c:	f7fd fc88 	bl	8002fb0 <xTaskCreate>
	NULL, 1, &xMP3_Player_Handle);
	xTaskCreate(vButton_Handler, "Check Butttons", configMINIMAL_STACK_SIZE,
 80056a0:	4bbb      	ldr	r3, [pc, #748]	; (8005990 <main+0x348>)
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	2301      	movs	r3, #1
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	49b9      	ldr	r1, [pc, #740]	; (8005994 <main+0x34c>)
 80056ae:	48ba      	ldr	r0, [pc, #744]	; (8005998 <main+0x350>)
 80056b0:	f7fd fc7e 	bl	8002fb0 <xTaskCreate>
	NULL, 1, &xButton_Handle);
	xTaskCreate(vTicker_Handler, "track time track",
 80056b4:	4bb9      	ldr	r3, [pc, #740]	; (800599c <main+0x354>)
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	2302      	movs	r3, #2
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2300      	movs	r3, #0
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	49b7      	ldr	r1, [pc, #732]	; (80059a0 <main+0x358>)
 80056c2:	48b8      	ldr	r0, [pc, #736]	; (80059a4 <main+0x35c>)
 80056c4:	f7fd fc74 	bl	8002fb0 <xTaskCreate>
	configMINIMAL_STACK_SIZE, NULL, 2, &xTicker_Handle);
	xTaskCreate(vBrightness_Handler, "ADC AND DAC",
 80056c8:	4bb7      	ldr	r3, [pc, #732]	; (80059a8 <main+0x360>)
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2301      	movs	r3, #1
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	49b5      	ldr	r1, [pc, #724]	; (80059ac <main+0x364>)
 80056d6:	48b6      	ldr	r0, [pc, #728]	; (80059b0 <main+0x368>)
 80056d8:	f7fd fc6a 	bl	8002fb0 <xTaskCreate>
	configMINIMAL_STACK_SIZE, NULL, 1, &xBrightness_Handle);
	xTaskCreate(vMenu_Handler, "Menu",
 80056dc:	4bb5      	ldr	r3, [pc, #724]	; (80059b4 <main+0x36c>)
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	2301      	movs	r3, #1
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	49b3      	ldr	r1, [pc, #716]	; (80059b8 <main+0x370>)
 80056ea:	48b4      	ldr	r0, [pc, #720]	; (80059bc <main+0x374>)
 80056ec:	f7fd fc60 	bl	8002fb0 <xTaskCreate>
	configMINIMAL_STACK_SIZE, NULL, 1, &xMenu_Handle);

	// Queue Creation

	xBrightnessQueue = xQueueCreate(1, sizeof(uint32_t));
 80056f0:	2200      	movs	r2, #0
 80056f2:	2104      	movs	r1, #4
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fd f9af 	bl	8002a58 <xQueueGenericCreate>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4ab0      	ldr	r2, [pc, #704]	; (80059c0 <main+0x378>)
 80056fe:	6013      	str	r3, [r2, #0]
	xProgressQueue = xQueueCreate(1, sizeof(float));
 8005700:	2200      	movs	r2, #0
 8005702:	2104      	movs	r1, #4
 8005704:	2001      	movs	r0, #1
 8005706:	f7fd f9a7 	bl	8002a58 <xQueueGenericCreate>
 800570a:	4603      	mov	r3, r0
 800570c:	4aad      	ldr	r2, [pc, #692]	; (80059c4 <main+0x37c>)
 800570e:	6013      	str	r3, [r2, #0]


	// Hardware initialization

	MCAL_RCC_InitSysClock();
 8005710:	f7fc f98a 	bl	8001a28 <MCAL_RCC_InitSysClock>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPAEN);
 8005714:	2102      	movs	r1, #2
 8005716:	2002      	movs	r0, #2
 8005718:	f7fc f9fe 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPBEN);
 800571c:	2103      	movs	r1, #3
 800571e:	2002      	movs	r0, #2
 8005720:	f7fc f9fa 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPDEN);
 8005724:	2105      	movs	r1, #5
 8005726:	2002      	movs	r0, #2
 8005728:	f7fc f9f6 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_AFIOEN);
 800572c:	2100      	movs	r1, #0
 800572e:	2002      	movs	r0, #2
 8005730:	f7fc f9f2 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_SPI1EN);
 8005734:	210c      	movs	r1, #12
 8005736:	2002      	movs	r0, #2
 8005738:	f7fc f9ee 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_USART1EN);
 800573c:	210e      	movs	r1, #14
 800573e:	2002      	movs	r0, #2
 8005740:	f7fc f9ea 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_ADC1EN);
 8005744:	2109      	movs	r1, #9
 8005746:	2002      	movs	r0, #2
 8005748:	f7fc f9e6 	bl	8001b18 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB1, RCC_APB1ENR_TIM2EN);
 800574c:	2100      	movs	r1, #0
 800574e:	2001      	movs	r0, #1
 8005750:	f7fc f9e2 	bl	8001b18 <MCAL_RCC_EnablePeripheral>

	USART_Config_t uartcfg;
	uartcfg.BaudRate = USART_BAUD_RATE_9600;
 8005754:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
	uartcfg.FlowCTRL = USART_FLOW_CTRL_NONE;
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
	uartcfg.IRQ_Enable = USART_IRQ_ENABLE_NONE;
 800575e:	2300      	movs	r3, #0
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
	uartcfg.P_IRQ_CallBack = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
	uartcfg.Parity = USART_PARITY_NONE;
 8005766:	2300      	movs	r3, #0
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartcfg.PayLoadLength = USART_DATA_8bits;
 800576a:	2300      	movs	r3, #0
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
	uartcfg.StopBits = USART_STOP_BITS_1;
 800576e:	2300      	movs	r3, #0
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
	uartcfg.USART_Mode = USART_MODE_TX_RX;
 8005772:	230c      	movs	r3, #12
 8005774:	623b      	str	r3, [r7, #32]

	MCAL_USART_Init(USART1, &uartcfg);
 8005776:	f107 0320 	add.w	r3, r7, #32
 800577a:	4619      	mov	r1, r3
 800577c:	4892      	ldr	r0, [pc, #584]	; (80059c8 <main+0x380>)
 800577e:	f7fc fcef 	bl	8002160 <MCAL_USART_Init>
	MCAL_USART_GPIO_SetPins(USART1);
 8005782:	4891      	ldr	r0, [pc, #580]	; (80059c8 <main+0x380>)
 8005784:	f7fc fde4 	bl	8002350 <MCAL_USART_GPIO_SetPins>

	SPI_Config_t spicfg;
	spicfg.Baud_PS = SPI_Baud_PS_2;
 8005788:	2300      	movs	r3, #0
 800578a:	82fb      	strh	r3, [r7, #22]
	spicfg.Device_Mode = SPI_Device_Mode_Master;
 800578c:	2304      	movs	r3, #4
 800578e:	813b      	strh	r3, [r7, #8]
	spicfg.Com_Mode = SPI_Com_Mode_1L_TX;
 8005790:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005794:	817b      	strh	r3, [r7, #10]
	spicfg.Data_Size = SPI_Data_Size_8;
 8005796:	2300      	movs	r3, #0
 8005798:	81fb      	strh	r3, [r7, #14]
	spicfg.Frame_Format = SPI_Frame_Format_MSB;
 800579a:	2300      	movs	r3, #0
 800579c:	81bb      	strh	r3, [r7, #12]
	spicfg.IRQ_En = SPI_IRQ_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	833b      	strh	r3, [r7, #24]
	spicfg.NSS = SPI_NSS_Software_En_Set;
 80057a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057a6:	82bb      	strh	r3, [r7, #20]
	spicfg.P_IRq_CallBack = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
	spicfg.CLK_PHA = SPI_CLK_PHA_1;
 80057ac:	2300      	movs	r3, #0
 80057ae:	827b      	strh	r3, [r7, #18]
	spicfg.CLK_POL = SPI_CLK_POL_Low;
 80057b0:	2300      	movs	r3, #0
 80057b2:	823b      	strh	r3, [r7, #16]

	MCAL_SPI_Init(SPI1, &spicfg);
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	4884      	ldr	r0, [pc, #528]	; (80059cc <main+0x384>)
 80057bc:	f7fc fa4c 	bl	8001c58 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_PINS(SPI1);
 80057c0:	4882      	ldr	r0, [pc, #520]	; (80059cc <main+0x384>)
 80057c2:	f7fc faa3 	bl	8001d0c <MCAL_SPI_GPIO_PINS>

	/* TFT LCD CONTROL */
	GPIO_PinConfig_t ccfg;
	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80057c6:	2304      	movs	r3, #4
 80057c8:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 80057ca:	2302      	movs	r3, #2
 80057cc:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_2;
 80057ce:	2304      	movs	r3, #4
 80057d0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	487e      	ldr	r0, [pc, #504]	; (80059d0 <main+0x388>)
 80057d8:	f7fb ff88 	bl	80016ec <MCAL_GPIO_Init>

	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80057dc:	2304      	movs	r3, #4
 80057de:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 80057e0:	2302      	movs	r3, #2
 80057e2:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_3;
 80057e4:	2308      	movs	r3, #8
 80057e6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4878      	ldr	r0, [pc, #480]	; (80059d0 <main+0x388>)
 80057ee:	f7fb ff7d 	bl	80016ec <MCAL_GPIO_Init>

	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80057f2:	2304      	movs	r3, #4
 80057f4:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 80057f6:	2302      	movs	r3, #2
 80057f8:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_4;
 80057fa:	2310      	movs	r3, #16
 80057fc:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4873      	ldr	r0, [pc, #460]	; (80059d0 <main+0x388>)
 8005804:	f7fb ff72 	bl	80016ec <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8005808:	2200      	movs	r2, #0
 800580a:	2104      	movs	r1, #4
 800580c:	4870      	ldr	r0, [pc, #448]	; (80059d0 <main+0x388>)
 800580e:	f7fc f805 	bl	800181c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8005812:	2200      	movs	r2, #0
 8005814:	2108      	movs	r1, #8
 8005816:	486e      	ldr	r0, [pc, #440]	; (80059d0 <main+0x388>)
 8005818:	f7fc f800 	bl	800181c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800581c:	2200      	movs	r2, #0
 800581e:	2110      	movs	r1, #16
 8005820:	486b      	ldr	r0, [pc, #428]	; (80059d0 <main+0x388>)
 8005822:	f7fb fffb 	bl	800181c <MCAL_GPIO_WritePin>

	// PIN B6 BSY LINE
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8005826:	2301      	movs	r3, #1
 8005828:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800582a:	2302      	movs	r3, #2
 800582c:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_6;
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4867      	ldr	r0, [pc, #412]	; (80059d4 <main+0x38c>)
 8005838:	f7fb ff58 	bl	80016ec <MCAL_GPIO_Init>

	/* MENU CONTROL */
	// PIN B7 FORWARD BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800583c:	2302      	movs	r3, #2
 800583e:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8005840:	2302      	movs	r3, #2
 8005842:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_7;
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4861      	ldr	r0, [pc, #388]	; (80059d4 <main+0x38c>)
 800584e:	f7fb ff4d 	bl	80016ec <MCAL_GPIO_Init>

	// PIN B8 ACTION BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8005852:	2302      	movs	r3, #2
 8005854:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8005856:	2302      	movs	r3, #2
 8005858:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_8;
 800585a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800585e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	4619      	mov	r1, r3
 8005864:	485b      	ldr	r0, [pc, #364]	; (80059d4 <main+0x38c>)
 8005866:	f7fb ff41 	bl	80016ec <MCAL_GPIO_Init>

	// PIN B9 BACKWARD BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800586a:	2302      	movs	r3, #2
 800586c:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800586e:	2302      	movs	r3, #2
 8005870:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_9;
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4855      	ldr	r0, [pc, #340]	; (80059d4 <main+0x38c>)
 800587e:	f7fb ff35 	bl	80016ec <MCAL_GPIO_Init>

	// PIN A11 VOL UP
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8005882:	2302      	movs	r3, #2
 8005884:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8005886:	2302      	movs	r3, #2
 8005888:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_11;
 800588a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800588e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	4619      	mov	r1, r3
 8005894:	484e      	ldr	r0, [pc, #312]	; (80059d0 <main+0x388>)
 8005896:	f7fb ff29 	bl	80016ec <MCAL_GPIO_Init>

	// PIN A12 VOL DOWN
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800589a:	2302      	movs	r3, #2
 800589c:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800589e:	2302      	movs	r3, #2
 80058a0:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_12;
 80058a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4848      	ldr	r0, [pc, #288]	; (80059d0 <main+0x388>)
 80058ae:	f7fb ff1d 	bl	80016ec <MCAL_GPIO_Init>

	PWM_Init(60000);
 80058b2:	f64e 2060 	movw	r0, #60000	; 0xea60
 80058b6:	f7fc f801 	bl	80018bc <PWM_Init>
	ST7735_Init();
 80058ba:	f7ff fce5 	bl	8005288 <ST7735_Init>
	MCAL_ADC_Init(ADC1, GPIOA, GPIO_PIN_0);
 80058be:	2201      	movs	r2, #1
 80058c0:	4943      	ldr	r1, [pc, #268]	; (80059d0 <main+0x388>)
 80058c2:	4845      	ldr	r0, [pc, #276]	; (80059d8 <main+0x390>)
 80058c4:	f7fb fce0 	bl	8001288 <MCAL_ADC_Init>
	Brightness_Counter = MCAL_ADC_Read(ADC1, GPIOA, GPIO_PIN_0);
 80058c8:	2201      	movs	r2, #1
 80058ca:	4941      	ldr	r1, [pc, #260]	; (80059d0 <main+0x388>)
 80058cc:	4842      	ldr	r0, [pc, #264]	; (80059d8 <main+0x390>)
 80058ce:	f7fb fd55 	bl	800137c <MCAL_ADC_Read>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4a41      	ldr	r2, [pc, #260]	; (80059dc <main+0x394>)
 80058d6:	6013      	str	r3, [r2, #0]
	if (Brightness_Counter > 4040)
 80058d8:	4b40      	ldr	r3, [pc, #256]	; (80059dc <main+0x394>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f640 72c8 	movw	r2, #4040	; 0xfc8
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d903      	bls.n	80058ec <main+0x2a4>
		Brightness_Counter = 4040;
 80058e4:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <main+0x394>)
 80058e6:	f640 72c8 	movw	r2, #4040	; 0xfc8
 80058ea:	601a      	str	r2, [r3, #0]
	Brightness_Counter = (Brightness_Counter - 0) * (50 - 10) / (4040 - 0) + 10;
 80058ec:	4b3b      	ldr	r3, [pc, #236]	; (80059dc <main+0x394>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	08db      	lsrs	r3, r3, #3
 80058fa:	4a39      	ldr	r2, [pc, #228]	; (80059e0 <main+0x398>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	330a      	adds	r3, #10
 8005904:	4a35      	ldr	r2, [pc, #212]	; (80059dc <main+0x394>)
 8005906:	6013      	str	r3, [r2, #0]

	// NOT ENOUGH FLASH SIZE FOR WELCOME IMAGE --> CHANGE THE FLASH SIZE IN FLASHLD
	ST7735_DrawImage(0, 0, 160, 128, img);
 8005908:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <main+0x39c>)
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	22a0      	movs	r2, #160	; 0xa0
 8005910:	2100      	movs	r1, #0
 8005912:	2000      	movs	r0, #0
 8005914:	f7ff fe4b 	bl	80055ae <ST7735_DrawImage>

	PWM_Duty(60000);
 8005918:	f64e 2060 	movw	r0, #60000	; 0xea60
 800591c:	f7fc f80a 	bl	8001934 <PWM_Duty>
	playNote();
 8005920:	f7fe feec 	bl	80046fc <playNote>

	if (HAL_DF_Init(15) == TF_OFFLINE) {
 8005924:	200f      	movs	r0, #15
 8005926:	f7ff fb43 	bl	8004fb0 <HAL_DF_Init>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 80cd 	bne.w	8005acc <main+0x484>
		// ALARM SCREEN
		fillRect(19, 36, 145-19, 103-36, ST7735_BLACK);
 8005932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2343      	movs	r3, #67	; 0x43
 800593a:	227e      	movs	r2, #126	; 0x7e
 800593c:	2124      	movs	r1, #36	; 0x24
 800593e:	2013      	movs	r0, #19
 8005940:	f7fe ff3f 	bl	80047c2 <fillRect>
		drawRect(24, 41, 140-24, 99-41, ST7735_YELLOW);
 8005944:	231f      	movs	r3, #31
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	233a      	movs	r3, #58	; 0x3a
 800594a:	2274      	movs	r2, #116	; 0x74
 800594c:	2129      	movs	r1, #41	; 0x29
 800594e:	2018      	movs	r0, #24
 8005950:	f7ff f952 	bl	8004bf8 <drawRect>

		ST7735_WriteString(32, 56, "SD UNDETECTED", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <main+0x3a0>)
 8005956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595a:	9202      	str	r2, [sp, #8]
 800595c:	221f      	movs	r2, #31
 800595e:	9201      	str	r2, [sp, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	9200      	str	r2, [sp, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	e041      	b.n	80059ec <main+0x3a4>
 8005968:	200047ec 	.word	0x200047ec
 800596c:	200047f0 	.word	0x200047f0
 8005970:	200047f4 	.word	0x200047f4
 8005974:	200047f8 	.word	0x200047f8
 8005978:	200047d4 	.word	0x200047d4
 800597c:	08009d04 	.word	0x08009d04
 8005980:	08005aed 	.word	0x08005aed
 8005984:	200047d8 	.word	0x200047d8
 8005988:	08009d14 	.word	0x08009d14
 800598c:	08005fd5 	.word	0x08005fd5
 8005990:	200047dc 	.word	0x200047dc
 8005994:	08009d20 	.word	0x08009d20
 8005998:	080061a5 	.word	0x080061a5
 800599c:	200047e0 	.word	0x200047e0
 80059a0:	08009d30 	.word	0x08009d30
 80059a4:	080063f1 	.word	0x080063f1
 80059a8:	200047e4 	.word	0x200047e4
 80059ac:	08009d44 	.word	0x08009d44
 80059b0:	0800655d 	.word	0x0800655d
 80059b4:	200047e8 	.word	0x200047e8
 80059b8:	08009d50 	.word	0x08009d50
 80059bc:	080065d1 	.word	0x080065d1
 80059c0:	200047fc 	.word	0x200047fc
 80059c4:	20004800 	.word	0x20004800
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40013000 	.word	0x40013000
 80059d0:	40010800 	.word	0x40010800
 80059d4:	40010c00 	.word	0x40010c00
 80059d8:	40012400 	.word	0x40012400
 80059dc:	200047cc 	.word	0x200047cc
 80059e0:	020718d7 	.word	0x020718d7
 80059e4:	0800b2f4 	.word	0x0800b2f4
 80059e8:	20000058 	.word	0x20000058
 80059ec:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <main+0x498>)
 80059ee:	2138      	movs	r1, #56	; 0x38
 80059f0:	2020      	movs	r0, #32
 80059f2:	f7ff fd0e 	bl	8005412 <ST7735_WriteString>
		fillTriangle(65,88, 75, 78, 85, 88, ST7735_YELLOW);
 80059f6:	231f      	movs	r3, #31
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	2358      	movs	r3, #88	; 0x58
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	2355      	movs	r3, #85	; 0x55
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	234e      	movs	r3, #78	; 0x4e
 8005a04:	224b      	movs	r2, #75	; 0x4b
 8005a06:	2158      	movs	r1, #88	; 0x58
 8005a08:	2041      	movs	r0, #65	; 0x41
 8005a0a:	f7ff f936 	bl	8004c7a <fillTriangle>
		fillRect(75, 81, 2, 4, ST7735_BLACK);
 8005a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2304      	movs	r3, #4
 8005a16:	2202      	movs	r2, #2
 8005a18:	2151      	movs	r1, #81	; 0x51
 8005a1a:	204b      	movs	r0, #75	; 0x4b
 8005a1c:	f7fe fed1 	bl	80047c2 <fillRect>
		fillRect(75, 86, 2, 2, ST7735_BLACK);
 8005a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2302      	movs	r3, #2
 8005a28:	2202      	movs	r2, #2
 8005a2a:	2156      	movs	r1, #86	; 0x56
 8005a2c:	204b      	movs	r0, #75	; 0x4b
 8005a2e:	f7fe fec8 	bl	80047c2 <fillRect>

		HAL_DF_Wait_Push();
 8005a32:	f7ff fae1 	bl	8004ff8 <HAL_DF_Wait_Push>

		ST7735_WriteString(32, 56, "SD UNDETECTED", Font_7x10, ST7735_BLACK, ST7735_BLACK);
 8005a36:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <main+0x49c>)
 8005a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a42:	9201      	str	r2, [sp, #4]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	9200      	str	r2, [sp, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <main+0x498>)
 8005a4c:	2138      	movs	r1, #56	; 0x38
 8005a4e:	2020      	movs	r0, #32
 8005a50:	f7ff fcdf 	bl	8005412 <ST7735_WriteString>
		fillTriangle(65,88, 75, 78, 85, 88, ST7735_BLACK);
 8005a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a58:	9302      	str	r3, [sp, #8]
 8005a5a:	2358      	movs	r3, #88	; 0x58
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2355      	movs	r3, #85	; 0x55
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	234e      	movs	r3, #78	; 0x4e
 8005a64:	224b      	movs	r2, #75	; 0x4b
 8005a66:	2158      	movs	r1, #88	; 0x58
 8005a68:	2041      	movs	r0, #65	; 0x41
 8005a6a:	f7ff f906 	bl	8004c7a <fillTriangle>

		ST7735_WriteString(32, 56, "SD DETECTED", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <main+0x49c>)
 8005a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a74:	9202      	str	r2, [sp, #8]
 8005a76:	221f      	movs	r2, #31
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	9200      	str	r2, [sp, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <main+0x4a0>)
 8005a82:	2138      	movs	r1, #56	; 0x38
 8005a84:	2020      	movs	r0, #32
 8005a86:	f7ff fcc4 	bl	8005412 <ST7735_WriteString>
		fillCircle(76, 84, 13, ST7735_YELLOW);
 8005a8a:	231f      	movs	r3, #31
 8005a8c:	220d      	movs	r2, #13
 8005a8e:	2154      	movs	r1, #84	; 0x54
 8005a90:	204c      	movs	r0, #76	; 0x4c
 8005a92:	f7ff f881 	bl	8004b98 <fillCircle>

		fillCircle(70, 80, 3, ST7735_BLACK);
 8005a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	2150      	movs	r1, #80	; 0x50
 8005a9e:	2046      	movs	r0, #70	; 0x46
 8005aa0:	f7ff f87a 	bl	8004b98 <fillCircle>
		fillCircle(83, 80, 3, ST7735_BLACK);
 8005aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	2150      	movs	r1, #80	; 0x50
 8005aac:	2053      	movs	r0, #83	; 0x53
 8005aae:	f7ff f873 	bl	8004b98 <fillCircle>

		fillCircle(76, 90, 4, ST7735_BLACK);
 8005ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	215a      	movs	r1, #90	; 0x5a
 8005aba:	204c      	movs	r0, #76	; 0x4c
 8005abc:	f7ff f86c 	bl	8004b98 <fillCircle>
		fillCircle(76, 88, 4, ST7735_YELLOW);
 8005ac0:	231f      	movs	r3, #31
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	2158      	movs	r1, #88	; 0x58
 8005ac6:	204c      	movs	r0, #76	; 0x4c
 8005ac8:	f7ff f866 	bl	8004b98 <fillCircle>


	}

	Ticker_ms(5000);
 8005acc:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ad0:	f7fc fb0d 	bl	80020ee <Ticker_ms>
	Ticker_Init();
 8005ad4:	f7fc fa90 	bl	8001ff8 <Ticker_Init>
	vTaskStartScheduler();
 8005ad8:	f7fd fd02 	bl	80034e0 <vTaskStartScheduler>

	for (;;)
 8005adc:	e7fe      	b.n	8005adc <main+0x494>
 8005ade:	bf00      	nop
 8005ae0:	08009d58 	.word	0x08009d58
 8005ae4:	20000058 	.word	0x20000058
 8005ae8:	08009d68 	.word	0x08009d68

08005aec <vUpdate_Screen_Handler>:
		;
}

void vUpdate_Screen_Handler(void *params) {
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b091      	sub	sp, #68	; 0x44
 8005af0:	af04      	add	r7, sp, #16
 8005af2:	6078      	str	r0, [r7, #4]

	Start_Screen();
 8005af4:	f000 fe8a 	bl	800680c <Start_Screen>

	int8_t Prev_Track_Counter = Track_Counter;
 8005af8:	4b9f      	ldr	r3, [pc, #636]	; (8005d78 <vUpdate_Screen_Handler+0x28c>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t Prev_Vol_Counter = Vol_Counter;
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <vUpdate_Screen_Handler+0x290>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	float perc;
	float Prev_Perc = 0;
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t Prev_Brightness = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Brightness;

	for (;;) {
		EventBits_t suspend = xEventGroupWaitBits(MenuEventGroup, Menu_Trigger,
 8005b12:	4b9b      	ldr	r3, [pc, #620]	; (8005d80 <vUpdate_Screen_Handler+0x294>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2101      	movs	r1, #1
 8005b20:	f7fc fd44 	bl	80025ac <xEventGroupWaitBits>
 8005b24:	6238      	str	r0, [r7, #32]
		pdFALSE, pdFALSE, 0);
		if (suspend & Menu_Trigger) {
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <vUpdate_Screen_Handler+0x4a>
			vTaskSuspend(NULL);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fd fbad 	bl	8003290 <vTaskSuspend>
		}

		if (suspend & Screen_Resume) {
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <vUpdate_Screen_Handler+0x6e>
			Start_Screen();
 8005b40:	f000 fe64 	bl	800680c <Start_Screen>
			Track_Counter = Slide_Counter;
 8005b44:	4b8f      	ldr	r3, [pc, #572]	; (8005d84 <vUpdate_Screen_Handler+0x298>)
 8005b46:	f993 2000 	ldrsb.w	r2, [r3]
 8005b4a:	4b8b      	ldr	r3, [pc, #556]	; (8005d78 <vUpdate_Screen_Handler+0x28c>)
 8005b4c:	701a      	strb	r2, [r3, #0]
			xEventGroupClearBits(MenuEventGroup, Screen_Resume);
 8005b4e:	4b8c      	ldr	r3, [pc, #560]	; (8005d80 <vUpdate_Screen_Handler+0x294>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2110      	movs	r1, #16
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fc fdb3 	bl	80026c0 <xEventGroupClearBits>
		}
		EventBits_t bits = xEventGroupWaitBits(buttonEventGroup,
 8005b5a:	4b8b      	ldr	r3, [pc, #556]	; (8005d88 <vUpdate_Screen_Handler+0x29c>)
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	2301      	movs	r3, #1
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	2200      	movs	r2, #0
 8005b66:	211f      	movs	r1, #31
 8005b68:	f7fc fd20 	bl	80025ac <xEventGroupWaitBits>
 8005b6c:	61f8      	str	r0, [r7, #28]
				BUTTON_PP_BIT | BUTTON_UP_BIT | BUTTON_DOWN_BIT
						| BUTTON_BACK_BIT | BUTTON_FOR_BIT,
				pdFALSE, pdFALSE, 1);

		if (bits & BUTTON_BACK_BIT) {
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d065      	beq.n	8005c44 <vUpdate_Screen_Handler+0x158>
			xEventGroupClearBits(buttonEventGroup, BUTTON_BACK_BIT);
 8005b78:	4b83      	ldr	r3, [pc, #524]	; (8005d88 <vUpdate_Screen_Handler+0x29c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fc fd9e 	bl	80026c0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 8005b84:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005b86:	f993 3000 	ldrsb.w	r3, [r3]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d112      	bne.n	8005bb4 <vUpdate_Screen_Handler+0xc8>
				drawRect(51, 92, 25, 29, ST7735_BLACK);
 8005b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	231d      	movs	r3, #29
 8005b96:	2219      	movs	r2, #25
 8005b98:	215c      	movs	r1, #92	; 0x5c
 8005b9a:	2033      	movs	r0, #51	; 0x33
 8005b9c:	f7ff f82c 	bl	8004bf8 <drawRect>
				drawRect(10, 92, 25, 29, ST7735_GREEN);
 8005ba0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	231d      	movs	r3, #29
 8005ba8:	2219      	movs	r2, #25
 8005baa:	215c      	movs	r1, #92	; 0x5c
 8005bac:	200a      	movs	r0, #10
 8005bae:	f7ff f823 	bl	8004bf8 <drawRect>
 8005bb2:	e0b1      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 1) {
 8005bb4:	4b75      	ldr	r3, [pc, #468]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d112      	bne.n	8005be4 <vUpdate_Screen_Handler+0xf8>
				drawRect(92, 92, 25, 29, ST7735_BLACK);
 8005bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	231d      	movs	r3, #29
 8005bc6:	2219      	movs	r2, #25
 8005bc8:	215c      	movs	r1, #92	; 0x5c
 8005bca:	205c      	movs	r0, #92	; 0x5c
 8005bcc:	f7ff f814 	bl	8004bf8 <drawRect>
				drawRect(51, 92, 25, 29, ST7735_GREEN);
 8005bd0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	231d      	movs	r3, #29
 8005bd8:	2219      	movs	r2, #25
 8005bda:	215c      	movs	r1, #92	; 0x5c
 8005bdc:	2033      	movs	r0, #51	; 0x33
 8005bde:	f7ff f80b 	bl	8004bf8 <drawRect>
 8005be2:	e099      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 2) {
 8005be4:	4b69      	ldr	r3, [pc, #420]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005be6:	f993 3000 	ldrsb.w	r3, [r3]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d112      	bne.n	8005c14 <vUpdate_Screen_Handler+0x128>
				drawRect(126, 92, 25, 29, ST7735_BLACK);
 8005bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	231d      	movs	r3, #29
 8005bf6:	2219      	movs	r2, #25
 8005bf8:	215c      	movs	r1, #92	; 0x5c
 8005bfa:	207e      	movs	r0, #126	; 0x7e
 8005bfc:	f7fe fffc 	bl	8004bf8 <drawRect>
				drawRect(92, 92, 25, 29, ST7735_GREEN);
 8005c00:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	231d      	movs	r3, #29
 8005c08:	2219      	movs	r2, #25
 8005c0a:	215c      	movs	r1, #92	; 0x5c
 8005c0c:	205c      	movs	r0, #92	; 0x5c
 8005c0e:	f7fe fff3 	bl	8004bf8 <drawRect>
 8005c12:	e081      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 3) { //true
 8005c14:	4b5d      	ldr	r3, [pc, #372]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005c16:	f993 3000 	ldrsb.w	r3, [r3]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d17c      	bne.n	8005d18 <vUpdate_Screen_Handler+0x22c>
				drawRect(10, 92, 25, 29, ST7735_BLACK);
 8005c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	231d      	movs	r3, #29
 8005c26:	2219      	movs	r2, #25
 8005c28:	215c      	movs	r1, #92	; 0x5c
 8005c2a:	200a      	movs	r0, #10
 8005c2c:	f7fe ffe4 	bl	8004bf8 <drawRect>
				drawRect(126, 92, 25, 29, ST7735_GREEN);
 8005c30:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	231d      	movs	r3, #29
 8005c38:	2219      	movs	r2, #25
 8005c3a:	215c      	movs	r1, #92	; 0x5c
 8005c3c:	207e      	movs	r0, #126	; 0x7e
 8005c3e:	f7fe ffdb 	bl	8004bf8 <drawRect>
 8005c42:	e069      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			}

		}

		else if (bits & BUTTON_FOR_BIT) {
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d064      	beq.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			xEventGroupClearBits(buttonEventGroup, BUTTON_FOR_BIT);
 8005c4e:	4b4e      	ldr	r3, [pc, #312]	; (8005d88 <vUpdate_Screen_Handler+0x29c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fc fd33 	bl	80026c0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 8005c5a:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d112      	bne.n	8005c8a <vUpdate_Screen_Handler+0x19e>
				drawRect(126, 92, 25, 29, ST7735_BLACK);
 8005c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	231d      	movs	r3, #29
 8005c6c:	2219      	movs	r2, #25
 8005c6e:	215c      	movs	r1, #92	; 0x5c
 8005c70:	207e      	movs	r0, #126	; 0x7e
 8005c72:	f7fe ffc1 	bl	8004bf8 <drawRect>
				drawRect(10, 92, 25, 29, ST7735_GREEN);
 8005c76:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	231d      	movs	r3, #29
 8005c7e:	2219      	movs	r2, #25
 8005c80:	215c      	movs	r1, #92	; 0x5c
 8005c82:	200a      	movs	r0, #10
 8005c84:	f7fe ffb8 	bl	8004bf8 <drawRect>
 8005c88:	e046      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 1) {
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d112      	bne.n	8005cba <vUpdate_Screen_Handler+0x1ce>
				drawRect(10, 92, 25, 29, ST7735_BLACK);
 8005c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	231d      	movs	r3, #29
 8005c9c:	2219      	movs	r2, #25
 8005c9e:	215c      	movs	r1, #92	; 0x5c
 8005ca0:	200a      	movs	r0, #10
 8005ca2:	f7fe ffa9 	bl	8004bf8 <drawRect>
				drawRect(51, 92, 25, 29, ST7735_GREEN);
 8005ca6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	231d      	movs	r3, #29
 8005cae:	2219      	movs	r2, #25
 8005cb0:	215c      	movs	r1, #92	; 0x5c
 8005cb2:	2033      	movs	r0, #51	; 0x33
 8005cb4:	f7fe ffa0 	bl	8004bf8 <drawRect>
 8005cb8:	e02e      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 2) {
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d112      	bne.n	8005cea <vUpdate_Screen_Handler+0x1fe>
				drawRect(51, 92, 25, 29, ST7735_BLACK);
 8005cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	231d      	movs	r3, #29
 8005ccc:	2219      	movs	r2, #25
 8005cce:	215c      	movs	r1, #92	; 0x5c
 8005cd0:	2033      	movs	r0, #51	; 0x33
 8005cd2:	f7fe ff91 	bl	8004bf8 <drawRect>
				drawRect(92, 92, 25, 29, ST7735_GREEN);
 8005cd6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	231d      	movs	r3, #29
 8005cde:	2219      	movs	r2, #25
 8005ce0:	215c      	movs	r1, #92	; 0x5c
 8005ce2:	205c      	movs	r0, #92	; 0x5c
 8005ce4:	f7fe ff88 	bl	8004bf8 <drawRect>
 8005ce8:	e016      	b.n	8005d18 <vUpdate_Screen_Handler+0x22c>
			} else if (Menu_Counter == 3) {
 8005cea:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <vUpdate_Screen_Handler+0x2a0>)
 8005cec:	f993 3000 	ldrsb.w	r3, [r3]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d111      	bne.n	8005d18 <vUpdate_Screen_Handler+0x22c>
				drawRect(92, 92, 25, 29, ST7735_BLACK);
 8005cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	231d      	movs	r3, #29
 8005cfc:	2219      	movs	r2, #25
 8005cfe:	215c      	movs	r1, #92	; 0x5c
 8005d00:	205c      	movs	r0, #92	; 0x5c
 8005d02:	f7fe ff79 	bl	8004bf8 <drawRect>
				drawRect(126, 92, 25, 29, ST7735_GREEN);
 8005d06:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	231d      	movs	r3, #29
 8005d0e:	2219      	movs	r2, #25
 8005d10:	215c      	movs	r1, #92	; 0x5c
 8005d12:	207e      	movs	r0, #126	; 0x7e
 8005d14:	f7fe ff70 	bl	8004bf8 <drawRect>
			}
		}

		if ((bits & BUTTON_PP_BIT)) {
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d057      	beq.n	8005dd2 <vUpdate_Screen_Handler+0x2e6>

			xEventGroupClearBits(buttonEventGroup, BUTTON_PP_BIT);
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <vUpdate_Screen_Handler+0x29c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2104      	movs	r1, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fc fcc9 	bl	80026c0 <xEventGroupClearBits>
			if (BSY) {
 8005d2e:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <vUpdate_Screen_Handler+0x2a4>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02e      	beq.n	8005d94 <vUpdate_Screen_Handler+0x2a8>
				fillTriangle(56, 107, 68, 95, 68, 118, ST7735_BLACK);
 8005d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d3a:	9302      	str	r3, [sp, #8]
 8005d3c:	2376      	movs	r3, #118	; 0x76
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	2344      	movs	r3, #68	; 0x44
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	235f      	movs	r3, #95	; 0x5f
 8005d46:	2244      	movs	r2, #68	; 0x44
 8005d48:	216b      	movs	r1, #107	; 0x6b
 8005d4a:	2038      	movs	r0, #56	; 0x38
 8005d4c:	f7fe ff95 	bl	8004c7a <fillTriangle>
				fillRect(55, 96, 4, 21, ST7735_RED);
 8005d50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	2315      	movs	r3, #21
 8005d58:	2204      	movs	r2, #4
 8005d5a:	2160      	movs	r1, #96	; 0x60
 8005d5c:	2037      	movs	r0, #55	; 0x37
 8005d5e:	f7fe fd30 	bl	80047c2 <fillRect>
				fillRect(68, 96, 4, 21, ST7735_RED);
 8005d62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2315      	movs	r3, #21
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	2160      	movs	r1, #96	; 0x60
 8005d6e:	2044      	movs	r0, #68	; 0x44
 8005d70:	f7fe fd27 	bl	80047c2 <fillRect>
 8005d74:	e02d      	b.n	8005dd2 <vUpdate_Screen_Handler+0x2e6>
 8005d76:	bf00      	nop
 8005d78:	200047c9 	.word	0x200047c9
 8005d7c:	20000068 	.word	0x20000068
 8005d80:	200047f4 	.word	0x200047f4
 8005d84:	200047ca 	.word	0x200047ca
 8005d88:	200047ec 	.word	0x200047ec
 8005d8c:	200047c8 	.word	0x200047c8
 8005d90:	200047d0 	.word	0x200047d0
			}

			else {
				fillRect(55, 96, 4, 21, ST7735_BLACK);
 8005d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2315      	movs	r3, #21
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	2160      	movs	r1, #96	; 0x60
 8005da0:	2037      	movs	r0, #55	; 0x37
 8005da2:	f7fe fd0e 	bl	80047c2 <fillRect>
				fillRect(68, 96, 4, 21, ST7735_BLACK);
 8005da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2315      	movs	r3, #21
 8005dae:	2204      	movs	r2, #4
 8005db0:	2160      	movs	r1, #96	; 0x60
 8005db2:	2044      	movs	r0, #68	; 0x44
 8005db4:	f7fe fd05 	bl	80047c2 <fillRect>
				fillTriangle(56, 107, 68, 95, 68, 118, ST7735_RED);
 8005db8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005dbc:	9302      	str	r3, [sp, #8]
 8005dbe:	2376      	movs	r3, #118	; 0x76
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	2344      	movs	r3, #68	; 0x44
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	235f      	movs	r3, #95	; 0x5f
 8005dc8:	2244      	movs	r2, #68	; 0x44
 8005dca:	216b      	movs	r1, #107	; 0x6b
 8005dcc:	2038      	movs	r0, #56	; 0x38
 8005dce:	f7fe ff54 	bl	8004c7a <fillTriangle>
			}
		}

		if ((Prev_Track_Counter != Track_Counter)) {
 8005dd2:	4b7a      	ldr	r3, [pc, #488]	; (8005fbc <vUpdate_Screen_Handler+0x4d0>)
 8005dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8005dd8:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d02b      	beq.n	8005e38 <vUpdate_Screen_Handler+0x34c>
			ST7735_WriteString(9, 25, getTrackName(Prev_Track_Counter),
 8005de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff f96b 	bl	80050c0 <getTrackName>
 8005dea:	4601      	mov	r1, r0
 8005dec:	4b74      	ldr	r3, [pc, #464]	; (8005fc0 <vUpdate_Screen_Handler+0x4d4>)
 8005dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df2:	9202      	str	r2, [sp, #8]
 8005df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df8:	9201      	str	r2, [sp, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	9200      	str	r2, [sp, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	460a      	mov	r2, r1
 8005e02:	2119      	movs	r1, #25
 8005e04:	2009      	movs	r0, #9
 8005e06:	f7ff fb04 	bl	8005412 <ST7735_WriteString>
					Font_11x18,
					ST7735_BLACK, ST7735_BLACK);

			ST7735_WriteString(9, 25, getTrackName(Track_Counter), Font_11x18,
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	; (8005fbc <vUpdate_Screen_Handler+0x4d0>)
 8005e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f954 	bl	80050c0 <getTrackName>
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <vUpdate_Screen_Handler+0x4d4>)
 8005e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e20:	9202      	str	r2, [sp, #8]
 8005e22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e26:	9201      	str	r2, [sp, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	9200      	str	r2, [sp, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	460a      	mov	r2, r1
 8005e30:	2119      	movs	r1, #25
 8005e32:	2009      	movs	r0, #9
 8005e34:	f7ff faed 	bl	8005412 <ST7735_WriteString>
			ST7735_RED, ST7735_BLACK);

		}

		if (Prev_Vol_Counter != Vol_Counter) {
 8005e38:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <vUpdate_Screen_Handler+0x4d8>)
 8005e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8005e3e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d032      	beq.n	8005eac <vUpdate_Screen_Handler+0x3c0>
			char str[4];
			snprintf(str, sizeof(str), "%d", Prev_Vol_Counter);
 8005e46:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005e4a:	f107 000c 	add.w	r0, r7, #12
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <vUpdate_Screen_Handler+0x4dc>)
 8005e50:	2104      	movs	r1, #4
 8005e52:	f001 fe55 	bl	8007b00 <sniprintf>
			ST7735_WriteString(130, 5, str, Font_11x18, ST7735_BLACK,
 8005e56:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <vUpdate_Screen_Handler+0x4d4>)
 8005e58:	f107 010c 	add.w	r1, r7, #12
 8005e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e60:	9202      	str	r2, [sp, #8]
 8005e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	9200      	str	r2, [sp, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	460a      	mov	r2, r1
 8005e70:	2105      	movs	r1, #5
 8005e72:	2082      	movs	r0, #130	; 0x82
 8005e74:	f7ff facd 	bl	8005412 <ST7735_WriteString>
			ST7735_BLACK);
			snprintf(str, sizeof(str), "%d", Vol_Counter);
 8005e78:	4b52      	ldr	r3, [pc, #328]	; (8005fc4 <vUpdate_Screen_Handler+0x4d8>)
 8005e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8005e7e:	f107 000c 	add.w	r0, r7, #12
 8005e82:	4a51      	ldr	r2, [pc, #324]	; (8005fc8 <vUpdate_Screen_Handler+0x4dc>)
 8005e84:	2104      	movs	r1, #4
 8005e86:	f001 fe3b 	bl	8007b00 <sniprintf>
			ST7735_WriteString(130, 5, str, Font_11x18, ST7735_RED,
 8005e8a:	4b4d      	ldr	r3, [pc, #308]	; (8005fc0 <vUpdate_Screen_Handler+0x4d4>)
 8005e8c:	f107 010c 	add.w	r1, r7, #12
 8005e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e94:	9202      	str	r2, [sp, #8]
 8005e96:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e9a:	9201      	str	r2, [sp, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	9200      	str	r2, [sp, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	2105      	movs	r1, #5
 8005ea6:	2082      	movs	r0, #130	; 0x82
 8005ea8:	f7ff fab3 	bl	8005412 <ST7735_WriteString>
			ST7735_BLACK);
		}
		if (xQueueReceive(xProgressQueue, &perc, 0)) {
 8005eac:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <vUpdate_Screen_Handler+0x4e0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f107 0114 	add.w	r1, r7, #20
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fc fed6 	bl	8002c68 <xQueueReceive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d033      	beq.n	8005f2a <vUpdate_Screen_Handler+0x43e>
			if ((uint8_t) Prev_Perc != (uint8_t) perc) {
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec4:	f7fb f8e4 	bl	8001090 <__aeabi_f2uiz>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	b2dc      	uxtb	r4, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb f8de 	bl	8001090 <__aeabi_f2uiz>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d026      	beq.n	8005f2a <vUpdate_Screen_Handler+0x43e>

				if (perc == 0) {
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f04f 0100 	mov.w	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fb f8a2 	bl	800102c <__aeabi_fcmpeq>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <vUpdate_Screen_Handler+0x416>
					fillRect(31, 86, 100, 2, ST7735_BLACK);
 8005eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2264      	movs	r2, #100	; 0x64
 8005ef8:	2156      	movs	r1, #86	; 0x56
 8005efa:	201f      	movs	r0, #31
 8005efc:	f7fe fc61 	bl	80047c2 <fillRect>
 8005f00:	e013      	b.n	8005f2a <vUpdate_Screen_Handler+0x43e>
				} else {
					uint8_t pos = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	76fb      	strb	r3, [r7, #27]
					pos = (uint8_t) perc + 30;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fb f8c1 	bl	8001090 <__aeabi_f2uiz>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	331e      	adds	r3, #30
 8005f14:	76fb      	strb	r3, [r7, #27]
					fillRect(pos, 86, 1, 2, ST7735_BLUE);
 8005f16:	7efb      	ldrb	r3, [r7, #27]
 8005f18:	b218      	sxth	r0, r3
 8005f1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2302      	movs	r3, #2
 8005f22:	2201      	movs	r2, #1
 8005f24:	2156      	movs	r1, #86	; 0x56
 8005f26:	f7fe fc4c 	bl	80047c2 <fillRect>
				}
			}
		}

		if (xQueueReceive(xBrightnessQueue, &Brightness, 0) == pdPASS) {
 8005f2a:	4b29      	ldr	r3, [pc, #164]	; (8005fd0 <vUpdate_Screen_Handler+0x4e4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f107 0110 	add.w	r1, r7, #16
 8005f32:	2200      	movs	r2, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fc fe97 	bl	8002c68 <xQueueReceive>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d12d      	bne.n	8005f9c <vUpdate_Screen_Handler+0x4b0>
			if (Prev_Brightness != Brightness) {
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d029      	beq.n	8005f9c <vUpdate_Screen_Handler+0x4b0>
				//WE UPDATE THE SCREEN
				if (Brightness > Prev_Brightness) {
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d210      	bcs.n	8005f72 <vUpdate_Screen_Handler+0x486>
					ST7735_FillRectangle(6 + (Prev_Brightness), 9,
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3306      	adds	r3, #6
 8005f56:	b298      	uxth	r0, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	2300      	movs	r3, #0
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2307      	movs	r3, #7
 8005f6a:	2109      	movs	r1, #9
 8005f6c:	f7ff fa9c 	bl	80054a8 <ST7735_FillRectangle>
 8005f70:	e014      	b.n	8005f9c <vUpdate_Screen_Handler+0x4b0>
							(Brightness - Prev_Brightness), 7, ST7735_WHITE);
				}

				else if (Brightness < Prev_Brightness) {
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d910      	bls.n	8005f9c <vUpdate_Screen_Handler+0x4b0>
					ST7735_FillRectangle(6 + (Brightness), 9,
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3306      	adds	r3, #6
 8005f80:	b298      	uxth	r0, r3
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2307      	movs	r3, #7
 8005f96:	2109      	movs	r1, #9
 8005f98:	f7ff fa86 	bl	80054a8 <ST7735_FillRectangle>
							(Prev_Brightness - Brightness), 7, ST7735_BLACK);
				}
			}
		}

		Prev_Track_Counter = Track_Counter;
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <vUpdate_Screen_Handler+0x4d0>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Prev_Vol_Counter = Vol_Counter;
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <vUpdate_Screen_Handler+0x4d8>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		Prev_Perc = perc;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
		Prev_Brightness = Brightness;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24

		vTaskDelay(10);
 8005fb4:	200a      	movs	r0, #10
 8005fb6:	f7fd f947 	bl	8003248 <vTaskDelay>
	for (;;) {
 8005fba:	e5aa      	b.n	8005b12 <vUpdate_Screen_Handler+0x26>
 8005fbc:	200047c9 	.word	0x200047c9
 8005fc0:	20000060 	.word	0x20000060
 8005fc4:	20000068 	.word	0x20000068
 8005fc8:	08009d74 	.word	0x08009d74
 8005fcc:	20004800 	.word	0x20004800
 8005fd0:	200047fc 	.word	0x200047fc

08005fd4 <vMP3_Player_Handler>:

	}
}
void vMP3_Player_Handler(void *params) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
	uint8_t prev_busy = BSY;
 8005fdc:	4b67      	ldr	r3, [pc, #412]	; (800617c <vMP3_Player_Handler+0x1a8>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	75fb      	strb	r3, [r7, #23]
	for (;;) {
		EventBits_t suspend = xEventGroupWaitBits(MenuEventGroup, Menu_Trigger,
 8005fe2:	4b67      	ldr	r3, [pc, #412]	; (8006180 <vMP3_Player_Handler+0x1ac>)
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	2101      	movs	r1, #1
 8005ff0:	f7fc fadc 	bl	80025ac <xEventGroupWaitBits>
 8005ff4:	6138      	str	r0, [r7, #16]
		pdFALSE, pdFALSE, 0);
		if (suspend & Menu_Trigger) {
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <vMP3_Player_Handler+0x32>
			vTaskSuspend(NULL);
 8006000:	2000      	movs	r0, #0
 8006002:	f7fd f945 	bl	8003290 <vTaskSuspend>
		}

		if (suspend & MP3_Resume) {
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <vMP3_Player_Handler+0x60>
			HAL_DF_SpecifyTrack(Slide_Counter);
 8006010:	4b5c      	ldr	r3, [pc, #368]	; (8006184 <vMP3_Player_Handler+0x1b0>)
 8006012:	f993 3000 	ldrsb.w	r3, [r3]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff f83d 	bl	8005098 <HAL_DF_SpecifyTrack>
			Track_Counter = Slide_Counter;
 800601e:	4b59      	ldr	r3, [pc, #356]	; (8006184 <vMP3_Player_Handler+0x1b0>)
 8006020:	f993 2000 	ldrsb.w	r2, [r3]
 8006024:	4b58      	ldr	r3, [pc, #352]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 8006026:	701a      	strb	r2, [r3, #0]
			xEventGroupClearBits(MenuEventGroup, MP3_Resume);
 8006028:	4b55      	ldr	r3, [pc, #340]	; (8006180 <vMP3_Player_Handler+0x1ac>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2108      	movs	r1, #8
 800602e:	4618      	mov	r0, r3
 8006030:	f7fc fb46 	bl	80026c0 <xEventGroupClearBits>
		}
		prev_busy = BSY;
 8006034:	4b51      	ldr	r3, [pc, #324]	; (800617c <vMP3_Player_Handler+0x1a8>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	75fb      	strb	r3, [r7, #23]
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 800603a:	2140      	movs	r1, #64	; 0x40
 800603c:	4853      	ldr	r0, [pc, #332]	; (800618c <vMP3_Player_Handler+0x1b8>)
 800603e:	f7fb fbd6 	bl	80017ee <MCAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <vMP3_Player_Handler+0x7c>
			BSY = 1;
 8006048:	4b4c      	ldr	r3, [pc, #304]	; (800617c <vMP3_Player_Handler+0x1a8>)
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e002      	b.n	8006056 <vMP3_Player_Handler+0x82>
		} else {
			BSY = 0;
 8006050:	4b4a      	ldr	r3, [pc, #296]	; (800617c <vMP3_Player_Handler+0x1a8>)
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
		}

		if (prev_busy != BSY) {
 8006056:	4b49      	ldr	r3, [pc, #292]	; (800617c <vMP3_Player_Handler+0x1a8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	7dfa      	ldrb	r2, [r7, #23]
 800605c:	429a      	cmp	r2, r3
 800605e:	d008      	beq.n	8006072 <vMP3_Player_Handler+0x9e>
			xEventGroupSetBits(buttonEventGroup, BUTTON_PP_BIT);
 8006060:	4b4b      	ldr	r3, [pc, #300]	; (8006190 <vMP3_Player_Handler+0x1bc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2104      	movs	r1, #4
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc fb44 	bl	80026f4 <xEventGroupSetBits>
			smphrPlaceHolder = 1;
 800606c:	4b49      	ldr	r3, [pc, #292]	; (8006194 <vMP3_Player_Handler+0x1c0>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
		}

		EventBits_t bits = xEventGroupWaitBits(buttonEventGroup_M,
 8006072:	4b49      	ldr	r3, [pc, #292]	; (8006198 <vMP3_Player_Handler+0x1c4>)
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	2301      	movs	r3, #1
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	2200      	movs	r2, #0
 800607e:	2107      	movs	r1, #7
 8006080:	f7fc fa94 	bl	80025ac <xEventGroupWaitBits>
 8006084:	60f8      	str	r0, [r7, #12]
		BUTTON_ACT_BIT_M | BUTTON_UP_BIT_M | BUTTON_DOWN_BIT_M,
		pdFALSE, pdFALSE, 1);

		if (bits & BUTTON_ACT_BIT_M) {
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d058      	beq.n	8006142 <vMP3_Player_Handler+0x16e>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_ACT_BIT_M);
 8006090:	4b41      	ldr	r3, [pc, #260]	; (8006198 <vMP3_Player_Handler+0x1c4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f7fc fb12 	bl	80026c0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 800609c:	4b3f      	ldr	r3, [pc, #252]	; (800619c <vMP3_Player_Handler+0x1c8>)
 800609e:	f993 3000 	ldrsb.w	r3, [r3]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <vMP3_Player_Handler+0xea>
				HAL_DF_Previous();
 80060a6:	f7fe ffd5 	bl	8005054 <HAL_DF_Previous>
				Track_Counter--;
 80060aa:	4b37      	ldr	r3, [pc, #220]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 80060ac:	f993 3000 	ldrsb.w	r3, [r3]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	b25a      	sxtb	r2, r3
 80060b8:	4b33      	ldr	r3, [pc, #204]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e030      	b.n	8006120 <vMP3_Player_Handler+0x14c>
				//update_track = 1;
			}

			else if (Menu_Counter == 2) {
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <vMP3_Player_Handler+0x1c8>)
 80060c0:	f993 3000 	ldrsb.w	r3, [r3]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d10b      	bne.n	80060e0 <vMP3_Player_Handler+0x10c>
				HAL_DF_Next();
 80060c8:	f7fe ffb2 	bl	8005030 <HAL_DF_Next>
				Track_Counter++;
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 80060ce:	f993 3000 	ldrsb.w	r3, [r3]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	b25a      	sxtb	r2, r3
 80060da:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e01f      	b.n	8006120 <vMP3_Player_Handler+0x14c>
				//update_track = 1;
			} else if (Menu_Counter == 1) {
 80060e0:	4b2e      	ldr	r3, [pc, #184]	; (800619c <vMP3_Player_Handler+0x1c8>)
 80060e2:	f993 3000 	ldrsb.w	r3, [r3]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d109      	bne.n	80060fe <vMP3_Player_Handler+0x12a>
				if (BSY) {
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <vMP3_Player_Handler+0x1a8>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <vMP3_Player_Handler+0x124>
					HAL_DF_Pause();
 80060f2:	f7fe ffa6 	bl	8005042 <HAL_DF_Pause>
 80060f6:	e013      	b.n	8006120 <vMP3_Player_Handler+0x14c>
				} else {
					HAL_DF_Playback();
 80060f8:	f7fe ffb5 	bl	8005066 <HAL_DF_Playback>
 80060fc:	e010      	b.n	8006120 <vMP3_Player_Handler+0x14c>
				}
			} else if (Menu_Counter == 3) {
 80060fe:	4b27      	ldr	r3, [pc, #156]	; (800619c <vMP3_Player_Handler+0x1c8>)
 8006100:	f993 3000 	ldrsb.w	r3, [r3]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d10b      	bne.n	8006120 <vMP3_Player_Handler+0x14c>
				xEventGroupSetBits(MenuEventGroup, Menu_Trigger);
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <vMP3_Player_Handler+0x1ac>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f7fc faf0 	bl	80026f4 <xEventGroupSetBits>
				xEventGroupSetBits(MenuEventGroup, Menu_First);
 8006114:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <vMP3_Player_Handler+0x1ac>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2102      	movs	r1, #2
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc faea 	bl	80026f4 <xEventGroupSetBits>
			}

			if (Track_Counter < 0) {
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 8006122:	f993 3000 	ldrsb.w	r3, [r3]
 8006126:	2b00      	cmp	r3, #0
 8006128:	da03      	bge.n	8006132 <vMP3_Player_Handler+0x15e>
				Track_Counter = MAX_TRACK_NUM - 1;
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 800612c:	2209      	movs	r2, #9
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e007      	b.n	8006142 <vMP3_Player_Handler+0x16e>
			} else if (Track_Counter > MAX_TRACK_NUM - 1) {
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 8006134:	f993 3000 	ldrsb.w	r3, [r3]
 8006138:	2b09      	cmp	r3, #9
 800613a:	dd02      	ble.n	8006142 <vMP3_Player_Handler+0x16e>
				Track_Counter = 0;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <vMP3_Player_Handler+0x1b4>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
			}
		}

		if (bits & (BUTTON_DOWN_BIT_M | BUTTON_UP_BIT_M)) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0306 	and.w	r3, r3, #6
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <vMP3_Player_Handler+0x19e>
			HAL_DF_SpecifyVolume(Vol_Counter);
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <vMP3_Player_Handler+0x1cc>)
 800614e:	f993 3000 	ldrsb.w	r3, [r3]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe ff8f 	bl	8005078 <HAL_DF_SpecifyVolume>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <vMP3_Player_Handler+0x1c4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f7fc faad 	bl	80026c0 <xEventGroupClearBits>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <vMP3_Player_Handler+0x1c4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2104      	movs	r1, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fc faa7 	bl	80026c0 <xEventGroupClearBits>
		}
		vTaskDelay(20);
 8006172:	2014      	movs	r0, #20
 8006174:	f7fd f868 	bl	8003248 <vTaskDelay>
	for (;;) {
 8006178:	e733      	b.n	8005fe2 <vMP3_Player_Handler+0xe>
 800617a:	bf00      	nop
 800617c:	200047d0 	.word	0x200047d0
 8006180:	200047f4 	.word	0x200047f4
 8006184:	200047ca 	.word	0x200047ca
 8006188:	200047c9 	.word	0x200047c9
 800618c:	40010c00 	.word	0x40010c00
 8006190:	200047ec 	.word	0x200047ec
 8006194:	200047d1 	.word	0x200047d1
 8006198:	200047f0 	.word	0x200047f0
 800619c:	200047c8 	.word	0x200047c8
 80061a0:	20000068 	.word	0x20000068

080061a4 <vButton_Handler>:
	}
}
void vButton_Handler(void *params) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]

	for (;;) {
		EventBits_t suspend = xEventGroupWaitBits(MenuEventGroup, Menu_Trigger,
 80061ac:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <vButton_Handler+0x22c>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	2101      	movs	r1, #1
 80061ba:	f7fc f9f7 	bl	80025ac <xEventGroupWaitBits>
 80061be:	60f8      	str	r0, [r7, #12]
		pdFALSE, pdFALSE, 0);
		if (suspend & Menu_Trigger) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04e      	beq.n	8006268 <vButton_Handler+0xc4>
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80061ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061ce:	4881      	ldr	r0, [pc, #516]	; (80063d4 <vButton_Handler+0x230>)
 80061d0:	f7fb fb0d 	bl	80017ee <MCAL_GPIO_ReadPin>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10e      	bne.n	80061f8 <vButton_Handler+0x54>
				xEventGroupSetBits(buttonEventGroup, BUTTON_UP_BIT);
 80061da:	4b7f      	ldr	r3, [pc, #508]	; (80063d8 <vButton_Handler+0x234>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2108      	movs	r1, #8
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fc fa87 	bl	80026f4 <xEventGroupSetBits>
				Slide_Counter++;
 80061e6:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <vButton_Handler+0x238>)
 80061e8:	f993 3000 	ldrsb.w	r3, [r3]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	b25a      	sxtb	r2, r3
 80061f4:	4b79      	ldr	r3, [pc, #484]	; (80063dc <vButton_Handler+0x238>)
 80061f6:	701a      	strb	r2, [r3, #0]
			}
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80061f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061fc:	4875      	ldr	r0, [pc, #468]	; (80063d4 <vButton_Handler+0x230>)
 80061fe:	f7fb faf6 	bl	80017ee <MCAL_GPIO_ReadPin>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10e      	bne.n	8006226 <vButton_Handler+0x82>
				xEventGroupSetBits(buttonEventGroup, BUTTON_DOWN_BIT);
 8006208:	4b73      	ldr	r3, [pc, #460]	; (80063d8 <vButton_Handler+0x234>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2110      	movs	r1, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc fa70 	bl	80026f4 <xEventGroupSetBits>
				Slide_Counter--;
 8006214:	4b71      	ldr	r3, [pc, #452]	; (80063dc <vButton_Handler+0x238>)
 8006216:	f993 3000 	ldrsb.w	r3, [r3]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	b25a      	sxtb	r2, r3
 8006222:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <vButton_Handler+0x238>)
 8006224:	701a      	strb	r2, [r3, #0]
			}
			if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8006226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622a:	486d      	ldr	r0, [pc, #436]	; (80063e0 <vButton_Handler+0x23c>)
 800622c:	f7fb fadf 	bl	80017ee <MCAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <vButton_Handler+0x9e>
				xEventGroupSetBits(MenuEventGroup, Menu_Finish);
 8006236:	4b66      	ldr	r3, [pc, #408]	; (80063d0 <vButton_Handler+0x22c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2104      	movs	r1, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fc fa59 	bl	80026f4 <xEventGroupSetBits>
			}

			if (Slide_Counter > MAX_TRACK_NUM - 1) {
 8006242:	4b66      	ldr	r3, [pc, #408]	; (80063dc <vButton_Handler+0x238>)
 8006244:	f993 3000 	ldrsb.w	r3, [r3]
 8006248:	2b09      	cmp	r3, #9
 800624a:	dd03      	ble.n	8006254 <vButton_Handler+0xb0>
				Slide_Counter = 0;
 800624c:	4b63      	ldr	r3, [pc, #396]	; (80063dc <vButton_Handler+0x238>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	e0b8      	b.n	80063c6 <vButton_Handler+0x222>
			} else if (Slide_Counter < 0) {
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <vButton_Handler+0x238>)
 8006256:	f993 3000 	ldrsb.w	r3, [r3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f280 80b3 	bge.w	80063c6 <vButton_Handler+0x222>
				Slide_Counter = MAX_TRACK_NUM - 1;
 8006260:	4b5e      	ldr	r3, [pc, #376]	; (80063dc <vButton_Handler+0x238>)
 8006262:	2209      	movs	r2, #9
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e0ae      	b.n	80063c6 <vButton_Handler+0x222>
			}
		} else {
			if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	485d      	ldr	r0, [pc, #372]	; (80063e0 <vButton_Handler+0x23c>)
 800626c:	f7fb fabf 	bl	80017ee <MCAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10e      	bne.n	8006294 <vButton_Handler+0xf0>
				xEventGroupSetBits(buttonEventGroup, BUTTON_FOR_BIT);
 8006276:	4b58      	ldr	r3, [pc, #352]	; (80063d8 <vButton_Handler+0x234>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f7fc fa39 	bl	80026f4 <xEventGroupSetBits>
				Menu_Counter++;
 8006282:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <vButton_Handler+0x240>)
 8006284:	f993 3000 	ldrsb.w	r3, [r3]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	3301      	adds	r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	b25a      	sxtb	r2, r3
 8006290:	4b54      	ldr	r3, [pc, #336]	; (80063e4 <vButton_Handler+0x240>)
 8006292:	701a      	strb	r2, [r3, #0]
			}
			if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8006294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006298:	4851      	ldr	r0, [pc, #324]	; (80063e0 <vButton_Handler+0x23c>)
 800629a:	f7fb faa8 	bl	80017ee <MCAL_GPIO_ReadPin>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <vButton_Handler+0x10c>
				xEventGroupSetBits(buttonEventGroup_M, BUTTON_ACT_BIT_M);
 80062a4:	4b50      	ldr	r3, [pc, #320]	; (80063e8 <vButton_Handler+0x244>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fc fa22 	bl	80026f4 <xEventGroupSetBits>
			}
			if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 80062b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062b4:	484a      	ldr	r0, [pc, #296]	; (80063e0 <vButton_Handler+0x23c>)
 80062b6:	f7fb fa9a 	bl	80017ee <MCAL_GPIO_ReadPin>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10e      	bne.n	80062de <vButton_Handler+0x13a>
				xEventGroupSetBits(buttonEventGroup, BUTTON_BACK_BIT);
 80062c0:	4b45      	ldr	r3, [pc, #276]	; (80063d8 <vButton_Handler+0x234>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc fa14 	bl	80026f4 <xEventGroupSetBits>
				Menu_Counter--;
 80062cc:	4b45      	ldr	r3, [pc, #276]	; (80063e4 <vButton_Handler+0x240>)
 80062ce:	f993 3000 	ldrsb.w	r3, [r3]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	b25a      	sxtb	r2, r3
 80062da:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <vButton_Handler+0x240>)
 80062dc:	701a      	strb	r2, [r3, #0]
			}
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80062de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062e2:	483c      	ldr	r0, [pc, #240]	; (80063d4 <vButton_Handler+0x230>)
 80062e4:	f7fb fa83 	bl	80017ee <MCAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d114      	bne.n	8006318 <vButton_Handler+0x174>
				xEventGroupSetBits(buttonEventGroup, BUTTON_UP_BIT);
 80062ee:	4b3a      	ldr	r3, [pc, #232]	; (80063d8 <vButton_Handler+0x234>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2108      	movs	r1, #8
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fc f9fd 	bl	80026f4 <xEventGroupSetBits>
				xEventGroupSetBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 80062fa:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <vButton_Handler+0x244>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2102      	movs	r1, #2
 8006300:	4618      	mov	r0, r3
 8006302:	f7fc f9f7 	bl	80026f4 <xEventGroupSetBits>
				Vol_Counter++;
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <vButton_Handler+0x248>)
 8006308:	f993 3000 	ldrsb.w	r3, [r3]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	3301      	adds	r3, #1
 8006310:	b2db      	uxtb	r3, r3
 8006312:	b25a      	sxtb	r2, r3
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <vButton_Handler+0x248>)
 8006316:	701a      	strb	r2, [r3, #0]
			}
			if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8006318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800631c:	482d      	ldr	r0, [pc, #180]	; (80063d4 <vButton_Handler+0x230>)
 800631e:	f7fb fa66 	bl	80017ee <MCAL_GPIO_ReadPin>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d114      	bne.n	8006352 <vButton_Handler+0x1ae>
				xEventGroupSetBits(buttonEventGroup, BUTTON_DOWN_BIT);
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <vButton_Handler+0x234>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2110      	movs	r1, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f7fc f9e0 	bl	80026f4 <xEventGroupSetBits>
				xEventGroupSetBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 8006334:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <vButton_Handler+0x244>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2104      	movs	r1, #4
 800633a:	4618      	mov	r0, r3
 800633c:	f7fc f9da 	bl	80026f4 <xEventGroupSetBits>
				Vol_Counter--;
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <vButton_Handler+0x248>)
 8006342:	f993 3000 	ldrsb.w	r3, [r3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	b25a      	sxtb	r2, r3
 800634e:	4b27      	ldr	r3, [pc, #156]	; (80063ec <vButton_Handler+0x248>)
 8006350:	701a      	strb	r2, [r3, #0]
			}

			// Sliding Constraint
			if (Menu_Counter < 0) {
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <vButton_Handler+0x240>)
 8006354:	f993 3000 	ldrsb.w	r3, [r3]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da03      	bge.n	8006364 <vButton_Handler+0x1c0>
				Menu_Counter = 2;
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <vButton_Handler+0x240>)
 800635e:	2202      	movs	r2, #2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e007      	b.n	8006374 <vButton_Handler+0x1d0>
			} else if (Menu_Counter > 3) {
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <vButton_Handler+0x240>)
 8006366:	f993 3000 	ldrsb.w	r3, [r3]
 800636a:	2b03      	cmp	r3, #3
 800636c:	dd02      	ble.n	8006374 <vButton_Handler+0x1d0>
				Menu_Counter = 0;
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <vButton_Handler+0x240>)
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
			}

			//Volume Constraint
			if (Vol_Counter < 0) {
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <vButton_Handler+0x248>)
 8006376:	f993 3000 	ldrsb.w	r3, [r3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da0f      	bge.n	800639e <vButton_Handler+0x1fa>
				Vol_Counter = 0;
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <vButton_Handler+0x248>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
				xEventGroupClearBits(buttonEventGroup, BUTTON_DOWN_BIT);
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <vButton_Handler+0x234>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2110      	movs	r1, #16
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc f998 	bl	80026c0 <xEventGroupClearBits>
				xEventGroupClearBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <vButton_Handler+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2104      	movs	r1, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fc f992 	bl	80026c0 <xEventGroupClearBits>
 800639c:	e013      	b.n	80063c6 <vButton_Handler+0x222>
			} else if (Vol_Counter > 30) {
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <vButton_Handler+0x248>)
 80063a0:	f993 3000 	ldrsb.w	r3, [r3]
 80063a4:	2b1e      	cmp	r3, #30
 80063a6:	dd0e      	ble.n	80063c6 <vButton_Handler+0x222>
				Vol_Counter = 30;
 80063a8:	4b10      	ldr	r3, [pc, #64]	; (80063ec <vButton_Handler+0x248>)
 80063aa:	221e      	movs	r2, #30
 80063ac:	701a      	strb	r2, [r3, #0]
				xEventGroupClearBits(buttonEventGroup, BUTTON_UP_BIT);
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <vButton_Handler+0x234>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2108      	movs	r1, #8
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fc f983 	bl	80026c0 <xEventGroupClearBits>
				xEventGroupClearBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <vButton_Handler+0x244>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fc f97d 	bl	80026c0 <xEventGroupClearBits>
			}

		}
		// Mainly to avoid bouncing
		vTaskDelay(200);
 80063c6:	20c8      	movs	r0, #200	; 0xc8
 80063c8:	f7fc ff3e 	bl	8003248 <vTaskDelay>
	for (;;) {
 80063cc:	e6ee      	b.n	80061ac <vButton_Handler+0x8>
 80063ce:	bf00      	nop
 80063d0:	200047f4 	.word	0x200047f4
 80063d4:	40010800 	.word	0x40010800
 80063d8:	200047ec 	.word	0x200047ec
 80063dc:	200047ca 	.word	0x200047ca
 80063e0:	40010c00 	.word	0x40010c00
 80063e4:	200047c8 	.word	0x200047c8
 80063e8:	200047f0 	.word	0x200047f0
 80063ec:	20000068 	.word	0x20000068

080063f0 <vTicker_Handler>:

	}
}

void vTicker_Handler(void *params) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
	uint8_t prev_track = Track_Counter;
 80063f8:	4b50      	ldr	r3, [pc, #320]	; (800653c <vTicker_Handler+0x14c>)
 80063fa:	f993 3000 	ldrsb.w	r3, [r3]
 80063fe:	77fb      	strb	r3, [r7, #31]
	uint8_t prev_state = BSY;
 8006400:	4b4f      	ldr	r3, [pc, #316]	; (8006540 <vTicker_Handler+0x150>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	77bb      	strb	r3, [r7, #30]
	float perc = 0;
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
	float tick;

	for (;;) {
		if (smphrPlaceHolder == 1)  // FLAG TO ASSUME WORKING
 800640c:	4b4d      	ldr	r3, [pc, #308]	; (8006544 <vTicker_Handler+0x154>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 8087 	bne.w	8006524 <vTicker_Handler+0x134>
				{
			EventBits_t suspend = xEventGroupWaitBits(MenuEventGroup,
 8006416:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <vTicker_Handler+0x158>)
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	2200      	movs	r2, #0
 8006422:	2101      	movs	r1, #1
 8006424:	f7fc f8c2 	bl	80025ac <xEventGroupWaitBits>
 8006428:	61b8      	str	r0, [r7, #24]
			Menu_Trigger,
			pdFALSE, pdFALSE, 0);

			if (suspend & Menu_Trigger) {
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <vTicker_Handler+0x5c>
				Ticker_Stop();
 8006434:	f7fb fe07 	bl	8002046 <Ticker_Stop>
				Ticker_Reset_Count();
 8006438:	f7fb fe14 	bl	8002064 <Ticker_Reset_Count>

				smphrPlaceHolder = 0;
 800643c:	4b41      	ldr	r3, [pc, #260]	; (8006544 <vTicker_Handler+0x154>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(xTicker_Handle);
 8006442:	4b42      	ldr	r3, [pc, #264]	; (800654c <vTicker_Handler+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fc ff22 	bl	8003290 <vTaskSuspend>
			}

			tick = Get_ms();
 800644c:	f7fb fe1a 	bl	8002084 <Get_ms>
 8006450:	4603      	mov	r3, r0
 8006452:	4618      	mov	r0, r3
 8006454:	f7fa fbfe 	bl	8000c54 <__aeabi_ui2f>
 8006458:	4603      	mov	r3, r0
 800645a:	617b      	str	r3, [r7, #20]
			// CASE 1 STARTUP
			if (tick == 0 && BSY) // ITS THE FIRST TIME ACTIVATING --> NEW TRACK / STARTUP
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	6978      	ldr	r0, [r7, #20]
 8006462:	f7fa fde3 	bl	800102c <__aeabi_fcmpeq>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <vTicker_Handler+0x88>
 800646c:	4b34      	ldr	r3, [pc, #208]	; (8006540 <vTicker_Handler+0x150>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <vTicker_Handler+0x88>
					{
				// I ONLY WANT TO START THE TICKER ONCE
				Ticker_Start();
 8006474:	f7fb fdd9 	bl	800202a <Ticker_Start>
			}

			// CASE 2 TRACK CHANGE
			if (prev_track != Track_Counter) {
 8006478:	7ffb      	ldrb	r3, [r7, #31]
 800647a:	4a30      	ldr	r2, [pc, #192]	; (800653c <vTicker_Handler+0x14c>)
 800647c:	f992 2000 	ldrsb.w	r2, [r2]
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <vTicker_Handler+0x9e>
				Ticker_Stop();
 8006484:	f7fb fddf 	bl	8002046 <Ticker_Stop>
				Ticker_Reset_Count();
 8006488:	f7fb fdec 	bl	8002064 <Ticker_Reset_Count>
 800648c:	e00d      	b.n	80064aa <vTicker_Handler+0xba>
			}

			// CASE 3 SAME TRACK -> CHECK STATE
			else {
				if (!BSY) {
 800648e:	4b2c      	ldr	r3, [pc, #176]	; (8006540 <vTicker_Handler+0x150>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <vTicker_Handler+0xac>
					Ticker_Stop();
 8006496:	f7fb fdd6 	bl	8002046 <Ticker_Stop>
 800649a:	e006      	b.n	80064aa <vTicker_Handler+0xba>
				} else if (prev_state != BSY) {
 800649c:	4b28      	ldr	r3, [pc, #160]	; (8006540 <vTicker_Handler+0x150>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	7fba      	ldrb	r2, [r7, #30]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d001      	beq.n	80064aa <vTicker_Handler+0xba>
					Ticker_Start();
 80064a6:	f7fb fdc0 	bl	800202a <Ticker_Start>
				}
			}
			float us = duration[Track_Counter] * 1000;
 80064aa:	4b24      	ldr	r3, [pc, #144]	; (800653c <vTicker_Handler+0x14c>)
 80064ac:	f993 3000 	ldrsb.w	r3, [r3]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b27      	ldr	r3, [pc, #156]	; (8006550 <vTicker_Handler+0x160>)
 80064b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fa fbcb 	bl	8000c5c <__aeabi_i2f>
 80064c6:	4603      	mov	r3, r0
 80064c8:	613b      	str	r3, [r7, #16]
			perc = (tick / us) * 100;
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f7fa fccd 	bl	8000e6c <__aeabi_fdiv>
 80064d2:	4603      	mov	r3, r0
 80064d4:	491f      	ldr	r1, [pc, #124]	; (8006554 <vTicker_Handler+0x164>)
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fa fc14 	bl	8000d04 <__aeabi_fmul>
 80064dc:	4603      	mov	r3, r0
 80064de:	60fb      	str	r3, [r7, #12]

			// CASE 4 FINISHED TRACK
			if (perc >= 100) {
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	491c      	ldr	r1, [pc, #112]	; (8006554 <vTicker_Handler+0x164>)
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fa fdbf 	bl	8001068 <__aeabi_fcmpge>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d011      	beq.n	8006514 <vTicker_Handler+0x124>
				perc = 0;
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
				// QUEUE SEND
				xQueueSend(xProgressQueue, (void* ) &perc, 0);
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <vTicker_Handler+0x168>)
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	f107 010c 	add.w	r1, r7, #12
 80064fe:	2300      	movs	r3, #0
 8006500:	2200      	movs	r2, #0
 8006502:	f7fc fb07 	bl	8002b14 <xQueueGenericSend>
				Ticker_Stop();
 8006506:	f7fb fd9e 	bl	8002046 <Ticker_Stop>
				Ticker_Reset_Count();
 800650a:	f7fb fdab 	bl	8002064 <Ticker_Reset_Count>
				// TASK NO LONGER NEEDED
				smphrPlaceHolder = 0;
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <vTicker_Handler+0x154>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
			}
			// QUEUE SEND
			xQueueSend(xProgressQueue, (void* ) &perc, 0);
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <vTicker_Handler+0x168>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	f107 010c 	add.w	r1, r7, #12
 800651c:	2300      	movs	r3, #0
 800651e:	2200      	movs	r2, #0
 8006520:	f7fc faf8 	bl	8002b14 <xQueueGenericSend>
		}
		prev_track = Track_Counter;
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <vTicker_Handler+0x14c>)
 8006526:	f993 3000 	ldrsb.w	r3, [r3]
 800652a:	77fb      	strb	r3, [r7, #31]
		prev_state = BSY;
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <vTicker_Handler+0x150>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	77bb      	strb	r3, [r7, #30]
		vTaskDelay(200);
 8006532:	20c8      	movs	r0, #200	; 0xc8
 8006534:	f7fc fe88 	bl	8003248 <vTaskDelay>
		if (smphrPlaceHolder == 1)  // FLAG TO ASSUME WORKING
 8006538:	e768      	b.n	800640c <vTicker_Handler+0x1c>
 800653a:	bf00      	nop
 800653c:	200047c9 	.word	0x200047c9
 8006540:	200047d0 	.word	0x200047d0
 8006544:	200047d1 	.word	0x200047d1
 8006548:	200047f4 	.word	0x200047f4
 800654c:	200047e0 	.word	0x200047e0
 8006550:	08009d8c 	.word	0x08009d8c
 8006554:	42c80000 	.word	0x42c80000
 8006558:	20004800 	.word	0x20004800

0800655c <vBrightness_Handler>:
	}
}

void vBrightness_Handler(void *params) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	uint32_t val;
	for (;;) {
		if (MCAL_ADC_EOC(ADC1)) {
 8006564:	4816      	ldr	r0, [pc, #88]	; (80065c0 <vBrightness_Handler+0x64>)
 8006566:	f7fa fef5 	bl	8001354 <MCAL_ADC_EOC>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d022      	beq.n	80065b6 <vBrightness_Handler+0x5a>
			val = MCAL_ADC_Read(ADC1, GPIOA, GPIO_PIN_0);
 8006570:	2201      	movs	r2, #1
 8006572:	4914      	ldr	r1, [pc, #80]	; (80065c4 <vBrightness_Handler+0x68>)
 8006574:	4812      	ldr	r0, [pc, #72]	; (80065c0 <vBrightness_Handler+0x64>)
 8006576:	f7fa ff01 	bl	800137c <MCAL_ADC_Read>
 800657a:	4603      	mov	r3, r0
 800657c:	60fb      	str	r3, [r7, #12]
			if (val > 3860)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f640 7214 	movw	r2, #3860	; 0xf14
 8006584:	4293      	cmp	r3, r2
 8006586:	d902      	bls.n	800658e <vBrightness_Handler+0x32>
				val = 3860;
 8006588:	f640 7314 	movw	r3, #3860	; 0xf14
 800658c:	60fb      	str	r3, [r7, #12]
			val = (val - 0) * (50 - 10) / (3860 - 0) + 10;
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	461a      	mov	r2, r3
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <vBrightness_Handler+0x6c>)
 800659c:	fba3 2302 	umull	r2, r3, r3, r2
 80065a0:	099b      	lsrs	r3, r3, #6
 80065a2:	330a      	adds	r3, #10
 80065a4:	60fb      	str	r3, [r7, #12]
			//queue send
			xQueueSend(xBrightnessQueue, (void* )&val, 0);
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <vBrightness_Handler+0x70>)
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f107 010c 	add.w	r1, r7, #12
 80065ae:	2300      	movs	r3, #0
 80065b0:	2200      	movs	r2, #0
 80065b2:	f7fc faaf 	bl	8002b14 <xQueueGenericSend>
		}
		vTaskDelay(20);
 80065b6:	2014      	movs	r0, #20
 80065b8:	f7fc fe46 	bl	8003248 <vTaskDelay>
		if (MCAL_ADC_EOC(ADC1)) {
 80065bc:	e7d2      	b.n	8006564 <vBrightness_Handler+0x8>
 80065be:	bf00      	nop
 80065c0:	40012400 	.word	0x40012400
 80065c4:	40010800 	.word	0x40010800
 80065c8:	043e9b75 	.word	0x043e9b75
 80065cc:	200047fc 	.word	0x200047fc

080065d0 <vMenu_Handler>:
	}
}

void vMenu_Handler(void *params) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af04      	add	r7, sp, #16
 80065d6:	6078      	str	r0, [r7, #4]

	uint8_t Prev_Slide_Counter = Slide_Counter;
 80065d8:	4b81      	ldr	r3, [pc, #516]	; (80067e0 <vMenu_Handler+0x210>)
 80065da:	f993 3000 	ldrsb.w	r3, [r3]
 80065de:	75fb      	strb	r3, [r7, #23]
	uint8_t pages = MAX_TRACK_NUM / 5;
 80065e0:	2302      	movs	r3, #2
 80065e2:	757b      	strb	r3, [r7, #21]
	uint8_t current_page = 1;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75bb      	strb	r3, [r7, #22]
	for (;;) {

		EventBits_t suspend = xEventGroupWaitBits(MenuEventGroup,
 80065e8:	4b7e      	ldr	r3, [pc, #504]	; (80067e4 <vMenu_Handler+0x214>)
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	2200      	movs	r2, #0
 80065f4:	2107      	movs	r1, #7
 80065f6:	f7fb ffd9 	bl	80025ac <xEventGroupWaitBits>
 80065fa:	6138      	str	r0, [r7, #16]
		Menu_Trigger | Menu_First | Menu_Finish,
		pdFALSE, pdFALSE, 0);
		EventBits_t bits = xEventGroupWaitBits(buttonEventGroup,
 80065fc:	4b7a      	ldr	r3, [pc, #488]	; (80067e8 <vMenu_Handler+0x218>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	2118      	movs	r1, #24
 800660a:	f7fb ffcf 	bl	80025ac <xEventGroupWaitBits>
 800660e:	60f8      	str	r0, [r7, #12]
		BUTTON_UP_BIT | BUTTON_DOWN_BIT,
		pdFALSE, pdFALSE, 0);
		if (suspend & Menu_Finish) {
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d037      	beq.n	800668a <vMenu_Handler+0xba>

			Track_Counter = Slide_Counter;
 800661a:	4b71      	ldr	r3, [pc, #452]	; (80067e0 <vMenu_Handler+0x210>)
 800661c:	f993 2000 	ldrsb.w	r2, [r3]
 8006620:	4b72      	ldr	r3, [pc, #456]	; (80067ec <vMenu_Handler+0x21c>)
 8006622:	701a      	strb	r2, [r3, #0]

			xEventGroupSetBits(MenuEventGroup, MP3_Resume);
 8006624:	4b6f      	ldr	r3, [pc, #444]	; (80067e4 <vMenu_Handler+0x214>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2108      	movs	r1, #8
 800662a:	4618      	mov	r0, r3
 800662c:	f7fc f862 	bl	80026f4 <xEventGroupSetBits>
			xEventGroupSetBits(MenuEventGroup, Screen_Resume);
 8006630:	4b6c      	ldr	r3, [pc, #432]	; (80067e4 <vMenu_Handler+0x214>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2110      	movs	r1, #16
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc f85c 	bl	80026f4 <xEventGroupSetBits>

			// for pause play refresh
			xEventGroupSetBits(buttonEventGroup, BUTTON_PP_BIT);
 800663c:	4b6a      	ldr	r3, [pc, #424]	; (80067e8 <vMenu_Handler+0x218>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2104      	movs	r1, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f7fc f856 	bl	80026f4 <xEventGroupSetBits>

			// for volume
			xEventGroupClearBits(MenuEventGroup, Menu_First);
 8006648:	4b66      	ldr	r3, [pc, #408]	; (80067e4 <vMenu_Handler+0x214>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f7fc f836 	bl	80026c0 <xEventGroupClearBits>
			xEventGroupClearBits(MenuEventGroup, Menu_Finish);
 8006654:	4b63      	ldr	r3, [pc, #396]	; (80067e4 <vMenu_Handler+0x214>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2104      	movs	r1, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f7fc f830 	bl	80026c0 <xEventGroupClearBits>
			xEventGroupClearBits(MenuEventGroup, Menu_Trigger);
 8006660:	4b60      	ldr	r3, [pc, #384]	; (80067e4 <vMenu_Handler+0x214>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f7fc f82a 	bl	80026c0 <xEventGroupClearBits>

			vTaskResume(xUpdate_Screen_Handle);
 800666c:	4b60      	ldr	r3, [pc, #384]	; (80067f0 <vMenu_Handler+0x220>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fc febd 	bl	80033f0 <vTaskResume>
			vTaskResume(xMP3_Player_Handle);
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <vMenu_Handler+0x224>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fc feb8 	bl	80033f0 <vTaskResume>
			vTaskResume(xTicker_Handle);
 8006680:	4b5d      	ldr	r3, [pc, #372]	; (80067f8 <vMenu_Handler+0x228>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7fc feb3 	bl	80033f0 <vTaskResume>

		}
		if (suspend & Menu_Trigger) {
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 809c 	beq.w	80067ce <vMenu_Handler+0x1fe>
			if (suspend & Menu_First) {
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d028      	beq.n	80066f2 <vMenu_Handler+0x122>
				ST7735_FillScreen(ST7735_BLACK);
 80066a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80066a4:	f7fe ff72 	bl	800558c <ST7735_FillScreen>
				Slide_Counter = 0;
 80066a8:	4b4d      	ldr	r3, [pc, #308]	; (80067e0 <vMenu_Handler+0x210>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]

				// DRAW VERY FIRST 4 TRACK NAMES
				Draw_Next_Tracks(Slide_Counter);
 80066ae:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <vMenu_Handler+0x210>)
 80066b0:	f993 3000 	ldrsb.w	r3, [r3]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f9fc 	bl	8006ab4 <Draw_Next_Tracks>
				// DRAW THE H LINE SELECTOR
				Draw_Selector(Slide_Counter);
 80066bc:	4b48      	ldr	r3, [pc, #288]	; (80067e0 <vMenu_Handler+0x210>)
 80066be:	f993 3000 	ldrsb.w	r3, [r3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fa75 	bl	8006bb4 <Draw_Selector>
				// DRAW CURRENT PAGE

				ST7735_WriteString(70, 107, "1 / 2", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80066ca:	4b4c      	ldr	r3, [pc, #304]	; (80067fc <vMenu_Handler+0x22c>)
 80066cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	9200      	str	r2, [sp, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a48      	ldr	r2, [pc, #288]	; (8006800 <vMenu_Handler+0x230>)
 80066de:	216b      	movs	r1, #107	; 0x6b
 80066e0:	2046      	movs	r0, #70	; 0x46
 80066e2:	f7fe fe96 	bl	8005412 <ST7735_WriteString>

				xEventGroupClearBits(MenuEventGroup, Menu_First);
 80066e6:	4b3f      	ldr	r3, [pc, #252]	; (80067e4 <vMenu_Handler+0x214>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2102      	movs	r1, #2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fb ffe7 	bl	80026c0 <xEventGroupClearBits>
			}
			if (bits & (BUTTON_UP_BIT | BUTTON_DOWN_BIT)) {
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f003 0318 	and.w	r3, r3, #24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d068      	beq.n	80067ce <vMenu_Handler+0x1fe>

				// CHEK CURRENT LOCATION IF ITS % 4 ERASE AND REWRITE NEXT 4 WITH SAME FUNCTION
				if (Slide_Counter % 5 == 0) {
 80066fc:	4b38      	ldr	r3, [pc, #224]	; (80067e0 <vMenu_Handler+0x210>)
 80066fe:	f993 2000 	ldrsb.w	r2, [r3]
 8006702:	4b40      	ldr	r3, [pc, #256]	; (8006804 <vMenu_Handler+0x234>)
 8006704:	fb83 1302 	smull	r1, r3, r3, r2
 8006708:	1059      	asrs	r1, r3, #1
 800670a:	17d3      	asrs	r3, r2, #31
 800670c:	1ac9      	subs	r1, r1, r3
 800670e:	460b      	mov	r3, r1
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	b25b      	sxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d141      	bne.n	80067a0 <vMenu_Handler+0x1d0>
					current_page ++;
 800671c:	7dbb      	ldrb	r3, [r7, #22]
 800671e:	3301      	adds	r3, #1
 8006720:	75bb      	strb	r3, [r7, #22]
					if(current_page > 2 )
 8006722:	7dbb      	ldrb	r3, [r7, #22]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <vMenu_Handler+0x15c>
					{
						current_page = 1;
 8006728:	2301      	movs	r3, #1
 800672a:	75bb      	strb	r3, [r7, #22]
					}
					if(current_page == 1)
 800672c:	7dbb      	ldrb	r3, [r7, #22]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d10e      	bne.n	8006750 <vMenu_Handler+0x180>
					{
						ST7735_WriteString(70, 107, "1 / 2", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8006732:	4b32      	ldr	r3, [pc, #200]	; (80067fc <vMenu_Handler+0x22c>)
 8006734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006738:	9202      	str	r2, [sp, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	9200      	str	r2, [sp, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2e      	ldr	r2, [pc, #184]	; (8006800 <vMenu_Handler+0x230>)
 8006746:	216b      	movs	r1, #107	; 0x6b
 8006748:	2046      	movs	r0, #70	; 0x46
 800674a:	f7fe fe62 	bl	8005412 <ST7735_WriteString>
 800674e:	e010      	b.n	8006772 <vMenu_Handler+0x1a2>
					}
					else if(current_page == 2)
 8006750:	7dbb      	ldrb	r3, [r7, #22]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d10d      	bne.n	8006772 <vMenu_Handler+0x1a2>
					{
						ST7735_WriteString(70, 107, "2 / 2", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8006756:	4b29      	ldr	r3, [pc, #164]	; (80067fc <vMenu_Handler+0x22c>)
 8006758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800675c:	9202      	str	r2, [sp, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	9201      	str	r2, [sp, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	9200      	str	r2, [sp, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a27      	ldr	r2, [pc, #156]	; (8006808 <vMenu_Handler+0x238>)
 800676a:	216b      	movs	r1, #107	; 0x6b
 800676c:	2046      	movs	r0, #70	; 0x46
 800676e:	f7fe fe50 	bl	8005412 <ST7735_WriteString>
					}
					// Erase Logic of tracks
					Erase_Prev_Tracks(Prev_Slide_Counter);
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 f965 	bl	8006a44 <Erase_Prev_Tracks>
					Draw_Next_Tracks(Slide_Counter);
 800677a:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <vMenu_Handler+0x210>)
 800677c:	f993 3000 	ldrsb.w	r3, [r3]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f996 	bl	8006ab4 <Draw_Next_Tracks>

					Erase_Selector(Prev_Slide_Counter);
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fa8e 	bl	8006cac <Erase_Selector>
					Draw_Selector(Slide_Counter);
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <vMenu_Handler+0x210>)
 8006792:	f993 3000 	ldrsb.w	r3, [r3]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fa0b 	bl	8006bb4 <Draw_Selector>
 800679e:	e00a      	b.n	80067b6 <vMenu_Handler+0x1e6>
				}

				// DRAW SELECTOR on new pos
				else {
					Erase_Selector(Prev_Slide_Counter);
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fa82 	bl	8006cac <Erase_Selector>
					Draw_Selector(Slide_Counter);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <vMenu_Handler+0x210>)
 80067aa:	f993 3000 	ldrsb.w	r3, [r3]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f9ff 	bl	8006bb4 <Draw_Selector>
				}

				xEventGroupClearBits(buttonEventGroup, BUTTON_UP_BIT);
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <vMenu_Handler+0x218>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2108      	movs	r1, #8
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fb ff7f 	bl	80026c0 <xEventGroupClearBits>
				xEventGroupClearBits(buttonEventGroup, BUTTON_DOWN_BIT);
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <vMenu_Handler+0x218>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2110      	movs	r1, #16
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fb ff79 	bl	80026c0 <xEventGroupClearBits>
			}

		}

		Prev_Slide_Counter = Slide_Counter;
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <vMenu_Handler+0x210>)
 80067d0:	f993 3000 	ldrsb.w	r3, [r3]
 80067d4:	75fb      	strb	r3, [r7, #23]
		vTaskDelay(10);
 80067d6:	200a      	movs	r0, #10
 80067d8:	f7fc fd36 	bl	8003248 <vTaskDelay>
	for (;;) {
 80067dc:	e704      	b.n	80065e8 <vMenu_Handler+0x18>
 80067de:	bf00      	nop
 80067e0:	200047ca 	.word	0x200047ca
 80067e4:	200047f4 	.word	0x200047f4
 80067e8:	200047ec 	.word	0x200047ec
 80067ec:	200047c9 	.word	0x200047c9
 80067f0:	200047d4 	.word	0x200047d4
 80067f4:	200047d8 	.word	0x200047d8
 80067f8:	200047e0 	.word	0x200047e0
 80067fc:	20000060 	.word	0x20000060
 8006800:	08009d78 	.word	0x08009d78
 8006804:	66666667 	.word	0x66666667
 8006808:	08009d80 	.word	0x08009d80

0800680c <Start_Screen>:

	}
}

void Start_Screen(void) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af04      	add	r7, sp, #16
	// START SCREEN
	ST7735_FillScreen(ST7735_BLACK);
 8006812:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006816:	f7fe feb9 	bl	800558c <ST7735_FillScreen>
	//BACKWARD
	fillTriangle(12, 107, 24, 95, 24, 118, ST7735_RED);
 800681a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	2376      	movs	r3, #118	; 0x76
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	2318      	movs	r3, #24
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	235f      	movs	r3, #95	; 0x5f
 800682a:	2218      	movs	r2, #24
 800682c:	216b      	movs	r1, #107	; 0x6b
 800682e:	200c      	movs	r0, #12
 8006830:	f7fe fa23 	bl	8004c7a <fillTriangle>
	fillTriangle(19, 107, 31, 95, 31, 118, ST7735_RED);
 8006834:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	2376      	movs	r3, #118	; 0x76
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	231f      	movs	r3, #31
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	235f      	movs	r3, #95	; 0x5f
 8006844:	221f      	movs	r2, #31
 8006846:	216b      	movs	r1, #107	; 0x6b
 8006848:	2013      	movs	r0, #19
 800684a:	f7fe fa16 	bl	8004c7a <fillTriangle>
	//FORWARD
	fillTriangle(114, 107, 103, 95, 103, 118, ST7735_RED);
 800684e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	2376      	movs	r3, #118	; 0x76
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	2367      	movs	r3, #103	; 0x67
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	235f      	movs	r3, #95	; 0x5f
 800685e:	2267      	movs	r2, #103	; 0x67
 8006860:	216b      	movs	r1, #107	; 0x6b
 8006862:	2072      	movs	r0, #114	; 0x72
 8006864:	f7fe fa09 	bl	8004c7a <fillTriangle>
	fillTriangle(107, 107, 96, 95, 96, 118, ST7735_RED);
 8006868:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800686c:	9302      	str	r3, [sp, #8]
 800686e:	2376      	movs	r3, #118	; 0x76
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	2360      	movs	r3, #96	; 0x60
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	235f      	movs	r3, #95	; 0x5f
 8006878:	2260      	movs	r2, #96	; 0x60
 800687a:	216b      	movs	r1, #107	; 0x6b
 800687c:	206b      	movs	r0, #107	; 0x6b
 800687e:	f7fe f9fc 	bl	8004c7a <fillTriangle>
	//PLAY
	if (BSY) {
 8006882:	4b66      	ldr	r3, [pc, #408]	; (8006a1c <Start_Screen+0x210>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d012      	beq.n	80068b0 <Start_Screen+0xa4>
		fillRect(55, 96, 4, 21, ST7735_RED);
 800688a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	2315      	movs	r3, #21
 8006892:	2204      	movs	r2, #4
 8006894:	2160      	movs	r1, #96	; 0x60
 8006896:	2037      	movs	r0, #55	; 0x37
 8006898:	f7fd ff93 	bl	80047c2 <fillRect>
		fillRect(68, 96, 4, 21, ST7735_RED);
 800689c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2315      	movs	r3, #21
 80068a4:	2204      	movs	r2, #4
 80068a6:	2160      	movs	r1, #96	; 0x60
 80068a8:	2044      	movs	r0, #68	; 0x44
 80068aa:	f7fd ff8a 	bl	80047c2 <fillRect>
 80068ae:	e00c      	b.n	80068ca <Start_Screen+0xbe>
	} else {
		fillTriangle(56, 107, 68, 95, 68, 118, ST7735_RED);
 80068b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068b4:	9302      	str	r3, [sp, #8]
 80068b6:	2376      	movs	r3, #118	; 0x76
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	2344      	movs	r3, #68	; 0x44
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	235f      	movs	r3, #95	; 0x5f
 80068c0:	2244      	movs	r2, #68	; 0x44
 80068c2:	216b      	movs	r1, #107	; 0x6b
 80068c4:	2038      	movs	r0, #56	; 0x38
 80068c6:	f7fe f9d8 	bl	8004c7a <fillTriangle>
	}

	//MENU
	fillRect(130, 94, 15, 4, ST7735_RED);
 80068ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	2304      	movs	r3, #4
 80068d2:	220f      	movs	r2, #15
 80068d4:	215e      	movs	r1, #94	; 0x5e
 80068d6:	2082      	movs	r0, #130	; 0x82
 80068d8:	f7fd ff73 	bl	80047c2 <fillRect>
	fillRect(130, 105, 15, 5, ST7735_RED);
 80068dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2305      	movs	r3, #5
 80068e4:	220f      	movs	r2, #15
 80068e6:	2169      	movs	r1, #105	; 0x69
 80068e8:	2082      	movs	r0, #130	; 0x82
 80068ea:	f7fd ff6a 	bl	80047c2 <fillRect>
	fillRect(130, 116, 15, 4, ST7735_RED);
 80068ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2304      	movs	r3, #4
 80068f6:	220f      	movs	r2, #15
 80068f8:	2174      	movs	r1, #116	; 0x74
 80068fa:	2082      	movs	r0, #130	; 0x82
 80068fc:	f7fd ff61 	bl	80047c2 <fillRect>
	//FIRST SELECTION
	drawRect(10, 92, 25, 29, ST7735_GREEN);
 8006900:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	231d      	movs	r3, #29
 8006908:	2219      	movs	r2, #25
 800690a:	215c      	movs	r1, #92	; 0x5c
 800690c:	200a      	movs	r0, #10
 800690e:	f7fe f973 	bl	8004bf8 <drawRect>
	//TRACK NAME
	ST7735_WriteString(9, 25, getTrackName(Track_Counter), Font_11x18,
 8006912:	4b43      	ldr	r3, [pc, #268]	; (8006a20 <Start_Screen+0x214>)
 8006914:	f993 3000 	ldrsb.w	r3, [r3]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fbd0 	bl	80050c0 <getTrackName>
 8006920:	4601      	mov	r1, r0
 8006922:	4b40      	ldr	r3, [pc, #256]	; (8006a24 <Start_Screen+0x218>)
 8006924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	9200      	str	r2, [sp, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	460a      	mov	r2, r1
 8006938:	2119      	movs	r1, #25
 800693a:	2009      	movs	r0, #9
 800693c:	f7fe fd69 	bl	8005412 <ST7735_WriteString>
	ST7735_RED, ST7735_BLACK);
	//PROGRESS
	drawRect(30, 85, 102, 4, ST7735_RED);
 8006940:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	2304      	movs	r3, #4
 8006948:	2266      	movs	r2, #102	; 0x66
 800694a:	2155      	movs	r1, #85	; 0x55
 800694c:	201e      	movs	r0, #30
 800694e:	f7fe f953 	bl	8004bf8 <drawRect>

	//INDICATOR BAR
	drawFastHLine(1, 23, 159, ST7735_RED);
 8006952:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006956:	229f      	movs	r2, #159	; 0x9f
 8006958:	2117      	movs	r1, #23
 800695a:	2001      	movs	r0, #1
 800695c:	f7fe f829 	bl	80049b2 <drawFastHLine>
	ST7735_WriteString(97, 5, "VOL", Font_11x18, ST7735_RED, ST7735_BLACK);
 8006960:	4b30      	ldr	r3, [pc, #192]	; (8006a24 <Start_Screen+0x218>)
 8006962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006966:	9202      	str	r2, [sp, #8]
 8006968:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800696c:	9201      	str	r2, [sp, #4]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	9200      	str	r2, [sp, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <Start_Screen+0x21c>)
 8006976:	2105      	movs	r1, #5
 8006978:	2061      	movs	r0, #97	; 0x61
 800697a:	f7fe fd4a 	bl	8005412 <ST7735_WriteString>

	char str[5];
	snprintf(str, sizeof(str), "%d", Vol_Counter);
 800697e:	4b2b      	ldr	r3, [pc, #172]	; (8006a2c <Start_Screen+0x220>)
 8006980:	f993 3000 	ldrsb.w	r3, [r3]
 8006984:	4638      	mov	r0, r7
 8006986:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <Start_Screen+0x224>)
 8006988:	2105      	movs	r1, #5
 800698a:	f001 f8b9 	bl	8007b00 <sniprintf>
	ST7735_WriteString(130, 5, str, Font_11x18, ST7735_RED, ST7735_BLACK);
 800698e:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <Start_Screen+0x218>)
 8006990:	4639      	mov	r1, r7
 8006992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006996:	9202      	str	r2, [sp, #8]
 8006998:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800699c:	9201      	str	r2, [sp, #4]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	9200      	str	r2, [sp, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	460a      	mov	r2, r1
 80069a6:	2105      	movs	r1, #5
 80069a8:	2082      	movs	r0, #130	; 0x82
 80069aa:	f7fe fd32 	bl	8005412 <ST7735_WriteString>

	//Brightness bar
	drawRect(5, 8, 52, 9, ST7735_RED);
 80069ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2309      	movs	r3, #9
 80069b6:	2234      	movs	r2, #52	; 0x34
 80069b8:	2108      	movs	r1, #8
 80069ba:	2005      	movs	r0, #5
 80069bc:	f7fe f91c 	bl	8004bf8 <drawRect>

	Brightness_Counter = MCAL_ADC_Read(ADC1, GPIOA, GPIO_PIN_0);
 80069c0:	2201      	movs	r2, #1
 80069c2:	491c      	ldr	r1, [pc, #112]	; (8006a34 <Start_Screen+0x228>)
 80069c4:	481c      	ldr	r0, [pc, #112]	; (8006a38 <Start_Screen+0x22c>)
 80069c6:	f7fa fcd9 	bl	800137c <MCAL_ADC_Read>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <Start_Screen+0x230>)
 80069ce:	6013      	str	r3, [r2, #0]
	if (Brightness_Counter > 3860)
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <Start_Screen+0x230>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f640 7214 	movw	r2, #3860	; 0xf14
 80069d8:	4293      	cmp	r3, r2
 80069da:	d903      	bls.n	80069e4 <Start_Screen+0x1d8>
		Brightness_Counter = 3860;
 80069dc:	4b17      	ldr	r3, [pc, #92]	; (8006a3c <Start_Screen+0x230>)
 80069de:	f640 7214 	movw	r2, #3860	; 0xf14
 80069e2:	601a      	str	r2, [r3, #0]
	Brightness_Counter = (Brightness_Counter - 0) * (50 - 10) / (3860 - 0) + 10;
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <Start_Screen+0x230>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	461a      	mov	r2, r3
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <Start_Screen+0x234>)
 80069f4:	fba3 2302 	umull	r2, r3, r3, r2
 80069f8:	099b      	lsrs	r3, r3, #6
 80069fa:	330a      	adds	r3, #10
 80069fc:	4a0f      	ldr	r2, [pc, #60]	; (8006a3c <Start_Screen+0x230>)
 80069fe:	6013      	str	r3, [r2, #0]

	ST7735_FillRectangle(6, 9, Brightness_Counter, 7, ST7735_WHITE);
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <Start_Screen+0x230>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2307      	movs	r3, #7
 8006a0c:	2109      	movs	r1, #9
 8006a0e:	2006      	movs	r0, #6
 8006a10:	f7fe fd4a 	bl	80054a8 <ST7735_FillRectangle>

}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200047d0 	.word	0x200047d0
 8006a20:	200047c9 	.word	0x200047c9
 8006a24:	20000060 	.word	0x20000060
 8006a28:	08009d88 	.word	0x08009d88
 8006a2c:	20000068 	.word	0x20000068
 8006a30:	08009d74 	.word	0x08009d74
 8006a34:	40010800 	.word	0x40010800
 8006a38:	40012400 	.word	0x40012400
 8006a3c:	200047cc 	.word	0x200047cc
 8006a40:	043e9b75 	.word	0x043e9b75

08006a44 <Erase_Prev_Tracks>:

uint8_t Erase_Prev_Tracks(uint8_t track) {
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]

	int i;
	for (i = track - 4; i < track + 1; i++) {
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	3b04      	subs	r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e022      	b.n	8006a9c <Erase_Prev_Tracks+0x58>
		ST7735_WriteString(5, 5 + ((i - track) * 20), getTrackName(i),
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	0092      	lsls	r2, r2, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3305      	adds	r3, #5
 8006a6a:	b29c      	uxth	r4, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fb25 	bl	80050c0 <getTrackName>
 8006a76:	4601      	mov	r1, r0
 8006a78:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <Erase_Prev_Tracks+0x6c>)
 8006a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a7e:	9202      	str	r2, [sp, #8]
 8006a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a84:	9201      	str	r2, [sp, #4]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	9200      	str	r2, [sp, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	4621      	mov	r1, r4
 8006a90:	2005      	movs	r0, #5
 8006a92:	f7fe fcbe 	bl	8005412 <ST7735_WriteString>
	for (i = track - 4; i < track + 1; i++) {
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	ddd8      	ble.n	8006a56 <Erase_Prev_Tracks+0x12>
				Font_11x18,
				ST7735_BLACK, ST7735_BLACK);
	}
	return 4;
 8006aa4:	2304      	movs	r3, #4

}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd90      	pop	{r4, r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000060 	.word	0x20000060

08006ab4 <Draw_Next_Tracks>:

uint8_t Draw_Next_Tracks(uint8_t track) {
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af04      	add	r7, sp, #16
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]

	if (track == 0) // First 5
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d12e      	bne.n	8006b22 <Draw_Next_Tracks+0x6e>
			{
		int i;
		for (i = 0; i < 5; i++) {
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e026      	b.n	8006b18 <Draw_Next_Tracks+0x64>
			if ((i + 1) > MAX_TRACK_NUM) // Check if we overflowed
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	dd02      	ble.n	8006ad6 <Draw_Next_Tracks+0x22>
			{
				return i;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	e065      	b.n	8006ba2 <Draw_Next_Tracks+0xee>
			}
			ST7735_WriteString(5, 5 + i * 20, getTrackName(i), Font_7x10,
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3305      	adds	r3, #5
 8006ae6:	b29c      	uxth	r4, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe fae7 	bl	80050c0 <getTrackName>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <Draw_Next_Tracks+0xf8>)
 8006af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006afa:	9202      	str	r2, [sp, #8]
 8006afc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006b00:	9201      	str	r2, [sp, #4]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	9200      	str	r2, [sp, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	460a      	mov	r2, r1
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	2005      	movs	r0, #5
 8006b0e:	f7fe fc80 	bl	8005412 <ST7735_WriteString>
		for (i = 0; i < 5; i++) {
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	ddd5      	ble.n	8006aca <Draw_Next_Tracks+0x16>
			ST7735_BLUE, ST7735_BLACK);
		}
		return 5;
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e03f      	b.n	8006ba2 <Draw_Next_Tracks+0xee>
	}

	else if (track % 5 == 0) // Next n page
 8006b22:	79fa      	ldrb	r2, [r7, #7]
 8006b24:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <Draw_Next_Tracks+0xfc>)
 8006b26:	fba3 1302 	umull	r1, r3, r3, r2
 8006b2a:	0899      	lsrs	r1, r3, #2
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d132      	bne.n	8006ba0 <Draw_Next_Tracks+0xec>
			{
		int i;
		for (i = track; i < track + 5; i++) {
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	e028      	b.n	8006b92 <Draw_Next_Tracks+0xde>
			if ((i + 1) > MAX_TRACK_NUM) // Check if we overflowed
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b09      	cmp	r3, #9
 8006b44:	dd02      	ble.n	8006b4c <Draw_Next_Tracks+0x98>
			{
				return i;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	e02a      	b.n	8006ba2 <Draw_Next_Tracks+0xee>
			}
			ST7735_WriteString(5, 5 + ((i - track) * 20), getTrackName(i),
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	0092      	lsls	r2, r2, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3305      	adds	r3, #5
 8006b60:	b29c      	uxth	r4, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe faaa 	bl	80050c0 <getTrackName>
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <Draw_Next_Tracks+0xf8>)
 8006b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b74:	9202      	str	r2, [sp, #8]
 8006b76:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	9200      	str	r2, [sp, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	460a      	mov	r2, r1
 8006b84:	4621      	mov	r1, r4
 8006b86:	2005      	movs	r0, #5
 8006b88:	f7fe fc43 	bl	8005412 <ST7735_WriteString>
		for (i = track; i < track + 5; i++) {
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	3304      	adds	r3, #4
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	ddd1      	ble.n	8006b40 <Draw_Next_Tracks+0x8c>
					Font_7x10,
					ST7735_BLUE, ST7735_BLACK);
		}
		return 4;
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	e000      	b.n	8006ba2 <Draw_Next_Tracks+0xee>
	}

	else {
		return 0;
 8006ba0:	2300      	movs	r3, #0
	}
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000058 	.word	0x20000058
 8006bb0:	cccccccd 	.word	0xcccccccd

08006bb4 <Draw_Selector>:

void Draw_Selector(uint8_t pos) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]

	if (pos == 0 || (pos % 5 == 0))
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <Draw_Selector+0x28>
 8006bc4:	79fa      	ldrb	r2, [r7, #7]
 8006bc6:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <Draw_Selector+0xf0>)
 8006bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bcc:	0899      	lsrs	r1, r3, #2
 8006bce:	460b      	mov	r3, r1
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <Draw_Selector+0x2e>
		pos = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	71fb      	strb	r3, [r7, #7]
 8006be0:	e04e      	b.n	8006c80 <Draw_Selector+0xcc>
	else if (pos == 1 || ((pos - 1) % 5 == 0))
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d00d      	beq.n	8006c04 <Draw_Selector+0x50>
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	1e59      	subs	r1, r3, #1
 8006bec:	4b2e      	ldr	r3, [pc, #184]	; (8006ca8 <Draw_Selector+0xf4>)
 8006bee:	fb83 2301 	smull	r2, r3, r3, r1
 8006bf2:	105a      	asrs	r2, r3, #1
 8006bf4:	17cb      	asrs	r3, r1, #31
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	1aca      	subs	r2, r1, r3
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	d102      	bne.n	8006c0a <Draw_Selector+0x56>
		pos = 1;
 8006c04:	2301      	movs	r3, #1
 8006c06:	71fb      	strb	r3, [r7, #7]
 8006c08:	e03a      	b.n	8006c80 <Draw_Selector+0xcc>
	else if (pos == 2 || ((pos - 2) % 5 == 0))
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d00d      	beq.n	8006c2c <Draw_Selector+0x78>
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	1e99      	subs	r1, r3, #2
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <Draw_Selector+0xf4>)
 8006c16:	fb83 2301 	smull	r2, r3, r3, r1
 8006c1a:	105a      	asrs	r2, r3, #1
 8006c1c:	17cb      	asrs	r3, r1, #31
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	1aca      	subs	r2, r1, r3
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d102      	bne.n	8006c32 <Draw_Selector+0x7e>
		pos = 2;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	71fb      	strb	r3, [r7, #7]
 8006c30:	e026      	b.n	8006c80 <Draw_Selector+0xcc>
	else if (pos == 3 || ((pos - 3) % 5 == 0))
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d00d      	beq.n	8006c54 <Draw_Selector+0xa0>
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	1ed9      	subs	r1, r3, #3
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <Draw_Selector+0xf4>)
 8006c3e:	fb83 2301 	smull	r2, r3, r3, r1
 8006c42:	105a      	asrs	r2, r3, #1
 8006c44:	17cb      	asrs	r3, r1, #31
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	1aca      	subs	r2, r1, r3
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	d102      	bne.n	8006c5a <Draw_Selector+0xa6>
		pos = 3;
 8006c54:	2303      	movs	r3, #3
 8006c56:	71fb      	strb	r3, [r7, #7]
 8006c58:	e012      	b.n	8006c80 <Draw_Selector+0xcc>
	else if (pos == 4 || ((pos - 4) % 5 == 0))
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d00d      	beq.n	8006c7c <Draw_Selector+0xc8>
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	1f19      	subs	r1, r3, #4
 8006c64:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <Draw_Selector+0xf4>)
 8006c66:	fb83 2301 	smull	r2, r3, r3, r1
 8006c6a:	105a      	asrs	r2, r3, #1
 8006c6c:	17cb      	asrs	r3, r1, #31
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	1aca      	subs	r2, r1, r3
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	d101      	bne.n	8006c80 <Draw_Selector+0xcc>
		pos = 4;
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	71fb      	strb	r3, [r7, #7]
	drawFastHLine(5, 20 + pos * 20, 100, ST7735_YELLOW);
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	3301      	adds	r3, #1
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	0092      	lsls	r2, r2, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	b219      	sxth	r1, r3
 8006c92:	231f      	movs	r3, #31
 8006c94:	2264      	movs	r2, #100	; 0x64
 8006c96:	2005      	movs	r0, #5
 8006c98:	f7fd fe8b 	bl	80049b2 <drawFastHLine>
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	cccccccd 	.word	0xcccccccd
 8006ca8:	66666667 	.word	0x66666667

08006cac <Erase_Selector>:
void Erase_Selector(uint8_t pos) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]

	if (pos == 0 || (pos % 5 == 0))
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <Erase_Selector+0x28>
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <Erase_Selector+0xf4>)
 8006cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc4:	0899      	lsrs	r1, r3, #2
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <Erase_Selector+0x2e>
		pos = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	71fb      	strb	r3, [r7, #7]
 8006cd8:	e04e      	b.n	8006d78 <Erase_Selector+0xcc>
	else if (pos == 1 || ((pos - 1) % 5 == 0))
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d00d      	beq.n	8006cfc <Erase_Selector+0x50>
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	1e59      	subs	r1, r3, #1
 8006ce4:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <Erase_Selector+0xf8>)
 8006ce6:	fb83 2301 	smull	r2, r3, r3, r1
 8006cea:	105a      	asrs	r2, r3, #1
 8006cec:	17cb      	asrs	r3, r1, #31
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	1aca      	subs	r2, r1, r3
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d102      	bne.n	8006d02 <Erase_Selector+0x56>
		pos = 1;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	e03a      	b.n	8006d78 <Erase_Selector+0xcc>
	else if (pos == 2 || ((pos - 2) % 5 == 0))
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d00d      	beq.n	8006d24 <Erase_Selector+0x78>
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	1e99      	subs	r1, r3, #2
 8006d0c:	4b25      	ldr	r3, [pc, #148]	; (8006da4 <Erase_Selector+0xf8>)
 8006d0e:	fb83 2301 	smull	r2, r3, r3, r1
 8006d12:	105a      	asrs	r2, r3, #1
 8006d14:	17cb      	asrs	r3, r1, #31
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	1aca      	subs	r2, r1, r3
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d102      	bne.n	8006d2a <Erase_Selector+0x7e>
		pos = 2;
 8006d24:	2302      	movs	r3, #2
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	e026      	b.n	8006d78 <Erase_Selector+0xcc>
	else if (pos == 3 || ((pos - 3) % 5 == 0))
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d00d      	beq.n	8006d4c <Erase_Selector+0xa0>
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	1ed9      	subs	r1, r3, #3
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <Erase_Selector+0xf8>)
 8006d36:	fb83 2301 	smull	r2, r3, r3, r1
 8006d3a:	105a      	asrs	r2, r3, #1
 8006d3c:	17cb      	asrs	r3, r1, #31
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	1aca      	subs	r2, r1, r3
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d102      	bne.n	8006d52 <Erase_Selector+0xa6>
		pos = 3;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	71fb      	strb	r3, [r7, #7]
 8006d50:	e012      	b.n	8006d78 <Erase_Selector+0xcc>
	else if (pos == 4 || ((pos - 4) % 5 == 0))
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d00d      	beq.n	8006d74 <Erase_Selector+0xc8>
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	1f19      	subs	r1, r3, #4
 8006d5c:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <Erase_Selector+0xf8>)
 8006d5e:	fb83 2301 	smull	r2, r3, r3, r1
 8006d62:	105a      	asrs	r2, r3, #1
 8006d64:	17cb      	asrs	r3, r1, #31
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	1aca      	subs	r2, r1, r3
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d101      	bne.n	8006d78 <Erase_Selector+0xcc>
		pos = 4;
 8006d74:	2304      	movs	r3, #4
 8006d76:	71fb      	strb	r3, [r7, #7]
	drawFastHLine(5, 20 + pos * 20, 100, ST7735_BLACK);
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	0092      	lsls	r2, r2, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b219      	sxth	r1, r3
 8006d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d8e:	2264      	movs	r2, #100	; 0x64
 8006d90:	2005      	movs	r0, #5
 8006d92:	f7fd fe0e 	bl	80049b2 <drawFastHLine>
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	cccccccd 	.word	0xcccccccd
 8006da4:	66666667 	.word	0x66666667

08006da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return 1;
 8006dac:	2301      	movs	r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <_kill>:

int _kill(int pid, int sig)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006dc0:	f000 ff78 	bl	8007cb4 <__errno>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2216      	movs	r2, #22
 8006dc8:	601a      	str	r2, [r3, #0]
  return -1;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <_exit>:

void _exit (int status)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006dde:	f04f 31ff 	mov.w	r1, #4294967295
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ffe7 	bl	8006db6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006de8:	e7fe      	b.n	8006de8 <_exit+0x12>

08006dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e00a      	b.n	8006e12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006dfc:	f3af 8000 	nop.w
 8006e00:	4601      	mov	r1, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	60ba      	str	r2, [r7, #8]
 8006e08:	b2ca      	uxtb	r2, r1
 8006e0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	dbf0      	blt.n	8006dfc <_read+0x12>
  }

  return len;
 8006e1a:	687b      	ldr	r3, [r7, #4]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e009      	b.n	8006e4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	60ba      	str	r2, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3301      	adds	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	dbf1      	blt.n	8006e36 <_write+0x12>
  }
  return len;
 8006e52:	687b      	ldr	r3, [r7, #4]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_close>:

int _close(int file)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e82:	605a      	str	r2, [r3, #4]
  return 0;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <_isatty>:

int _isatty(int file)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ec4:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <_sbrk+0x5c>)
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <_sbrk+0x60>)
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <_sbrk+0x64>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ed8:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <_sbrk+0x64>)
 8006eda:	4a12      	ldr	r2, [pc, #72]	; (8006f24 <_sbrk+0x68>)
 8006edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <_sbrk+0x64>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d207      	bcs.n	8006efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006eec:	f000 fee2 	bl	8007cb4 <__errno>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	220c      	movs	r2, #12
 8006ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8006efa:	e009      	b.n	8006f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <_sbrk+0x64>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <_sbrk+0x64>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <_sbrk+0x64>)
 8006f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20005000 	.word	0x20005000
 8006f1c:	00000400 	.word	0x00000400
 8006f20:	20004804 	.word	0x20004804
 8006f24:	20004958 	.word	0x20004958

08006f28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f28:	480d      	ldr	r0, [pc, #52]	; (8006f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f30:	480c      	ldr	r0, [pc, #48]	; (8006f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f32:	490d      	ldr	r1, [pc, #52]	; (8006f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f34:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <LoopForever+0xe>)
  movs r3, #0
 8006f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f38:	e002      	b.n	8006f40 <LoopCopyDataInit>

08006f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f3e:	3304      	adds	r3, #4

08006f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f44:	d3f9      	bcc.n	8006f3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f48:	4c0a      	ldr	r4, [pc, #40]	; (8006f74 <LoopForever+0x16>)
  movs r3, #0
 8006f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f4c:	e001      	b.n	8006f52 <LoopFillZerobss>

08006f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f50:	3204      	adds	r2, #4

08006f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f54:	d3fb      	bcc.n	8006f4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006f56:	f000 feb3 	bl	8007cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f5a:	f7fe fb75 	bl	8005648 <main>

08006f5e <LoopForever>:

LoopForever:
  b LoopForever
 8006f5e:	e7fe      	b.n	8006f5e <LoopForever>
  ldr   r0, =_estack
 8006f60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f68:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8006f6c:	0801566c 	.word	0x0801566c
  ldr r2, =_sbss
 8006f70:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8006f74:	20004954 	.word	0x20004954

08006f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f78:	e7fe      	b.n	8006f78 <ADC1_2_IRQHandler>
	...

08006f7c <malloc>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <malloc+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f000 b823 	b.w	8006fcc <_malloc_r>
 8006f86:	bf00      	nop
 8006f88:	200000c4 	.word	0x200000c4

08006f8c <sbrk_aligned>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4e0e      	ldr	r6, [pc, #56]	; (8006fc8 <sbrk_aligned+0x3c>)
 8006f90:	460c      	mov	r4, r1
 8006f92:	6831      	ldr	r1, [r6, #0]
 8006f94:	4605      	mov	r5, r0
 8006f96:	b911      	cbnz	r1, 8006f9e <sbrk_aligned+0x12>
 8006f98:	f000 fe6a 	bl	8007c70 <_sbrk_r>
 8006f9c:	6030      	str	r0, [r6, #0]
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 fe65 	bl	8007c70 <_sbrk_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d00a      	beq.n	8006fc0 <sbrk_aligned+0x34>
 8006faa:	1cc4      	adds	r4, r0, #3
 8006fac:	f024 0403 	bic.w	r4, r4, #3
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	d007      	beq.n	8006fc4 <sbrk_aligned+0x38>
 8006fb4:	1a21      	subs	r1, r4, r0
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 fe5a 	bl	8007c70 <_sbrk_r>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d101      	bne.n	8006fc4 <sbrk_aligned+0x38>
 8006fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	2000480c 	.word	0x2000480c

08006fcc <_malloc_r>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	1ccd      	adds	r5, r1, #3
 8006fd2:	f025 0503 	bic.w	r5, r5, #3
 8006fd6:	3508      	adds	r5, #8
 8006fd8:	2d0c      	cmp	r5, #12
 8006fda:	bf38      	it	cc
 8006fdc:	250c      	movcc	r5, #12
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	db01      	blt.n	8006fe8 <_malloc_r+0x1c>
 8006fe4:	42a9      	cmp	r1, r5
 8006fe6:	d905      	bls.n	8006ff4 <_malloc_r+0x28>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	2600      	movs	r6, #0
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4630      	mov	r0, r6
 8006ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070c8 <_malloc_r+0xfc>
 8006ff8:	f000 f868 	bl	80070cc <__malloc_lock>
 8006ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8007000:	461c      	mov	r4, r3
 8007002:	bb5c      	cbnz	r4, 800705c <_malloc_r+0x90>
 8007004:	4629      	mov	r1, r5
 8007006:	4638      	mov	r0, r7
 8007008:	f7ff ffc0 	bl	8006f8c <sbrk_aligned>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	4604      	mov	r4, r0
 8007010:	d155      	bne.n	80070be <_malloc_r+0xf2>
 8007012:	f8d8 4000 	ldr.w	r4, [r8]
 8007016:	4626      	mov	r6, r4
 8007018:	2e00      	cmp	r6, #0
 800701a:	d145      	bne.n	80070a8 <_malloc_r+0xdc>
 800701c:	2c00      	cmp	r4, #0
 800701e:	d048      	beq.n	80070b2 <_malloc_r+0xe6>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	4631      	mov	r1, r6
 8007024:	4638      	mov	r0, r7
 8007026:	eb04 0903 	add.w	r9, r4, r3
 800702a:	f000 fe21 	bl	8007c70 <_sbrk_r>
 800702e:	4581      	cmp	r9, r0
 8007030:	d13f      	bne.n	80070b2 <_malloc_r+0xe6>
 8007032:	6821      	ldr	r1, [r4, #0]
 8007034:	4638      	mov	r0, r7
 8007036:	1a6d      	subs	r5, r5, r1
 8007038:	4629      	mov	r1, r5
 800703a:	f7ff ffa7 	bl	8006f8c <sbrk_aligned>
 800703e:	3001      	adds	r0, #1
 8007040:	d037      	beq.n	80070b2 <_malloc_r+0xe6>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	442b      	add	r3, r5
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	f8d8 3000 	ldr.w	r3, [r8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d038      	beq.n	80070c2 <_malloc_r+0xf6>
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	42a2      	cmp	r2, r4
 8007054:	d12b      	bne.n	80070ae <_malloc_r+0xe2>
 8007056:	2200      	movs	r2, #0
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e00f      	b.n	800707c <_malloc_r+0xb0>
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	1b52      	subs	r2, r2, r5
 8007060:	d41f      	bmi.n	80070a2 <_malloc_r+0xd6>
 8007062:	2a0b      	cmp	r2, #11
 8007064:	d917      	bls.n	8007096 <_malloc_r+0xca>
 8007066:	1961      	adds	r1, r4, r5
 8007068:	42a3      	cmp	r3, r4
 800706a:	6025      	str	r5, [r4, #0]
 800706c:	bf18      	it	ne
 800706e:	6059      	strne	r1, [r3, #4]
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	bf08      	it	eq
 8007074:	f8c8 1000 	streq.w	r1, [r8]
 8007078:	5162      	str	r2, [r4, r5]
 800707a:	604b      	str	r3, [r1, #4]
 800707c:	4638      	mov	r0, r7
 800707e:	f104 060b 	add.w	r6, r4, #11
 8007082:	f000 f829 	bl	80070d8 <__malloc_unlock>
 8007086:	f026 0607 	bic.w	r6, r6, #7
 800708a:	1d23      	adds	r3, r4, #4
 800708c:	1af2      	subs	r2, r6, r3
 800708e:	d0ae      	beq.n	8006fee <_malloc_r+0x22>
 8007090:	1b9b      	subs	r3, r3, r6
 8007092:	50a3      	str	r3, [r4, r2]
 8007094:	e7ab      	b.n	8006fee <_malloc_r+0x22>
 8007096:	42a3      	cmp	r3, r4
 8007098:	6862      	ldr	r2, [r4, #4]
 800709a:	d1dd      	bne.n	8007058 <_malloc_r+0x8c>
 800709c:	f8c8 2000 	str.w	r2, [r8]
 80070a0:	e7ec      	b.n	800707c <_malloc_r+0xb0>
 80070a2:	4623      	mov	r3, r4
 80070a4:	6864      	ldr	r4, [r4, #4]
 80070a6:	e7ac      	b.n	8007002 <_malloc_r+0x36>
 80070a8:	4634      	mov	r4, r6
 80070aa:	6876      	ldr	r6, [r6, #4]
 80070ac:	e7b4      	b.n	8007018 <_malloc_r+0x4c>
 80070ae:	4613      	mov	r3, r2
 80070b0:	e7cc      	b.n	800704c <_malloc_r+0x80>
 80070b2:	230c      	movs	r3, #12
 80070b4:	4638      	mov	r0, r7
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	f000 f80e 	bl	80070d8 <__malloc_unlock>
 80070bc:	e797      	b.n	8006fee <_malloc_r+0x22>
 80070be:	6025      	str	r5, [r4, #0]
 80070c0:	e7dc      	b.n	800707c <_malloc_r+0xb0>
 80070c2:	605b      	str	r3, [r3, #4]
 80070c4:	deff      	udf	#255	; 0xff
 80070c6:	bf00      	nop
 80070c8:	20004808 	.word	0x20004808

080070cc <__malloc_lock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_lock+0x8>)
 80070ce:	f000 be1b 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 80070d2:	bf00      	nop
 80070d4:	20004950 	.word	0x20004950

080070d8 <__malloc_unlock>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__malloc_unlock+0x8>)
 80070da:	f000 be16 	b.w	8007d0a <__retarget_lock_release_recursive>
 80070de:	bf00      	nop
 80070e0:	20004950 	.word	0x20004950

080070e4 <__cvt>:
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ea:	461f      	mov	r7, r3
 80070ec:	bfbb      	ittet	lt
 80070ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	461f      	movlt	r7, r3
 80070f4:	2300      	movge	r3, #0
 80070f6:	232d      	movlt	r3, #45	; 0x2d
 80070f8:	b088      	sub	sp, #32
 80070fa:	4614      	mov	r4, r2
 80070fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007100:	7013      	strb	r3, [r2, #0]
 8007102:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007104:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007108:	f023 0820 	bic.w	r8, r3, #32
 800710c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007110:	d005      	beq.n	800711e <__cvt+0x3a>
 8007112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007116:	d100      	bne.n	800711a <__cvt+0x36>
 8007118:	3501      	adds	r5, #1
 800711a:	2302      	movs	r3, #2
 800711c:	e000      	b.n	8007120 <__cvt+0x3c>
 800711e:	2303      	movs	r3, #3
 8007120:	aa07      	add	r2, sp, #28
 8007122:	9204      	str	r2, [sp, #16]
 8007124:	aa06      	add	r2, sp, #24
 8007126:	e9cd a202 	strd	sl, r2, [sp, #8]
 800712a:	e9cd 3500 	strd	r3, r5, [sp]
 800712e:	4622      	mov	r2, r4
 8007130:	463b      	mov	r3, r7
 8007132:	f000 fe91 	bl	8007e58 <_dtoa_r>
 8007136:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800713a:	4606      	mov	r6, r0
 800713c:	d102      	bne.n	8007144 <__cvt+0x60>
 800713e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007140:	07db      	lsls	r3, r3, #31
 8007142:	d522      	bpl.n	800718a <__cvt+0xa6>
 8007144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007148:	eb06 0905 	add.w	r9, r6, r5
 800714c:	d110      	bne.n	8007170 <__cvt+0x8c>
 800714e:	7833      	ldrb	r3, [r6, #0]
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	d10a      	bne.n	800716a <__cvt+0x86>
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	4620      	mov	r0, r4
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fc34 	bl	80009c8 <__aeabi_dcmpeq>
 8007160:	b918      	cbnz	r0, 800716a <__cvt+0x86>
 8007162:	f1c5 0501 	rsb	r5, r5, #1
 8007166:	f8ca 5000 	str.w	r5, [sl]
 800716a:	f8da 3000 	ldr.w	r3, [sl]
 800716e:	4499      	add	r9, r3
 8007170:	2200      	movs	r2, #0
 8007172:	2300      	movs	r3, #0
 8007174:	4620      	mov	r0, r4
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fc26 	bl	80009c8 <__aeabi_dcmpeq>
 800717c:	b108      	cbz	r0, 8007182 <__cvt+0x9e>
 800717e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007182:	2230      	movs	r2, #48	; 0x30
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	454b      	cmp	r3, r9
 8007188:	d307      	bcc.n	800719a <__cvt+0xb6>
 800718a:	4630      	mov	r0, r6
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007190:	1b9b      	subs	r3, r3, r6
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	b008      	add	sp, #32
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	1c59      	adds	r1, r3, #1
 800719c:	9107      	str	r1, [sp, #28]
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e7f0      	b.n	8007184 <__cvt+0xa0>

080071a2 <__exponent>:
 80071a2:	4603      	mov	r3, r0
 80071a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a6:	2900      	cmp	r1, #0
 80071a8:	f803 2b02 	strb.w	r2, [r3], #2
 80071ac:	bfb6      	itet	lt
 80071ae:	222d      	movlt	r2, #45	; 0x2d
 80071b0:	222b      	movge	r2, #43	; 0x2b
 80071b2:	4249      	neglt	r1, r1
 80071b4:	2909      	cmp	r1, #9
 80071b6:	7042      	strb	r2, [r0, #1]
 80071b8:	dd2a      	ble.n	8007210 <__exponent+0x6e>
 80071ba:	f10d 0207 	add.w	r2, sp, #7
 80071be:	4617      	mov	r7, r2
 80071c0:	260a      	movs	r6, #10
 80071c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80071c6:	4694      	mov	ip, r2
 80071c8:	fb06 1415 	mls	r4, r6, r5, r1
 80071cc:	3430      	adds	r4, #48	; 0x30
 80071ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80071d2:	460c      	mov	r4, r1
 80071d4:	2c63      	cmp	r4, #99	; 0x63
 80071d6:	4629      	mov	r1, r5
 80071d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80071dc:	dcf1      	bgt.n	80071c2 <__exponent+0x20>
 80071de:	3130      	adds	r1, #48	; 0x30
 80071e0:	f1ac 0402 	sub.w	r4, ip, #2
 80071e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071e8:	4622      	mov	r2, r4
 80071ea:	1c41      	adds	r1, r0, #1
 80071ec:	42ba      	cmp	r2, r7
 80071ee:	d30a      	bcc.n	8007206 <__exponent+0x64>
 80071f0:	f10d 0209 	add.w	r2, sp, #9
 80071f4:	eba2 020c 	sub.w	r2, r2, ip
 80071f8:	42bc      	cmp	r4, r7
 80071fa:	bf88      	it	hi
 80071fc:	2200      	movhi	r2, #0
 80071fe:	4413      	add	r3, r2
 8007200:	1a18      	subs	r0, r3, r0
 8007202:	b003      	add	sp, #12
 8007204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007206:	f812 5b01 	ldrb.w	r5, [r2], #1
 800720a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800720e:	e7ed      	b.n	80071ec <__exponent+0x4a>
 8007210:	2330      	movs	r3, #48	; 0x30
 8007212:	3130      	adds	r1, #48	; 0x30
 8007214:	7083      	strb	r3, [r0, #2]
 8007216:	70c1      	strb	r1, [r0, #3]
 8007218:	1d03      	adds	r3, r0, #4
 800721a:	e7f1      	b.n	8007200 <__exponent+0x5e>

0800721c <_printf_float>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	b091      	sub	sp, #68	; 0x44
 8007222:	460c      	mov	r4, r1
 8007224:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007228:	4616      	mov	r6, r2
 800722a:	461f      	mov	r7, r3
 800722c:	4605      	mov	r5, r0
 800722e:	f000 fce7 	bl	8007c00 <_localeconv_r>
 8007232:	6803      	ldr	r3, [r0, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	9309      	str	r3, [sp, #36]	; 0x24
 8007238:	f7f8 ff9a 	bl	8000170 <strlen>
 800723c:	2300      	movs	r3, #0
 800723e:	930e      	str	r3, [sp, #56]	; 0x38
 8007240:	f8d8 3000 	ldr.w	r3, [r8]
 8007244:	900a      	str	r0, [sp, #40]	; 0x28
 8007246:	3307      	adds	r3, #7
 8007248:	f023 0307 	bic.w	r3, r3, #7
 800724c:	f103 0208 	add.w	r2, r3, #8
 8007250:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007254:	f8d4 b000 	ldr.w	fp, [r4]
 8007258:	f8c8 2000 	str.w	r2, [r8]
 800725c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007260:	4652      	mov	r2, sl
 8007262:	4643      	mov	r3, r8
 8007264:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007268:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800726c:	930b      	str	r3, [sp, #44]	; 0x2c
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	4650      	mov	r0, sl
 8007274:	4b9c      	ldr	r3, [pc, #624]	; (80074e8 <_printf_float+0x2cc>)
 8007276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007278:	f7f9 fbd8 	bl	8000a2c <__aeabi_dcmpun>
 800727c:	bb70      	cbnz	r0, 80072dc <_printf_float+0xc0>
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	4650      	mov	r0, sl
 8007284:	4b98      	ldr	r3, [pc, #608]	; (80074e8 <_printf_float+0x2cc>)
 8007286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007288:	f7f9 fbb2 	bl	80009f0 <__aeabi_dcmple>
 800728c:	bb30      	cbnz	r0, 80072dc <_printf_float+0xc0>
 800728e:	2200      	movs	r2, #0
 8007290:	2300      	movs	r3, #0
 8007292:	4650      	mov	r0, sl
 8007294:	4641      	mov	r1, r8
 8007296:	f7f9 fba1 	bl	80009dc <__aeabi_dcmplt>
 800729a:	b110      	cbz	r0, 80072a2 <_printf_float+0x86>
 800729c:	232d      	movs	r3, #45	; 0x2d
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	4a92      	ldr	r2, [pc, #584]	; (80074ec <_printf_float+0x2d0>)
 80072a4:	4b92      	ldr	r3, [pc, #584]	; (80074f0 <_printf_float+0x2d4>)
 80072a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072aa:	bf94      	ite	ls
 80072ac:	4690      	movls	r8, r2
 80072ae:	4698      	movhi	r8, r3
 80072b0:	2303      	movs	r3, #3
 80072b2:	f04f 0a00 	mov.w	sl, #0
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	f02b 0304 	bic.w	r3, fp, #4
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	4633      	mov	r3, r6
 80072c0:	4621      	mov	r1, r4
 80072c2:	4628      	mov	r0, r5
 80072c4:	9700      	str	r7, [sp, #0]
 80072c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80072c8:	f000 f9d6 	bl	8007678 <_printf_common>
 80072cc:	3001      	adds	r0, #1
 80072ce:	f040 8090 	bne.w	80073f2 <_printf_float+0x1d6>
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	b011      	add	sp, #68	; 0x44
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	4652      	mov	r2, sl
 80072de:	4643      	mov	r3, r8
 80072e0:	4650      	mov	r0, sl
 80072e2:	4641      	mov	r1, r8
 80072e4:	f7f9 fba2 	bl	8000a2c <__aeabi_dcmpun>
 80072e8:	b148      	cbz	r0, 80072fe <_printf_float+0xe2>
 80072ea:	f1b8 0f00 	cmp.w	r8, #0
 80072ee:	bfb8      	it	lt
 80072f0:	232d      	movlt	r3, #45	; 0x2d
 80072f2:	4a80      	ldr	r2, [pc, #512]	; (80074f4 <_printf_float+0x2d8>)
 80072f4:	bfb8      	it	lt
 80072f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <_printf_float+0x2dc>)
 80072fc:	e7d3      	b.n	80072a6 <_printf_float+0x8a>
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	d142      	bne.n	800738e <_printf_float+0x172>
 8007308:	2306      	movs	r3, #6
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	9206      	str	r2, [sp, #24]
 8007310:	aa0e      	add	r2, sp, #56	; 0x38
 8007312:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007316:	aa0d      	add	r2, sp, #52	; 0x34
 8007318:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800731c:	9203      	str	r2, [sp, #12]
 800731e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007322:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	6863      	ldr	r3, [r4, #4]
 800732a:	4652      	mov	r2, sl
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	4628      	mov	r0, r5
 8007330:	4643      	mov	r3, r8
 8007332:	910b      	str	r1, [sp, #44]	; 0x2c
 8007334:	f7ff fed6 	bl	80070e4 <__cvt>
 8007338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800733a:	4680      	mov	r8, r0
 800733c:	2947      	cmp	r1, #71	; 0x47
 800733e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007340:	d108      	bne.n	8007354 <_printf_float+0x138>
 8007342:	1cc8      	adds	r0, r1, #3
 8007344:	db02      	blt.n	800734c <_printf_float+0x130>
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	4299      	cmp	r1, r3
 800734a:	dd40      	ble.n	80073ce <_printf_float+0x1b2>
 800734c:	f1a9 0902 	sub.w	r9, r9, #2
 8007350:	fa5f f989 	uxtb.w	r9, r9
 8007354:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007358:	d81f      	bhi.n	800739a <_printf_float+0x17e>
 800735a:	464a      	mov	r2, r9
 800735c:	3901      	subs	r1, #1
 800735e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007362:	910d      	str	r1, [sp, #52]	; 0x34
 8007364:	f7ff ff1d 	bl	80071a2 <__exponent>
 8007368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800736a:	4682      	mov	sl, r0
 800736c:	1813      	adds	r3, r2, r0
 800736e:	2a01      	cmp	r2, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	dc02      	bgt.n	800737a <_printf_float+0x15e>
 8007374:	6822      	ldr	r2, [r4, #0]
 8007376:	07d2      	lsls	r2, r2, #31
 8007378:	d501      	bpl.n	800737e <_printf_float+0x162>
 800737a:	3301      	adds	r3, #1
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007382:	2b00      	cmp	r3, #0
 8007384:	d09b      	beq.n	80072be <_printf_float+0xa2>
 8007386:	232d      	movs	r3, #45	; 0x2d
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	e797      	b.n	80072be <_printf_float+0xa2>
 800738e:	2947      	cmp	r1, #71	; 0x47
 8007390:	d1bc      	bne.n	800730c <_printf_float+0xf0>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ba      	bne.n	800730c <_printf_float+0xf0>
 8007396:	2301      	movs	r3, #1
 8007398:	e7b7      	b.n	800730a <_printf_float+0xee>
 800739a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800739e:	d118      	bne.n	80073d2 <_printf_float+0x1b6>
 80073a0:	2900      	cmp	r1, #0
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	dd0b      	ble.n	80073be <_printf_float+0x1a2>
 80073a6:	6121      	str	r1, [r4, #16]
 80073a8:	b913      	cbnz	r3, 80073b0 <_printf_float+0x194>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d502      	bpl.n	80073b6 <_printf_float+0x19a>
 80073b0:	3301      	adds	r3, #1
 80073b2:	440b      	add	r3, r1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	f04f 0a00 	mov.w	sl, #0
 80073ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80073bc:	e7df      	b.n	800737e <_printf_float+0x162>
 80073be:	b913      	cbnz	r3, 80073c6 <_printf_float+0x1aa>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	07d2      	lsls	r2, r2, #31
 80073c4:	d501      	bpl.n	80073ca <_printf_float+0x1ae>
 80073c6:	3302      	adds	r3, #2
 80073c8:	e7f4      	b.n	80073b4 <_printf_float+0x198>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7f2      	b.n	80073b4 <_printf_float+0x198>
 80073ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d4:	4299      	cmp	r1, r3
 80073d6:	db05      	blt.n	80073e4 <_printf_float+0x1c8>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	6121      	str	r1, [r4, #16]
 80073dc:	07d8      	lsls	r0, r3, #31
 80073de:	d5ea      	bpl.n	80073b6 <_printf_float+0x19a>
 80073e0:	1c4b      	adds	r3, r1, #1
 80073e2:	e7e7      	b.n	80073b4 <_printf_float+0x198>
 80073e4:	2900      	cmp	r1, #0
 80073e6:	bfcc      	ite	gt
 80073e8:	2201      	movgt	r2, #1
 80073ea:	f1c1 0202 	rsble	r2, r1, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	e7e0      	b.n	80073b4 <_printf_float+0x198>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	055a      	lsls	r2, r3, #21
 80073f6:	d407      	bmi.n	8007408 <_printf_float+0x1ec>
 80073f8:	6923      	ldr	r3, [r4, #16]
 80073fa:	4642      	mov	r2, r8
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	d12b      	bne.n	800745e <_printf_float+0x242>
 8007406:	e764      	b.n	80072d2 <_printf_float+0xb6>
 8007408:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800740c:	f240 80dd 	bls.w	80075ca <_printf_float+0x3ae>
 8007410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	f7f9 fad6 	bl	80009c8 <__aeabi_dcmpeq>
 800741c:	2800      	cmp	r0, #0
 800741e:	d033      	beq.n	8007488 <_printf_float+0x26c>
 8007420:	2301      	movs	r3, #1
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	4a35      	ldr	r2, [pc, #212]	; (80074fc <_printf_float+0x2e0>)
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f af51 	beq.w	80072d2 <_printf_float+0xb6>
 8007430:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007434:	429a      	cmp	r2, r3
 8007436:	db02      	blt.n	800743e <_printf_float+0x222>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07d8      	lsls	r0, r3, #31
 800743c:	d50f      	bpl.n	800745e <_printf_float+0x242>
 800743e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f af42 	beq.w	80072d2 <_printf_float+0xb6>
 800744e:	f04f 0800 	mov.w	r8, #0
 8007452:	f104 091a 	add.w	r9, r4, #26
 8007456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007458:	3b01      	subs	r3, #1
 800745a:	4543      	cmp	r3, r8
 800745c:	dc09      	bgt.n	8007472 <_printf_float+0x256>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	079b      	lsls	r3, r3, #30
 8007462:	f100 8104 	bmi.w	800766e <_printf_float+0x452>
 8007466:	68e0      	ldr	r0, [r4, #12]
 8007468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800746a:	4298      	cmp	r0, r3
 800746c:	bfb8      	it	lt
 800746e:	4618      	movlt	r0, r3
 8007470:	e731      	b.n	80072d6 <_printf_float+0xba>
 8007472:	2301      	movs	r3, #1
 8007474:	464a      	mov	r2, r9
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f af28 	beq.w	80072d2 <_printf_float+0xb6>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	e7e6      	b.n	8007456 <_printf_float+0x23a>
 8007488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc38      	bgt.n	8007500 <_printf_float+0x2e4>
 800748e:	2301      	movs	r3, #1
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	4a19      	ldr	r2, [pc, #100]	; (80074fc <_printf_float+0x2e0>)
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f af1a 	beq.w	80072d2 <_printf_float+0xb6>
 800749e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80074a2:	4313      	orrs	r3, r2
 80074a4:	d102      	bne.n	80074ac <_printf_float+0x290>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	07d9      	lsls	r1, r3, #31
 80074aa:	d5d8      	bpl.n	800745e <_printf_float+0x242>
 80074ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af0b 	beq.w	80072d2 <_printf_float+0xb6>
 80074bc:	f04f 0900 	mov.w	r9, #0
 80074c0:	f104 0a1a 	add.w	sl, r4, #26
 80074c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c6:	425b      	negs	r3, r3
 80074c8:	454b      	cmp	r3, r9
 80074ca:	dc01      	bgt.n	80074d0 <_printf_float+0x2b4>
 80074cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ce:	e794      	b.n	80073fa <_printf_float+0x1de>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4652      	mov	r2, sl
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f aef9 	beq.w	80072d2 <_printf_float+0xb6>
 80074e0:	f109 0901 	add.w	r9, r9, #1
 80074e4:	e7ee      	b.n	80074c4 <_printf_float+0x2a8>
 80074e6:	bf00      	nop
 80074e8:	7fefffff 	.word	0x7fefffff
 80074ec:	080152f4 	.word	0x080152f4
 80074f0:	080152f8 	.word	0x080152f8
 80074f4:	080152fc 	.word	0x080152fc
 80074f8:	08015300 	.word	0x08015300
 80074fc:	08015304 	.word	0x08015304
 8007500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007504:	429a      	cmp	r2, r3
 8007506:	bfa8      	it	ge
 8007508:	461a      	movge	r2, r3
 800750a:	2a00      	cmp	r2, #0
 800750c:	4691      	mov	r9, r2
 800750e:	dc37      	bgt.n	8007580 <_printf_float+0x364>
 8007510:	f04f 0b00 	mov.w	fp, #0
 8007514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007518:	f104 021a 	add.w	r2, r4, #26
 800751c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007520:	ebaa 0309 	sub.w	r3, sl, r9
 8007524:	455b      	cmp	r3, fp
 8007526:	dc33      	bgt.n	8007590 <_printf_float+0x374>
 8007528:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800752c:	429a      	cmp	r2, r3
 800752e:	db3b      	blt.n	80075a8 <_printf_float+0x38c>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	07da      	lsls	r2, r3, #31
 8007534:	d438      	bmi.n	80075a8 <_printf_float+0x38c>
 8007536:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800753a:	eba2 0903 	sub.w	r9, r2, r3
 800753e:	eba2 020a 	sub.w	r2, r2, sl
 8007542:	4591      	cmp	r9, r2
 8007544:	bfa8      	it	ge
 8007546:	4691      	movge	r9, r2
 8007548:	f1b9 0f00 	cmp.w	r9, #0
 800754c:	dc34      	bgt.n	80075b8 <_printf_float+0x39c>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007556:	f104 0a1a 	add.w	sl, r4, #26
 800755a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	eba3 0309 	sub.w	r3, r3, r9
 8007564:	4543      	cmp	r3, r8
 8007566:	f77f af7a 	ble.w	800745e <_printf_float+0x242>
 800756a:	2301      	movs	r3, #1
 800756c:	4652      	mov	r2, sl
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f aeac 	beq.w	80072d2 <_printf_float+0xb6>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	e7ec      	b.n	800755a <_printf_float+0x33e>
 8007580:	4613      	mov	r3, r2
 8007582:	4631      	mov	r1, r6
 8007584:	4642      	mov	r2, r8
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	d1c0      	bne.n	8007510 <_printf_float+0x2f4>
 800758e:	e6a0      	b.n	80072d2 <_printf_float+0xb6>
 8007590:	2301      	movs	r3, #1
 8007592:	4631      	mov	r1, r6
 8007594:	4628      	mov	r0, r5
 8007596:	920b      	str	r2, [sp, #44]	; 0x2c
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f ae99 	beq.w	80072d2 <_printf_float+0xb6>
 80075a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075a2:	f10b 0b01 	add.w	fp, fp, #1
 80075a6:	e7b9      	b.n	800751c <_printf_float+0x300>
 80075a8:	4631      	mov	r1, r6
 80075aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	d1bf      	bne.n	8007536 <_printf_float+0x31a>
 80075b6:	e68c      	b.n	80072d2 <_printf_float+0xb6>
 80075b8:	464b      	mov	r3, r9
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	eb08 020a 	add.w	r2, r8, sl
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d1c2      	bne.n	800754e <_printf_float+0x332>
 80075c8:	e683      	b.n	80072d2 <_printf_float+0xb6>
 80075ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075cc:	2a01      	cmp	r2, #1
 80075ce:	dc01      	bgt.n	80075d4 <_printf_float+0x3b8>
 80075d0:	07db      	lsls	r3, r3, #31
 80075d2:	d539      	bpl.n	8007648 <_printf_float+0x42c>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4642      	mov	r2, r8
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f ae77 	beq.w	80072d2 <_printf_float+0xb6>
 80075e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f ae6f 	beq.w	80072d2 <_printf_float+0xb6>
 80075f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f8:	2200      	movs	r2, #0
 80075fa:	2300      	movs	r3, #0
 80075fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007600:	f7f9 f9e2 	bl	80009c8 <__aeabi_dcmpeq>
 8007604:	b9d8      	cbnz	r0, 800763e <_printf_float+0x422>
 8007606:	f109 33ff 	add.w	r3, r9, #4294967295
 800760a:	f108 0201 	add.w	r2, r8, #1
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	d10e      	bne.n	8007636 <_printf_float+0x41a>
 8007618:	e65b      	b.n	80072d2 <_printf_float+0xb6>
 800761a:	2301      	movs	r3, #1
 800761c:	464a      	mov	r2, r9
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	f43f ae54 	beq.w	80072d2 <_printf_float+0xb6>
 800762a:	f108 0801 	add.w	r8, r8, #1
 800762e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007630:	3b01      	subs	r3, #1
 8007632:	4543      	cmp	r3, r8
 8007634:	dcf1      	bgt.n	800761a <_printf_float+0x3fe>
 8007636:	4653      	mov	r3, sl
 8007638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800763c:	e6de      	b.n	80073fc <_printf_float+0x1e0>
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	f104 091a 	add.w	r9, r4, #26
 8007646:	e7f2      	b.n	800762e <_printf_float+0x412>
 8007648:	2301      	movs	r3, #1
 800764a:	4642      	mov	r2, r8
 800764c:	e7df      	b.n	800760e <_printf_float+0x3f2>
 800764e:	2301      	movs	r3, #1
 8007650:	464a      	mov	r2, r9
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f ae3a 	beq.w	80072d2 <_printf_float+0xb6>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007666:	1a5b      	subs	r3, r3, r1
 8007668:	4543      	cmp	r3, r8
 800766a:	dcf0      	bgt.n	800764e <_printf_float+0x432>
 800766c:	e6fb      	b.n	8007466 <_printf_float+0x24a>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	f104 0919 	add.w	r9, r4, #25
 8007676:	e7f4      	b.n	8007662 <_printf_float+0x446>

08007678 <_printf_common>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	4616      	mov	r6, r2
 800767e:	4699      	mov	r9, r3
 8007680:	688a      	ldr	r2, [r1, #8]
 8007682:	690b      	ldr	r3, [r1, #16]
 8007684:	4607      	mov	r7, r0
 8007686:	4293      	cmp	r3, r2
 8007688:	bfb8      	it	lt
 800768a:	4613      	movlt	r3, r2
 800768c:	6033      	str	r3, [r6, #0]
 800768e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007692:	460c      	mov	r4, r1
 8007694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007698:	b10a      	cbz	r2, 800769e <_printf_common+0x26>
 800769a:	3301      	adds	r3, #1
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	0699      	lsls	r1, r3, #26
 80076a2:	bf42      	ittt	mi
 80076a4:	6833      	ldrmi	r3, [r6, #0]
 80076a6:	3302      	addmi	r3, #2
 80076a8:	6033      	strmi	r3, [r6, #0]
 80076aa:	6825      	ldr	r5, [r4, #0]
 80076ac:	f015 0506 	ands.w	r5, r5, #6
 80076b0:	d106      	bne.n	80076c0 <_printf_common+0x48>
 80076b2:	f104 0a19 	add.w	sl, r4, #25
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	6832      	ldr	r2, [r6, #0]
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dc2b      	bgt.n	8007718 <_printf_common+0xa0>
 80076c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c4:	1e13      	subs	r3, r2, #0
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	0692      	lsls	r2, r2, #26
 80076ce:	d430      	bmi.n	8007732 <_printf_common+0xba>
 80076d0:	4649      	mov	r1, r9
 80076d2:	4638      	mov	r0, r7
 80076d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d8:	47c0      	blx	r8
 80076da:	3001      	adds	r0, #1
 80076dc:	d023      	beq.n	8007726 <_printf_common+0xae>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	f003 0306 	and.w	r3, r3, #6
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	bf14      	ite	ne
 80076ea:	2500      	movne	r5, #0
 80076ec:	6833      	ldreq	r3, [r6, #0]
 80076ee:	f04f 0600 	mov.w	r6, #0
 80076f2:	bf08      	it	eq
 80076f4:	68e5      	ldreq	r5, [r4, #12]
 80076f6:	f104 041a 	add.w	r4, r4, #26
 80076fa:	bf08      	it	eq
 80076fc:	1aed      	subeq	r5, r5, r3
 80076fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007702:	bf08      	it	eq
 8007704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007708:	4293      	cmp	r3, r2
 800770a:	bfc4      	itt	gt
 800770c:	1a9b      	subgt	r3, r3, r2
 800770e:	18ed      	addgt	r5, r5, r3
 8007710:	42b5      	cmp	r5, r6
 8007712:	d11a      	bne.n	800774a <_printf_common+0xd2>
 8007714:	2000      	movs	r0, #0
 8007716:	e008      	b.n	800772a <_printf_common+0xb2>
 8007718:	2301      	movs	r3, #1
 800771a:	4652      	mov	r2, sl
 800771c:	4649      	mov	r1, r9
 800771e:	4638      	mov	r0, r7
 8007720:	47c0      	blx	r8
 8007722:	3001      	adds	r0, #1
 8007724:	d103      	bne.n	800772e <_printf_common+0xb6>
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772e:	3501      	adds	r5, #1
 8007730:	e7c1      	b.n	80076b6 <_printf_common+0x3e>
 8007732:	2030      	movs	r0, #48	; 0x30
 8007734:	18e1      	adds	r1, r4, r3
 8007736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007740:	4422      	add	r2, r4
 8007742:	3302      	adds	r3, #2
 8007744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007748:	e7c2      	b.n	80076d0 <_printf_common+0x58>
 800774a:	2301      	movs	r3, #1
 800774c:	4622      	mov	r2, r4
 800774e:	4649      	mov	r1, r9
 8007750:	4638      	mov	r0, r7
 8007752:	47c0      	blx	r8
 8007754:	3001      	adds	r0, #1
 8007756:	d0e6      	beq.n	8007726 <_printf_common+0xae>
 8007758:	3601      	adds	r6, #1
 800775a:	e7d9      	b.n	8007710 <_printf_common+0x98>

0800775c <_printf_i>:
 800775c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	7e0f      	ldrb	r7, [r1, #24]
 8007762:	4691      	mov	r9, r2
 8007764:	2f78      	cmp	r7, #120	; 0x78
 8007766:	4680      	mov	r8, r0
 8007768:	460c      	mov	r4, r1
 800776a:	469a      	mov	sl, r3
 800776c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800776e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007772:	d807      	bhi.n	8007784 <_printf_i+0x28>
 8007774:	2f62      	cmp	r7, #98	; 0x62
 8007776:	d80a      	bhi.n	800778e <_printf_i+0x32>
 8007778:	2f00      	cmp	r7, #0
 800777a:	f000 80d5 	beq.w	8007928 <_printf_i+0x1cc>
 800777e:	2f58      	cmp	r7, #88	; 0x58
 8007780:	f000 80c1 	beq.w	8007906 <_printf_i+0x1aa>
 8007784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800778c:	e03a      	b.n	8007804 <_printf_i+0xa8>
 800778e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007792:	2b15      	cmp	r3, #21
 8007794:	d8f6      	bhi.n	8007784 <_printf_i+0x28>
 8007796:	a101      	add	r1, pc, #4	; (adr r1, 800779c <_printf_i+0x40>)
 8007798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	08007809 	.word	0x08007809
 80077a4:	08007785 	.word	0x08007785
 80077a8:	08007785 	.word	0x08007785
 80077ac:	08007785 	.word	0x08007785
 80077b0:	08007785 	.word	0x08007785
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007785 	.word	0x08007785
 80077bc:	08007785 	.word	0x08007785
 80077c0:	08007785 	.word	0x08007785
 80077c4:	08007785 	.word	0x08007785
 80077c8:	0800790f 	.word	0x0800790f
 80077cc:	08007835 	.word	0x08007835
 80077d0:	080078c9 	.word	0x080078c9
 80077d4:	08007785 	.word	0x08007785
 80077d8:	08007785 	.word	0x08007785
 80077dc:	08007931 	.word	0x08007931
 80077e0:	08007785 	.word	0x08007785
 80077e4:	08007835 	.word	0x08007835
 80077e8:	08007785 	.word	0x08007785
 80077ec:	08007785 	.word	0x08007785
 80077f0:	080078d1 	.word	0x080078d1
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	602a      	str	r2, [r5, #0]
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007804:	2301      	movs	r3, #1
 8007806:	e0a0      	b.n	800794a <_printf_i+0x1ee>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	0607      	lsls	r7, r0, #24
 800780e:	f103 0104 	add.w	r1, r3, #4
 8007812:	6029      	str	r1, [r5, #0]
 8007814:	d501      	bpl.n	800781a <_printf_i+0xbe>
 8007816:	681e      	ldr	r6, [r3, #0]
 8007818:	e003      	b.n	8007822 <_printf_i+0xc6>
 800781a:	0646      	lsls	r6, r0, #25
 800781c:	d5fb      	bpl.n	8007816 <_printf_i+0xba>
 800781e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007822:	2e00      	cmp	r6, #0
 8007824:	da03      	bge.n	800782e <_printf_i+0xd2>
 8007826:	232d      	movs	r3, #45	; 0x2d
 8007828:	4276      	negs	r6, r6
 800782a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782e:	230a      	movs	r3, #10
 8007830:	4859      	ldr	r0, [pc, #356]	; (8007998 <_printf_i+0x23c>)
 8007832:	e012      	b.n	800785a <_printf_i+0xfe>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	1d19      	adds	r1, r3, #4
 800783a:	6029      	str	r1, [r5, #0]
 800783c:	0605      	lsls	r5, r0, #24
 800783e:	d501      	bpl.n	8007844 <_printf_i+0xe8>
 8007840:	681e      	ldr	r6, [r3, #0]
 8007842:	e002      	b.n	800784a <_printf_i+0xee>
 8007844:	0641      	lsls	r1, r0, #25
 8007846:	d5fb      	bpl.n	8007840 <_printf_i+0xe4>
 8007848:	881e      	ldrh	r6, [r3, #0]
 800784a:	2f6f      	cmp	r7, #111	; 0x6f
 800784c:	bf0c      	ite	eq
 800784e:	2308      	moveq	r3, #8
 8007850:	230a      	movne	r3, #10
 8007852:	4851      	ldr	r0, [pc, #324]	; (8007998 <_printf_i+0x23c>)
 8007854:	2100      	movs	r1, #0
 8007856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785a:	6865      	ldr	r5, [r4, #4]
 800785c:	2d00      	cmp	r5, #0
 800785e:	bfa8      	it	ge
 8007860:	6821      	ldrge	r1, [r4, #0]
 8007862:	60a5      	str	r5, [r4, #8]
 8007864:	bfa4      	itt	ge
 8007866:	f021 0104 	bicge.w	r1, r1, #4
 800786a:	6021      	strge	r1, [r4, #0]
 800786c:	b90e      	cbnz	r6, 8007872 <_printf_i+0x116>
 800786e:	2d00      	cmp	r5, #0
 8007870:	d04b      	beq.n	800790a <_printf_i+0x1ae>
 8007872:	4615      	mov	r5, r2
 8007874:	fbb6 f1f3 	udiv	r1, r6, r3
 8007878:	fb03 6711 	mls	r7, r3, r1, r6
 800787c:	5dc7      	ldrb	r7, [r0, r7]
 800787e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007882:	4637      	mov	r7, r6
 8007884:	42bb      	cmp	r3, r7
 8007886:	460e      	mov	r6, r1
 8007888:	d9f4      	bls.n	8007874 <_printf_i+0x118>
 800788a:	2b08      	cmp	r3, #8
 800788c:	d10b      	bne.n	80078a6 <_printf_i+0x14a>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	07de      	lsls	r6, r3, #31
 8007892:	d508      	bpl.n	80078a6 <_printf_i+0x14a>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	6861      	ldr	r1, [r4, #4]
 8007898:	4299      	cmp	r1, r3
 800789a:	bfde      	ittt	le
 800789c:	2330      	movle	r3, #48	; 0x30
 800789e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a6:	1b52      	subs	r2, r2, r5
 80078a8:	6122      	str	r2, [r4, #16]
 80078aa:	464b      	mov	r3, r9
 80078ac:	4621      	mov	r1, r4
 80078ae:	4640      	mov	r0, r8
 80078b0:	f8cd a000 	str.w	sl, [sp]
 80078b4:	aa03      	add	r2, sp, #12
 80078b6:	f7ff fedf 	bl	8007678 <_printf_common>
 80078ba:	3001      	adds	r0, #1
 80078bc:	d14a      	bne.n	8007954 <_printf_i+0x1f8>
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	b004      	add	sp, #16
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	f043 0320 	orr.w	r3, r3, #32
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	2778      	movs	r7, #120	; 0x78
 80078d2:	4832      	ldr	r0, [pc, #200]	; (800799c <_printf_i+0x240>)
 80078d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	6829      	ldr	r1, [r5, #0]
 80078dc:	061f      	lsls	r7, r3, #24
 80078de:	f851 6b04 	ldr.w	r6, [r1], #4
 80078e2:	d402      	bmi.n	80078ea <_printf_i+0x18e>
 80078e4:	065f      	lsls	r7, r3, #25
 80078e6:	bf48      	it	mi
 80078e8:	b2b6      	uxthmi	r6, r6
 80078ea:	07df      	lsls	r7, r3, #31
 80078ec:	bf48      	it	mi
 80078ee:	f043 0320 	orrmi.w	r3, r3, #32
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	bf48      	it	mi
 80078f6:	6023      	strmi	r3, [r4, #0]
 80078f8:	b91e      	cbnz	r6, 8007902 <_printf_i+0x1a6>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f023 0320 	bic.w	r3, r3, #32
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	2310      	movs	r3, #16
 8007904:	e7a6      	b.n	8007854 <_printf_i+0xf8>
 8007906:	4824      	ldr	r0, [pc, #144]	; (8007998 <_printf_i+0x23c>)
 8007908:	e7e4      	b.n	80078d4 <_printf_i+0x178>
 800790a:	4615      	mov	r5, r2
 800790c:	e7bd      	b.n	800788a <_printf_i+0x12e>
 800790e:	682b      	ldr	r3, [r5, #0]
 8007910:	6826      	ldr	r6, [r4, #0]
 8007912:	1d18      	adds	r0, r3, #4
 8007914:	6961      	ldr	r1, [r4, #20]
 8007916:	6028      	str	r0, [r5, #0]
 8007918:	0635      	lsls	r5, r6, #24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	d501      	bpl.n	8007922 <_printf_i+0x1c6>
 800791e:	6019      	str	r1, [r3, #0]
 8007920:	e002      	b.n	8007928 <_printf_i+0x1cc>
 8007922:	0670      	lsls	r0, r6, #25
 8007924:	d5fb      	bpl.n	800791e <_printf_i+0x1c2>
 8007926:	8019      	strh	r1, [r3, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	4615      	mov	r5, r2
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	e7bc      	b.n	80078aa <_printf_i+0x14e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	2100      	movs	r1, #0
 8007934:	1d1a      	adds	r2, r3, #4
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	681d      	ldr	r5, [r3, #0]
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f9e5 	bl	8007d0c <memchr>
 8007942:	b108      	cbz	r0, 8007948 <_printf_i+0x1ec>
 8007944:	1b40      	subs	r0, r0, r5
 8007946:	6060      	str	r0, [r4, #4]
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	2300      	movs	r3, #0
 800794e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007952:	e7aa      	b.n	80078aa <_printf_i+0x14e>
 8007954:	462a      	mov	r2, r5
 8007956:	4649      	mov	r1, r9
 8007958:	4640      	mov	r0, r8
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	47d0      	blx	sl
 800795e:	3001      	adds	r0, #1
 8007960:	d0ad      	beq.n	80078be <_printf_i+0x162>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	079b      	lsls	r3, r3, #30
 8007966:	d413      	bmi.n	8007990 <_printf_i+0x234>
 8007968:	68e0      	ldr	r0, [r4, #12]
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	4298      	cmp	r0, r3
 800796e:	bfb8      	it	lt
 8007970:	4618      	movlt	r0, r3
 8007972:	e7a6      	b.n	80078c2 <_printf_i+0x166>
 8007974:	2301      	movs	r3, #1
 8007976:	4632      	mov	r2, r6
 8007978:	4649      	mov	r1, r9
 800797a:	4640      	mov	r0, r8
 800797c:	47d0      	blx	sl
 800797e:	3001      	adds	r0, #1
 8007980:	d09d      	beq.n	80078be <_printf_i+0x162>
 8007982:	3501      	adds	r5, #1
 8007984:	68e3      	ldr	r3, [r4, #12]
 8007986:	9903      	ldr	r1, [sp, #12]
 8007988:	1a5b      	subs	r3, r3, r1
 800798a:	42ab      	cmp	r3, r5
 800798c:	dcf2      	bgt.n	8007974 <_printf_i+0x218>
 800798e:	e7eb      	b.n	8007968 <_printf_i+0x20c>
 8007990:	2500      	movs	r5, #0
 8007992:	f104 0619 	add.w	r6, r4, #25
 8007996:	e7f5      	b.n	8007984 <_printf_i+0x228>
 8007998:	08015306 	.word	0x08015306
 800799c:	08015317 	.word	0x08015317

080079a0 <std>:
 80079a0:	2300      	movs	r3, #0
 80079a2:	b510      	push	{r4, lr}
 80079a4:	4604      	mov	r4, r0
 80079a6:	e9c0 3300 	strd	r3, r3, [r0]
 80079aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ae:	6083      	str	r3, [r0, #8]
 80079b0:	8181      	strh	r1, [r0, #12]
 80079b2:	6643      	str	r3, [r0, #100]	; 0x64
 80079b4:	81c2      	strh	r2, [r0, #14]
 80079b6:	6183      	str	r3, [r0, #24]
 80079b8:	4619      	mov	r1, r3
 80079ba:	2208      	movs	r2, #8
 80079bc:	305c      	adds	r0, #92	; 0x5c
 80079be:	f000 f916 	bl	8007bee <memset>
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <std+0x38>)
 80079c4:	6224      	str	r4, [r4, #32]
 80079c6:	6263      	str	r3, [r4, #36]	; 0x24
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <std+0x3c>)
 80079ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <std+0x40>)
 80079ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <std+0x44>)
 80079d2:	6323      	str	r3, [r4, #48]	; 0x30
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	bf00      	nop
 80079d8:	08007b69 	.word	0x08007b69
 80079dc:	08007b8b 	.word	0x08007b8b
 80079e0:	08007bc3 	.word	0x08007bc3
 80079e4:	08007be7 	.word	0x08007be7

080079e8 <stdio_exit_handler>:
 80079e8:	4a02      	ldr	r2, [pc, #8]	; (80079f4 <stdio_exit_handler+0xc>)
 80079ea:	4903      	ldr	r1, [pc, #12]	; (80079f8 <stdio_exit_handler+0x10>)
 80079ec:	4803      	ldr	r0, [pc, #12]	; (80079fc <stdio_exit_handler+0x14>)
 80079ee:	f000 b869 	b.w	8007ac4 <_fwalk_sglue>
 80079f2:	bf00      	nop
 80079f4:	2000006c 	.word	0x2000006c
 80079f8:	08009555 	.word	0x08009555
 80079fc:	20000078 	.word	0x20000078

08007a00 <cleanup_stdio>:
 8007a00:	6841      	ldr	r1, [r0, #4]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <cleanup_stdio+0x34>)
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4299      	cmp	r1, r3
 8007a08:	4604      	mov	r4, r0
 8007a0a:	d001      	beq.n	8007a10 <cleanup_stdio+0x10>
 8007a0c:	f001 fda2 	bl	8009554 <_fflush_r>
 8007a10:	68a1      	ldr	r1, [r4, #8]
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <cleanup_stdio+0x38>)
 8007a14:	4299      	cmp	r1, r3
 8007a16:	d002      	beq.n	8007a1e <cleanup_stdio+0x1e>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fd9b 	bl	8009554 <_fflush_r>
 8007a1e:	68e1      	ldr	r1, [r4, #12]
 8007a20:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <cleanup_stdio+0x3c>)
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d004      	beq.n	8007a30 <cleanup_stdio+0x30>
 8007a26:	4620      	mov	r0, r4
 8007a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2c:	f001 bd92 	b.w	8009554 <_fflush_r>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	bf00      	nop
 8007a34:	20004810 	.word	0x20004810
 8007a38:	20004878 	.word	0x20004878
 8007a3c:	200048e0 	.word	0x200048e0

08007a40 <global_stdio_init.part.0>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <global_stdio_init.part.0+0x30>)
 8007a44:	4c0b      	ldr	r4, [pc, #44]	; (8007a74 <global_stdio_init.part.0+0x34>)
 8007a46:	4a0c      	ldr	r2, [pc, #48]	; (8007a78 <global_stdio_init.part.0+0x38>)
 8007a48:	4620      	mov	r0, r4
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f7ff ffa6 	bl	80079a0 <std>
 8007a54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2109      	movs	r1, #9
 8007a5c:	f7ff ffa0 	bl	80079a0 <std>
 8007a60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a64:	2202      	movs	r2, #2
 8007a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6a:	2112      	movs	r1, #18
 8007a6c:	f7ff bf98 	b.w	80079a0 <std>
 8007a70:	20004948 	.word	0x20004948
 8007a74:	20004810 	.word	0x20004810
 8007a78:	080079e9 	.word	0x080079e9

08007a7c <__sfp_lock_acquire>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	; (8007a84 <__sfp_lock_acquire+0x8>)
 8007a7e:	f000 b943 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 8007a82:	bf00      	nop
 8007a84:	20004951 	.word	0x20004951

08007a88 <__sfp_lock_release>:
 8007a88:	4801      	ldr	r0, [pc, #4]	; (8007a90 <__sfp_lock_release+0x8>)
 8007a8a:	f000 b93e 	b.w	8007d0a <__retarget_lock_release_recursive>
 8007a8e:	bf00      	nop
 8007a90:	20004951 	.word	0x20004951

08007a94 <__sinit>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4604      	mov	r4, r0
 8007a98:	f7ff fff0 	bl	8007a7c <__sfp_lock_acquire>
 8007a9c:	6a23      	ldr	r3, [r4, #32]
 8007a9e:	b11b      	cbz	r3, 8007aa8 <__sinit+0x14>
 8007aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa4:	f7ff bff0 	b.w	8007a88 <__sfp_lock_release>
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <__sinit+0x28>)
 8007aaa:	6223      	str	r3, [r4, #32]
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <__sinit+0x2c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f5      	bne.n	8007aa0 <__sinit+0xc>
 8007ab4:	f7ff ffc4 	bl	8007a40 <global_stdio_init.part.0>
 8007ab8:	e7f2      	b.n	8007aa0 <__sinit+0xc>
 8007aba:	bf00      	nop
 8007abc:	08007a01 	.word	0x08007a01
 8007ac0:	20004948 	.word	0x20004948

08007ac4 <_fwalk_sglue>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	4607      	mov	r7, r0
 8007aca:	4688      	mov	r8, r1
 8007acc:	4614      	mov	r4, r2
 8007ace:	2600      	movs	r6, #0
 8007ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ad8:	d505      	bpl.n	8007ae6 <_fwalk_sglue+0x22>
 8007ada:	6824      	ldr	r4, [r4, #0]
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	d1f7      	bne.n	8007ad0 <_fwalk_sglue+0xc>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d907      	bls.n	8007afc <_fwalk_sglue+0x38>
 8007aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007af0:	3301      	adds	r3, #1
 8007af2:	d003      	beq.n	8007afc <_fwalk_sglue+0x38>
 8007af4:	4629      	mov	r1, r5
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	4306      	orrs	r6, r0
 8007afc:	3568      	adds	r5, #104	; 0x68
 8007afe:	e7e9      	b.n	8007ad4 <_fwalk_sglue+0x10>

08007b00 <sniprintf>:
 8007b00:	b40c      	push	{r2, r3}
 8007b02:	b530      	push	{r4, r5, lr}
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <sniprintf+0x64>)
 8007b06:	1e0c      	subs	r4, r1, #0
 8007b08:	681d      	ldr	r5, [r3, #0]
 8007b0a:	b09d      	sub	sp, #116	; 0x74
 8007b0c:	da08      	bge.n	8007b20 <sniprintf+0x20>
 8007b0e:	238b      	movs	r3, #139	; 0x8b
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	b01d      	add	sp, #116	; 0x74
 8007b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b1c:	b002      	add	sp, #8
 8007b1e:	4770      	bx	lr
 8007b20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b28:	bf0c      	ite	eq
 8007b2a:	4623      	moveq	r3, r4
 8007b2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	9307      	str	r3, [sp, #28]
 8007b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b38:	9002      	str	r0, [sp, #8]
 8007b3a:	9006      	str	r0, [sp, #24]
 8007b3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b40:	4628      	mov	r0, r5
 8007b42:	ab21      	add	r3, sp, #132	; 0x84
 8007b44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b46:	a902      	add	r1, sp, #8
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	f001 fb83 	bl	8009254 <_svfiprintf_r>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	bfbc      	itt	lt
 8007b52:	238b      	movlt	r3, #139	; 0x8b
 8007b54:	602b      	strlt	r3, [r5, #0]
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	d0dd      	beq.n	8007b16 <sniprintf+0x16>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	9b02      	ldr	r3, [sp, #8]
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	e7d9      	b.n	8007b16 <sniprintf+0x16>
 8007b62:	bf00      	nop
 8007b64:	200000c4 	.word	0x200000c4

08007b68 <__sread>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	f000 f86c 	bl	8007c4c <_read_r>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	bfab      	itete	ge
 8007b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b7c:	181b      	addge	r3, r3, r0
 8007b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b82:	bfac      	ite	ge
 8007b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b86:	81a3      	strhlt	r3, [r4, #12]
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__swrite>:
 8007b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	461f      	mov	r7, r3
 8007b90:	898b      	ldrh	r3, [r1, #12]
 8007b92:	4605      	mov	r5, r0
 8007b94:	05db      	lsls	r3, r3, #23
 8007b96:	460c      	mov	r4, r1
 8007b98:	4616      	mov	r6, r2
 8007b9a:	d505      	bpl.n	8007ba8 <__swrite+0x1e>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	f000 f840 	bl	8007c28 <_lseek_r>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	4632      	mov	r2, r6
 8007bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	f000 b867 	b.w	8007c90 <_write_r>

08007bc2 <__sseek>:
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bca:	f000 f82d 	bl	8007c28 <_lseek_r>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	bf15      	itete	ne
 8007bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bde:	81a3      	strheq	r3, [r4, #12]
 8007be0:	bf18      	it	ne
 8007be2:	81a3      	strhne	r3, [r4, #12]
 8007be4:	bd10      	pop	{r4, pc}

08007be6 <__sclose>:
 8007be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bea:	f000 b80d 	b.w	8007c08 <_close_r>

08007bee <memset>:
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d100      	bne.n	8007bf8 <memset+0xa>
 8007bf6:	4770      	bx	lr
 8007bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfc:	e7f9      	b.n	8007bf2 <memset+0x4>
	...

08007c00 <_localeconv_r>:
 8007c00:	4800      	ldr	r0, [pc, #0]	; (8007c04 <_localeconv_r+0x4>)
 8007c02:	4770      	bx	lr
 8007c04:	200001b8 	.word	0x200001b8

08007c08 <_close_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4d05      	ldr	r5, [pc, #20]	; (8007c24 <_close_r+0x1c>)
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7ff f922 	bl	8006e5c <_close>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_close_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_close_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	2000494c 	.word	0x2000494c

08007c28 <_lseek_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	2200      	movs	r2, #0
 8007c32:	4d05      	ldr	r5, [pc, #20]	; (8007c48 <_lseek_r+0x20>)
 8007c34:	602a      	str	r2, [r5, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f7ff f934 	bl	8006ea4 <_lseek>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_lseek_r+0x1e>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_lseek_r+0x1e>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	2000494c 	.word	0x2000494c

08007c4c <_read_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	4611      	mov	r1, r2
 8007c54:	2200      	movs	r2, #0
 8007c56:	4d05      	ldr	r5, [pc, #20]	; (8007c6c <_read_r+0x20>)
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7ff f8c5 	bl	8006dea <_read>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_read_r+0x1e>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_read_r+0x1e>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	2000494c 	.word	0x2000494c

08007c70 <_sbrk_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	2300      	movs	r3, #0
 8007c74:	4d05      	ldr	r5, [pc, #20]	; (8007c8c <_sbrk_r+0x1c>)
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	f7ff f91e 	bl	8006ebc <_sbrk>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_sbrk_r+0x1a>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_sbrk_r+0x1a>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	2000494c 	.word	0x2000494c

08007c90 <_write_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4d05      	ldr	r5, [pc, #20]	; (8007cb0 <_write_r+0x20>)
 8007c9c:	602a      	str	r2, [r5, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f7ff f8c0 	bl	8006e24 <_write>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_write_r+0x1e>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_write_r+0x1e>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	2000494c 	.word	0x2000494c

08007cb4 <__errno>:
 8007cb4:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <__errno+0x8>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	200000c4 	.word	0x200000c4

08007cc0 <__libc_init_array>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	4d0c      	ldr	r5, [pc, #48]	; (8007cf8 <__libc_init_array+0x38>)
 8007cc6:	4c0d      	ldr	r4, [pc, #52]	; (8007cfc <__libc_init_array+0x3c>)
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	d109      	bne.n	8007ce4 <__libc_init_array+0x24>
 8007cd0:	f001 ffc2 	bl	8009c58 <_init>
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	4d0a      	ldr	r5, [pc, #40]	; (8007d00 <__libc_init_array+0x40>)
 8007cd8:	4c0a      	ldr	r4, [pc, #40]	; (8007d04 <__libc_init_array+0x44>)
 8007cda:	1b64      	subs	r4, r4, r5
 8007cdc:	10a4      	asrs	r4, r4, #2
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	d105      	bne.n	8007cee <__libc_init_array+0x2e>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce8:	4798      	blx	r3
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7ee      	b.n	8007ccc <__libc_init_array+0xc>
 8007cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf2:	4798      	blx	r3
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	e7f2      	b.n	8007cde <__libc_init_array+0x1e>
 8007cf8:	08015664 	.word	0x08015664
 8007cfc:	08015664 	.word	0x08015664
 8007d00:	08015664 	.word	0x08015664
 8007d04:	08015668 	.word	0x08015668

08007d08 <__retarget_lock_acquire_recursive>:
 8007d08:	4770      	bx	lr

08007d0a <__retarget_lock_release_recursive>:
 8007d0a:	4770      	bx	lr

08007d0c <memchr>:
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	b2c9      	uxtb	r1, r1
 8007d12:	4402      	add	r2, r0
 8007d14:	4293      	cmp	r3, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	d101      	bne.n	8007d1e <memchr+0x12>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e003      	b.n	8007d26 <memchr+0x1a>
 8007d1e:	7804      	ldrb	r4, [r0, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	428c      	cmp	r4, r1
 8007d24:	d1f6      	bne.n	8007d14 <memchr+0x8>
 8007d26:	bd10      	pop	{r4, pc}

08007d28 <memcpy>:
 8007d28:	440a      	add	r2, r1
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d30:	d100      	bne.n	8007d34 <memcpy+0xc>
 8007d32:	4770      	bx	lr
 8007d34:	b510      	push	{r4, lr}
 8007d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d40:	d1f9      	bne.n	8007d36 <memcpy+0xe>
 8007d42:	bd10      	pop	{r4, pc}

08007d44 <quorem>:
 8007d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	6903      	ldr	r3, [r0, #16]
 8007d4a:	690c      	ldr	r4, [r1, #16]
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	db7f      	blt.n	8007e52 <quorem+0x10e>
 8007d52:	3c01      	subs	r4, #1
 8007d54:	f100 0514 	add.w	r5, r0, #20
 8007d58:	f101 0814 	add.w	r8, r1, #20
 8007d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d7a:	d331      	bcc.n	8007de0 <quorem+0x9c>
 8007d7c:	f04f 0e00 	mov.w	lr, #0
 8007d80:	4640      	mov	r0, r8
 8007d82:	46ac      	mov	ip, r5
 8007d84:	46f2      	mov	sl, lr
 8007d86:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d8a:	b293      	uxth	r3, r2
 8007d8c:	fb06 e303 	mla	r3, r6, r3, lr
 8007d90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d94:	0c1a      	lsrs	r2, r3, #16
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	fb06 220e 	mla	r2, r6, lr, r2
 8007d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007da0:	f8dc a000 	ldr.w	sl, [ip]
 8007da4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007da8:	fa1f fa8a 	uxth.w	sl, sl
 8007dac:	4453      	add	r3, sl
 8007dae:	f8dc a000 	ldr.w	sl, [ip]
 8007db2:	b292      	uxth	r2, r2
 8007db4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc2:	4581      	cmp	r9, r0
 8007dc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dc8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dcc:	d2db      	bcs.n	8007d86 <quorem+0x42>
 8007dce:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dd2:	b92b      	cbnz	r3, 8007de0 <quorem+0x9c>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	429d      	cmp	r5, r3
 8007dda:	461a      	mov	r2, r3
 8007ddc:	d32d      	bcc.n	8007e3a <quorem+0xf6>
 8007dde:	613c      	str	r4, [r7, #16]
 8007de0:	4638      	mov	r0, r7
 8007de2:	f001 f8df 	bl	8008fa4 <__mcmp>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	db23      	blt.n	8007e32 <quorem+0xee>
 8007dea:	4629      	mov	r1, r5
 8007dec:	2000      	movs	r0, #0
 8007dee:	3601      	adds	r6, #1
 8007df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007df4:	f8d1 c000 	ldr.w	ip, [r1]
 8007df8:	b293      	uxth	r3, r2
 8007dfa:	1ac3      	subs	r3, r0, r3
 8007dfc:	0c12      	lsrs	r2, r2, #16
 8007dfe:	fa1f f08c 	uxth.w	r0, ip
 8007e02:	4403      	add	r3, r0
 8007e04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e12:	45c1      	cmp	r9, r8
 8007e14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e18:	f841 3b04 	str.w	r3, [r1], #4
 8007e1c:	d2e8      	bcs.n	8007df0 <quorem+0xac>
 8007e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e26:	b922      	cbnz	r2, 8007e32 <quorem+0xee>
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	429d      	cmp	r5, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	d30a      	bcc.n	8007e46 <quorem+0x102>
 8007e30:	613c      	str	r4, [r7, #16]
 8007e32:	4630      	mov	r0, r6
 8007e34:	b003      	add	sp, #12
 8007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3a:	6812      	ldr	r2, [r2, #0]
 8007e3c:	3b04      	subs	r3, #4
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	d1cd      	bne.n	8007dde <quorem+0x9a>
 8007e42:	3c01      	subs	r4, #1
 8007e44:	e7c8      	b.n	8007dd8 <quorem+0x94>
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	d1f0      	bne.n	8007e30 <quorem+0xec>
 8007e4e:	3c01      	subs	r4, #1
 8007e50:	e7eb      	b.n	8007e2a <quorem+0xe6>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e7ee      	b.n	8007e34 <quorem+0xf0>
	...

08007e58 <_dtoa_r>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	461f      	mov	r7, r3
 8007e60:	69c4      	ldr	r4, [r0, #28]
 8007e62:	b099      	sub	sp, #100	; 0x64
 8007e64:	4605      	mov	r5, r0
 8007e66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e6e:	b974      	cbnz	r4, 8007e8e <_dtoa_r+0x36>
 8007e70:	2010      	movs	r0, #16
 8007e72:	f7ff f883 	bl	8006f7c <malloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	61e8      	str	r0, [r5, #28]
 8007e7a:	b920      	cbnz	r0, 8007e86 <_dtoa_r+0x2e>
 8007e7c:	21ef      	movs	r1, #239	; 0xef
 8007e7e:	4bac      	ldr	r3, [pc, #688]	; (8008130 <_dtoa_r+0x2d8>)
 8007e80:	48ac      	ldr	r0, [pc, #688]	; (8008134 <_dtoa_r+0x2dc>)
 8007e82:	f001 fba9 	bl	80095d8 <__assert_func>
 8007e86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e8a:	6004      	str	r4, [r0, #0]
 8007e8c:	60c4      	str	r4, [r0, #12]
 8007e8e:	69eb      	ldr	r3, [r5, #28]
 8007e90:	6819      	ldr	r1, [r3, #0]
 8007e92:	b151      	cbz	r1, 8007eaa <_dtoa_r+0x52>
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	2301      	movs	r3, #1
 8007e98:	4093      	lsls	r3, r2
 8007e9a:	604a      	str	r2, [r1, #4]
 8007e9c:	608b      	str	r3, [r1, #8]
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fe46 	bl	8008b30 <_Bfree>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	69eb      	ldr	r3, [r5, #28]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	1e3b      	subs	r3, r7, #0
 8007eac:	bfaf      	iteee	ge
 8007eae:	2300      	movge	r3, #0
 8007eb0:	2201      	movlt	r2, #1
 8007eb2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007eb6:	9305      	strlt	r3, [sp, #20]
 8007eb8:	bfa8      	it	ge
 8007eba:	f8c8 3000 	strge.w	r3, [r8]
 8007ebe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007ec2:	4b9d      	ldr	r3, [pc, #628]	; (8008138 <_dtoa_r+0x2e0>)
 8007ec4:	bfb8      	it	lt
 8007ec6:	f8c8 2000 	strlt.w	r2, [r8]
 8007eca:	ea33 0309 	bics.w	r3, r3, r9
 8007ece:	d119      	bne.n	8007f04 <_dtoa_r+0xac>
 8007ed0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ed4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007edc:	4333      	orrs	r3, r6
 8007ede:	f000 8589 	beq.w	80089f4 <_dtoa_r+0xb9c>
 8007ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ee4:	b953      	cbnz	r3, 8007efc <_dtoa_r+0xa4>
 8007ee6:	4b95      	ldr	r3, [pc, #596]	; (800813c <_dtoa_r+0x2e4>)
 8007ee8:	e023      	b.n	8007f32 <_dtoa_r+0xda>
 8007eea:	4b95      	ldr	r3, [pc, #596]	; (8008140 <_dtoa_r+0x2e8>)
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	9803      	ldr	r0, [sp, #12]
 8007ef6:	b019      	add	sp, #100	; 0x64
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	4b8f      	ldr	r3, [pc, #572]	; (800813c <_dtoa_r+0x2e4>)
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	3303      	adds	r3, #3
 8007f02:	e7f5      	b.n	8007ef0 <_dtoa_r+0x98>
 8007f04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f10:	2200      	movs	r2, #0
 8007f12:	2300      	movs	r3, #0
 8007f14:	f7f8 fd58 	bl	80009c8 <__aeabi_dcmpeq>
 8007f18:	4680      	mov	r8, r0
 8007f1a:	b160      	cbz	r0, 8007f36 <_dtoa_r+0xde>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8562 	beq.w	80089ee <_dtoa_r+0xb96>
 8007f2a:	4b86      	ldr	r3, [pc, #536]	; (8008144 <_dtoa_r+0x2ec>)
 8007f2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	e7de      	b.n	8007ef4 <_dtoa_r+0x9c>
 8007f36:	ab16      	add	r3, sp, #88	; 0x58
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	ab17      	add	r3, sp, #92	; 0x5c
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4628      	mov	r0, r5
 8007f40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f44:	f001 f8d6 	bl	80090f4 <__d2b>
 8007f48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d07e      	beq.n	8008050 <_dtoa_r+0x1f8>
 8007f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f58:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f60:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b75      	ldr	r3, [pc, #468]	; (8008148 <_dtoa_r+0x2f0>)
 8007f72:	f7f8 f909 	bl	8000188 <__aeabi_dsub>
 8007f76:	a368      	add	r3, pc, #416	; (adr r3, 8008118 <_dtoa_r+0x2c0>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 fabc 	bl	80004f8 <__aeabi_dmul>
 8007f80:	a367      	add	r3, pc, #412	; (adr r3, 8008120 <_dtoa_r+0x2c8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f901 	bl	800018c <__adddf3>
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	460f      	mov	r7, r1
 8007f90:	f7f8 fa48 	bl	8000424 <__aeabi_i2d>
 8007f94:	a364      	add	r3, pc, #400	; (adr r3, 8008128 <_dtoa_r+0x2d0>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 faad 	bl	80004f8 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 f8f1 	bl	800018c <__adddf3>
 8007faa:	4606      	mov	r6, r0
 8007fac:	460f      	mov	r7, r1
 8007fae:	f7f8 fd53 	bl	8000a58 <__aeabi_d2iz>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4683      	mov	fp, r0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	4639      	mov	r1, r7
 8007fbc:	f7f8 fd0e 	bl	80009dc <__aeabi_dcmplt>
 8007fc0:	b148      	cbz	r0, 8007fd6 <_dtoa_r+0x17e>
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f7f8 fa2e 	bl	8000424 <__aeabi_i2d>
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	f7f8 fcfc 	bl	80009c8 <__aeabi_dcmpeq>
 8007fd0:	b908      	cbnz	r0, 8007fd6 <_dtoa_r+0x17e>
 8007fd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fd6:	f1bb 0f16 	cmp.w	fp, #22
 8007fda:	d857      	bhi.n	800808c <_dtoa_r+0x234>
 8007fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fe0:	4b5a      	ldr	r3, [pc, #360]	; (800814c <_dtoa_r+0x2f4>)
 8007fe2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fcf7 	bl	80009dc <__aeabi_dcmplt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d04e      	beq.n	8008090 <_dtoa_r+0x238>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ffa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ffc:	1b1b      	subs	r3, r3, r4
 8007ffe:	1e5a      	subs	r2, r3, #1
 8008000:	bf46      	itte	mi
 8008002:	f1c3 0901 	rsbmi	r9, r3, #1
 8008006:	2300      	movmi	r3, #0
 8008008:	f04f 0900 	movpl.w	r9, #0
 800800c:	9209      	str	r2, [sp, #36]	; 0x24
 800800e:	bf48      	it	mi
 8008010:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008012:	f1bb 0f00 	cmp.w	fp, #0
 8008016:	db3d      	blt.n	8008094 <_dtoa_r+0x23c>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800801e:	445b      	add	r3, fp
 8008020:	9309      	str	r3, [sp, #36]	; 0x24
 8008022:	2300      	movs	r3, #0
 8008024:	930a      	str	r3, [sp, #40]	; 0x28
 8008026:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008028:	2b09      	cmp	r3, #9
 800802a:	d867      	bhi.n	80080fc <_dtoa_r+0x2a4>
 800802c:	2b05      	cmp	r3, #5
 800802e:	bfc4      	itt	gt
 8008030:	3b04      	subgt	r3, #4
 8008032:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008036:	bfc8      	it	gt
 8008038:	2400      	movgt	r4, #0
 800803a:	f1a3 0302 	sub.w	r3, r3, #2
 800803e:	bfd8      	it	le
 8008040:	2401      	movle	r4, #1
 8008042:	2b03      	cmp	r3, #3
 8008044:	f200 8086 	bhi.w	8008154 <_dtoa_r+0x2fc>
 8008048:	e8df f003 	tbb	[pc, r3]
 800804c:	5637392c 	.word	0x5637392c
 8008050:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008054:	441c      	add	r4, r3
 8008056:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800805a:	2b20      	cmp	r3, #32
 800805c:	bfc1      	itttt	gt
 800805e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008062:	fa09 f903 	lslgt.w	r9, r9, r3
 8008066:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800806a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800806e:	bfd6      	itet	le
 8008070:	f1c3 0320 	rsble	r3, r3, #32
 8008074:	ea49 0003 	orrgt.w	r0, r9, r3
 8008078:	fa06 f003 	lslle.w	r0, r6, r3
 800807c:	f7f8 f9c2 	bl	8000404 <__aeabi_ui2d>
 8008080:	2201      	movs	r2, #1
 8008082:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008086:	3c01      	subs	r4, #1
 8008088:	9213      	str	r2, [sp, #76]	; 0x4c
 800808a:	e76f      	b.n	8007f6c <_dtoa_r+0x114>
 800808c:	2301      	movs	r3, #1
 800808e:	e7b3      	b.n	8007ff8 <_dtoa_r+0x1a0>
 8008090:	900f      	str	r0, [sp, #60]	; 0x3c
 8008092:	e7b2      	b.n	8007ffa <_dtoa_r+0x1a2>
 8008094:	f1cb 0300 	rsb	r3, fp, #0
 8008098:	930a      	str	r3, [sp, #40]	; 0x28
 800809a:	2300      	movs	r3, #0
 800809c:	eba9 090b 	sub.w	r9, r9, fp
 80080a0:	930e      	str	r3, [sp, #56]	; 0x38
 80080a2:	e7c0      	b.n	8008026 <_dtoa_r+0x1ce>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc55      	bgt.n	800815a <_dtoa_r+0x302>
 80080ae:	2301      	movs	r3, #1
 80080b0:	461a      	mov	r2, r3
 80080b2:	9306      	str	r3, [sp, #24]
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80080b8:	e00b      	b.n	80080d2 <_dtoa_r+0x27a>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e7f3      	b.n	80080a6 <_dtoa_r+0x24e>
 80080be:	2300      	movs	r3, #0
 80080c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080c4:	445b      	add	r3, fp
 80080c6:	9306      	str	r3, [sp, #24]
 80080c8:	3301      	adds	r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	9308      	str	r3, [sp, #32]
 80080ce:	bfb8      	it	lt
 80080d0:	2301      	movlt	r3, #1
 80080d2:	2100      	movs	r1, #0
 80080d4:	2204      	movs	r2, #4
 80080d6:	69e8      	ldr	r0, [r5, #28]
 80080d8:	f102 0614 	add.w	r6, r2, #20
 80080dc:	429e      	cmp	r6, r3
 80080de:	d940      	bls.n	8008162 <_dtoa_r+0x30a>
 80080e0:	6041      	str	r1, [r0, #4]
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 fce4 	bl	8008ab0 <_Balloc>
 80080e8:	9003      	str	r0, [sp, #12]
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d13c      	bne.n	8008168 <_dtoa_r+0x310>
 80080ee:	4602      	mov	r2, r0
 80080f0:	f240 11af 	movw	r1, #431	; 0x1af
 80080f4:	4b16      	ldr	r3, [pc, #88]	; (8008150 <_dtoa_r+0x2f8>)
 80080f6:	e6c3      	b.n	8007e80 <_dtoa_r+0x28>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e7e1      	b.n	80080c0 <_dtoa_r+0x268>
 80080fc:	2401      	movs	r4, #1
 80080fe:	2300      	movs	r3, #0
 8008100:	940b      	str	r4, [sp, #44]	; 0x2c
 8008102:	9322      	str	r3, [sp, #136]	; 0x88
 8008104:	f04f 33ff 	mov.w	r3, #4294967295
 8008108:	2200      	movs	r2, #0
 800810a:	9306      	str	r3, [sp, #24]
 800810c:	9308      	str	r3, [sp, #32]
 800810e:	2312      	movs	r3, #18
 8008110:	e7d1      	b.n	80080b6 <_dtoa_r+0x25e>
 8008112:	bf00      	nop
 8008114:	f3af 8000 	nop.w
 8008118:	636f4361 	.word	0x636f4361
 800811c:	3fd287a7 	.word	0x3fd287a7
 8008120:	8b60c8b3 	.word	0x8b60c8b3
 8008124:	3fc68a28 	.word	0x3fc68a28
 8008128:	509f79fb 	.word	0x509f79fb
 800812c:	3fd34413 	.word	0x3fd34413
 8008130:	08015335 	.word	0x08015335
 8008134:	0801534c 	.word	0x0801534c
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	08015331 	.word	0x08015331
 8008140:	08015328 	.word	0x08015328
 8008144:	08015305 	.word	0x08015305
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	08015438 	.word	0x08015438
 8008150:	080153a4 	.word	0x080153a4
 8008154:	2301      	movs	r3, #1
 8008156:	930b      	str	r3, [sp, #44]	; 0x2c
 8008158:	e7d4      	b.n	8008104 <_dtoa_r+0x2ac>
 800815a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800815c:	9306      	str	r3, [sp, #24]
 800815e:	9308      	str	r3, [sp, #32]
 8008160:	e7b7      	b.n	80080d2 <_dtoa_r+0x27a>
 8008162:	3101      	adds	r1, #1
 8008164:	0052      	lsls	r2, r2, #1
 8008166:	e7b7      	b.n	80080d8 <_dtoa_r+0x280>
 8008168:	69eb      	ldr	r3, [r5, #28]
 800816a:	9a03      	ldr	r2, [sp, #12]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	9b08      	ldr	r3, [sp, #32]
 8008170:	2b0e      	cmp	r3, #14
 8008172:	f200 80a8 	bhi.w	80082c6 <_dtoa_r+0x46e>
 8008176:	2c00      	cmp	r4, #0
 8008178:	f000 80a5 	beq.w	80082c6 <_dtoa_r+0x46e>
 800817c:	f1bb 0f00 	cmp.w	fp, #0
 8008180:	dd34      	ble.n	80081ec <_dtoa_r+0x394>
 8008182:	4b9a      	ldr	r3, [pc, #616]	; (80083ec <_dtoa_r+0x594>)
 8008184:	f00b 020f 	and.w	r2, fp, #15
 8008188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800818c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008190:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008194:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008198:	ea4f 142b 	mov.w	r4, fp, asr #4
 800819c:	d016      	beq.n	80081cc <_dtoa_r+0x374>
 800819e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a2:	4b93      	ldr	r3, [pc, #588]	; (80083f0 <_dtoa_r+0x598>)
 80081a4:	2703      	movs	r7, #3
 80081a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081aa:	f7f8 facf 	bl	800074c <__aeabi_ddiv>
 80081ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b2:	f004 040f 	and.w	r4, r4, #15
 80081b6:	4e8e      	ldr	r6, [pc, #568]	; (80083f0 <_dtoa_r+0x598>)
 80081b8:	b954      	cbnz	r4, 80081d0 <_dtoa_r+0x378>
 80081ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c2:	f7f8 fac3 	bl	800074c <__aeabi_ddiv>
 80081c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ca:	e029      	b.n	8008220 <_dtoa_r+0x3c8>
 80081cc:	2702      	movs	r7, #2
 80081ce:	e7f2      	b.n	80081b6 <_dtoa_r+0x35e>
 80081d0:	07e1      	lsls	r1, r4, #31
 80081d2:	d508      	bpl.n	80081e6 <_dtoa_r+0x38e>
 80081d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081dc:	f7f8 f98c 	bl	80004f8 <__aeabi_dmul>
 80081e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081e4:	3701      	adds	r7, #1
 80081e6:	1064      	asrs	r4, r4, #1
 80081e8:	3608      	adds	r6, #8
 80081ea:	e7e5      	b.n	80081b8 <_dtoa_r+0x360>
 80081ec:	f000 80a5 	beq.w	800833a <_dtoa_r+0x4e2>
 80081f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081f4:	f1cb 0400 	rsb	r4, fp, #0
 80081f8:	4b7c      	ldr	r3, [pc, #496]	; (80083ec <_dtoa_r+0x594>)
 80081fa:	f004 020f 	and.w	r2, r4, #15
 80081fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f8 f977 	bl	80004f8 <__aeabi_dmul>
 800820a:	2702      	movs	r7, #2
 800820c:	2300      	movs	r3, #0
 800820e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008212:	4e77      	ldr	r6, [pc, #476]	; (80083f0 <_dtoa_r+0x598>)
 8008214:	1124      	asrs	r4, r4, #4
 8008216:	2c00      	cmp	r4, #0
 8008218:	f040 8084 	bne.w	8008324 <_dtoa_r+0x4cc>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1d2      	bne.n	80081c6 <_dtoa_r+0x36e>
 8008220:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008224:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8087 	beq.w	800833e <_dtoa_r+0x4e6>
 8008230:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008234:	2200      	movs	r2, #0
 8008236:	4b6f      	ldr	r3, [pc, #444]	; (80083f4 <_dtoa_r+0x59c>)
 8008238:	f7f8 fbd0 	bl	80009dc <__aeabi_dcmplt>
 800823c:	2800      	cmp	r0, #0
 800823e:	d07e      	beq.n	800833e <_dtoa_r+0x4e6>
 8008240:	9b08      	ldr	r3, [sp, #32]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d07b      	beq.n	800833e <_dtoa_r+0x4e6>
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dd38      	ble.n	80082be <_dtoa_r+0x466>
 800824c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008250:	2200      	movs	r2, #0
 8008252:	4b69      	ldr	r3, [pc, #420]	; (80083f8 <_dtoa_r+0x5a0>)
 8008254:	f7f8 f950 	bl	80004f8 <__aeabi_dmul>
 8008258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800825c:	9c06      	ldr	r4, [sp, #24]
 800825e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008262:	3701      	adds	r7, #1
 8008264:	4638      	mov	r0, r7
 8008266:	f7f8 f8dd 	bl	8000424 <__aeabi_i2d>
 800826a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800826e:	f7f8 f943 	bl	80004f8 <__aeabi_dmul>
 8008272:	2200      	movs	r2, #0
 8008274:	4b61      	ldr	r3, [pc, #388]	; (80083fc <_dtoa_r+0x5a4>)
 8008276:	f7f7 ff89 	bl	800018c <__adddf3>
 800827a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800827e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008282:	9611      	str	r6, [sp, #68]	; 0x44
 8008284:	2c00      	cmp	r4, #0
 8008286:	d15d      	bne.n	8008344 <_dtoa_r+0x4ec>
 8008288:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800828c:	2200      	movs	r2, #0
 800828e:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <_dtoa_r+0x5a8>)
 8008290:	f7f7 ff7a 	bl	8000188 <__aeabi_dsub>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800829c:	4633      	mov	r3, r6
 800829e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082a0:	f7f8 fbba 	bl	8000a18 <__aeabi_dcmpgt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 8295 	bne.w	80087d4 <_dtoa_r+0x97c>
 80082aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082b4:	f7f8 fb92 	bl	80009dc <__aeabi_dcmplt>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 8289 	bne.w	80087d0 <_dtoa_r+0x978>
 80082be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80082c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f2c0 8151 	blt.w	8008570 <_dtoa_r+0x718>
 80082ce:	f1bb 0f0e 	cmp.w	fp, #14
 80082d2:	f300 814d 	bgt.w	8008570 <_dtoa_r+0x718>
 80082d6:	4b45      	ldr	r3, [pc, #276]	; (80083ec <_dtoa_r+0x594>)
 80082d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80082e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f280 80da 	bge.w	80084a0 <_dtoa_r+0x648>
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f300 80d6 	bgt.w	80084a0 <_dtoa_r+0x648>
 80082f4:	f040 826b 	bne.w	80087ce <_dtoa_r+0x976>
 80082f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082fc:	2200      	movs	r2, #0
 80082fe:	4b40      	ldr	r3, [pc, #256]	; (8008400 <_dtoa_r+0x5a8>)
 8008300:	f7f8 f8fa 	bl	80004f8 <__aeabi_dmul>
 8008304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008308:	f7f8 fb7c 	bl	8000a04 <__aeabi_dcmpge>
 800830c:	9c08      	ldr	r4, [sp, #32]
 800830e:	4626      	mov	r6, r4
 8008310:	2800      	cmp	r0, #0
 8008312:	f040 8241 	bne.w	8008798 <_dtoa_r+0x940>
 8008316:	2331      	movs	r3, #49	; 0x31
 8008318:	9f03      	ldr	r7, [sp, #12]
 800831a:	f10b 0b01 	add.w	fp, fp, #1
 800831e:	f807 3b01 	strb.w	r3, [r7], #1
 8008322:	e23d      	b.n	80087a0 <_dtoa_r+0x948>
 8008324:	07e2      	lsls	r2, r4, #31
 8008326:	d505      	bpl.n	8008334 <_dtoa_r+0x4dc>
 8008328:	e9d6 2300 	ldrd	r2, r3, [r6]
 800832c:	f7f8 f8e4 	bl	80004f8 <__aeabi_dmul>
 8008330:	2301      	movs	r3, #1
 8008332:	3701      	adds	r7, #1
 8008334:	1064      	asrs	r4, r4, #1
 8008336:	3608      	adds	r6, #8
 8008338:	e76d      	b.n	8008216 <_dtoa_r+0x3be>
 800833a:	2702      	movs	r7, #2
 800833c:	e770      	b.n	8008220 <_dtoa_r+0x3c8>
 800833e:	46d8      	mov	r8, fp
 8008340:	9c08      	ldr	r4, [sp, #32]
 8008342:	e78f      	b.n	8008264 <_dtoa_r+0x40c>
 8008344:	9903      	ldr	r1, [sp, #12]
 8008346:	4b29      	ldr	r3, [pc, #164]	; (80083ec <_dtoa_r+0x594>)
 8008348:	4421      	add	r1, r4
 800834a:	9112      	str	r1, [sp, #72]	; 0x48
 800834c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800834e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008352:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800835a:	2900      	cmp	r1, #0
 800835c:	d054      	beq.n	8008408 <_dtoa_r+0x5b0>
 800835e:	2000      	movs	r0, #0
 8008360:	4928      	ldr	r1, [pc, #160]	; (8008404 <_dtoa_r+0x5ac>)
 8008362:	f7f8 f9f3 	bl	800074c <__aeabi_ddiv>
 8008366:	463b      	mov	r3, r7
 8008368:	4632      	mov	r2, r6
 800836a:	f7f7 ff0d 	bl	8000188 <__aeabi_dsub>
 800836e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008372:	9f03      	ldr	r7, [sp, #12]
 8008374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008378:	f7f8 fb6e 	bl	8000a58 <__aeabi_d2iz>
 800837c:	4604      	mov	r4, r0
 800837e:	f7f8 f851 	bl	8000424 <__aeabi_i2d>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800838a:	f7f7 fefd 	bl	8000188 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	3430      	adds	r4, #48	; 0x30
 8008394:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800839c:	f807 4b01 	strb.w	r4, [r7], #1
 80083a0:	f7f8 fb1c 	bl	80009dc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d173      	bne.n	8008490 <_dtoa_r+0x638>
 80083a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ac:	2000      	movs	r0, #0
 80083ae:	4911      	ldr	r1, [pc, #68]	; (80083f4 <_dtoa_r+0x59c>)
 80083b0:	f7f7 feea 	bl	8000188 <__aeabi_dsub>
 80083b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083b8:	f7f8 fb10 	bl	80009dc <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 80b6 	bne.w	800852e <_dtoa_r+0x6d6>
 80083c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083c4:	429f      	cmp	r7, r3
 80083c6:	f43f af7a 	beq.w	80082be <_dtoa_r+0x466>
 80083ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ce:	2200      	movs	r2, #0
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <_dtoa_r+0x5a0>)
 80083d2:	f7f8 f891 	bl	80004f8 <__aeabi_dmul>
 80083d6:	2200      	movs	r2, #0
 80083d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <_dtoa_r+0x5a0>)
 80083e2:	f7f8 f889 	bl	80004f8 <__aeabi_dmul>
 80083e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ea:	e7c3      	b.n	8008374 <_dtoa_r+0x51c>
 80083ec:	08015438 	.word	0x08015438
 80083f0:	08015410 	.word	0x08015410
 80083f4:	3ff00000 	.word	0x3ff00000
 80083f8:	40240000 	.word	0x40240000
 80083fc:	401c0000 	.word	0x401c0000
 8008400:	40140000 	.word	0x40140000
 8008404:	3fe00000 	.word	0x3fe00000
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 f874 	bl	80004f8 <__aeabi_dmul>
 8008410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008412:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008416:	9c03      	ldr	r4, [sp, #12]
 8008418:	9314      	str	r3, [sp, #80]	; 0x50
 800841a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800841e:	f7f8 fb1b 	bl	8000a58 <__aeabi_d2iz>
 8008422:	9015      	str	r0, [sp, #84]	; 0x54
 8008424:	f7f7 fffe 	bl	8000424 <__aeabi_i2d>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008430:	f7f7 feaa 	bl	8000188 <__aeabi_dsub>
 8008434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008436:	4606      	mov	r6, r0
 8008438:	3330      	adds	r3, #48	; 0x30
 800843a:	f804 3b01 	strb.w	r3, [r4], #1
 800843e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008440:	460f      	mov	r7, r1
 8008442:	429c      	cmp	r4, r3
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	d124      	bne.n	8008494 <_dtoa_r+0x63c>
 800844a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800844e:	4baf      	ldr	r3, [pc, #700]	; (800870c <_dtoa_r+0x8b4>)
 8008450:	f7f7 fe9c 	bl	800018c <__adddf3>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 fadc 	bl	8000a18 <__aeabi_dcmpgt>
 8008460:	2800      	cmp	r0, #0
 8008462:	d163      	bne.n	800852c <_dtoa_r+0x6d4>
 8008464:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008468:	2000      	movs	r0, #0
 800846a:	49a8      	ldr	r1, [pc, #672]	; (800870c <_dtoa_r+0x8b4>)
 800846c:	f7f7 fe8c 	bl	8000188 <__aeabi_dsub>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4630      	mov	r0, r6
 8008476:	4639      	mov	r1, r7
 8008478:	f7f8 fab0 	bl	80009dc <__aeabi_dcmplt>
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f af1e 	beq.w	80082be <_dtoa_r+0x466>
 8008482:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008484:	1e7b      	subs	r3, r7, #1
 8008486:	9314      	str	r3, [sp, #80]	; 0x50
 8008488:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800848c:	2b30      	cmp	r3, #48	; 0x30
 800848e:	d0f8      	beq.n	8008482 <_dtoa_r+0x62a>
 8008490:	46c3      	mov	fp, r8
 8008492:	e03b      	b.n	800850c <_dtoa_r+0x6b4>
 8008494:	4b9e      	ldr	r3, [pc, #632]	; (8008710 <_dtoa_r+0x8b8>)
 8008496:	f7f8 f82f 	bl	80004f8 <__aeabi_dmul>
 800849a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800849e:	e7bc      	b.n	800841a <_dtoa_r+0x5c2>
 80084a0:	9f03      	ldr	r7, [sp, #12]
 80084a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80084a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f8 f94d 	bl	800074c <__aeabi_ddiv>
 80084b2:	f7f8 fad1 	bl	8000a58 <__aeabi_d2iz>
 80084b6:	4604      	mov	r4, r0
 80084b8:	f7f7 ffb4 	bl	8000424 <__aeabi_i2d>
 80084bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084c0:	f7f8 f81a 	bl	80004f8 <__aeabi_dmul>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4640      	mov	r0, r8
 80084ca:	4649      	mov	r1, r9
 80084cc:	f7f7 fe5c 	bl	8000188 <__aeabi_dsub>
 80084d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80084d4:	f807 6b01 	strb.w	r6, [r7], #1
 80084d8:	9e03      	ldr	r6, [sp, #12]
 80084da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80084de:	1bbe      	subs	r6, r7, r6
 80084e0:	45b4      	cmp	ip, r6
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	d136      	bne.n	8008556 <_dtoa_r+0x6fe>
 80084e8:	f7f7 fe50 	bl	800018c <__adddf3>
 80084ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f0:	4680      	mov	r8, r0
 80084f2:	4689      	mov	r9, r1
 80084f4:	f7f8 fa90 	bl	8000a18 <__aeabi_dcmpgt>
 80084f8:	bb58      	cbnz	r0, 8008552 <_dtoa_r+0x6fa>
 80084fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084fe:	4640      	mov	r0, r8
 8008500:	4649      	mov	r1, r9
 8008502:	f7f8 fa61 	bl	80009c8 <__aeabi_dcmpeq>
 8008506:	b108      	cbz	r0, 800850c <_dtoa_r+0x6b4>
 8008508:	07e3      	lsls	r3, r4, #31
 800850a:	d422      	bmi.n	8008552 <_dtoa_r+0x6fa>
 800850c:	4651      	mov	r1, sl
 800850e:	4628      	mov	r0, r5
 8008510:	f000 fb0e 	bl	8008b30 <_Bfree>
 8008514:	2300      	movs	r3, #0
 8008516:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008518:	703b      	strb	r3, [r7, #0]
 800851a:	f10b 0301 	add.w	r3, fp, #1
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008522:	2b00      	cmp	r3, #0
 8008524:	f43f ace6 	beq.w	8007ef4 <_dtoa_r+0x9c>
 8008528:	601f      	str	r7, [r3, #0]
 800852a:	e4e3      	b.n	8007ef4 <_dtoa_r+0x9c>
 800852c:	4627      	mov	r7, r4
 800852e:	463b      	mov	r3, r7
 8008530:	461f      	mov	r7, r3
 8008532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008536:	2a39      	cmp	r2, #57	; 0x39
 8008538:	d107      	bne.n	800854a <_dtoa_r+0x6f2>
 800853a:	9a03      	ldr	r2, [sp, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d1f7      	bne.n	8008530 <_dtoa_r+0x6d8>
 8008540:	2230      	movs	r2, #48	; 0x30
 8008542:	9903      	ldr	r1, [sp, #12]
 8008544:	f108 0801 	add.w	r8, r8, #1
 8008548:	700a      	strb	r2, [r1, #0]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	3201      	adds	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e79e      	b.n	8008490 <_dtoa_r+0x638>
 8008552:	46d8      	mov	r8, fp
 8008554:	e7eb      	b.n	800852e <_dtoa_r+0x6d6>
 8008556:	2200      	movs	r2, #0
 8008558:	4b6d      	ldr	r3, [pc, #436]	; (8008710 <_dtoa_r+0x8b8>)
 800855a:	f7f7 ffcd 	bl	80004f8 <__aeabi_dmul>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4680      	mov	r8, r0
 8008564:	4689      	mov	r9, r1
 8008566:	f7f8 fa2f 	bl	80009c8 <__aeabi_dcmpeq>
 800856a:	2800      	cmp	r0, #0
 800856c:	d09b      	beq.n	80084a6 <_dtoa_r+0x64e>
 800856e:	e7cd      	b.n	800850c <_dtoa_r+0x6b4>
 8008570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008572:	2a00      	cmp	r2, #0
 8008574:	f000 80c4 	beq.w	8008700 <_dtoa_r+0x8a8>
 8008578:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800857a:	2a01      	cmp	r2, #1
 800857c:	f300 80a8 	bgt.w	80086d0 <_dtoa_r+0x878>
 8008580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008582:	2a00      	cmp	r2, #0
 8008584:	f000 80a0 	beq.w	80086c8 <_dtoa_r+0x870>
 8008588:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800858c:	464f      	mov	r7, r9
 800858e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008592:	2101      	movs	r1, #1
 8008594:	441a      	add	r2, r3
 8008596:	4628      	mov	r0, r5
 8008598:	4499      	add	r9, r3
 800859a:	9209      	str	r2, [sp, #36]	; 0x24
 800859c:	f000 fb7e 	bl	8008c9c <__i2b>
 80085a0:	4606      	mov	r6, r0
 80085a2:	b15f      	cbz	r7, 80085bc <_dtoa_r+0x764>
 80085a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dd08      	ble.n	80085bc <_dtoa_r+0x764>
 80085aa:	42bb      	cmp	r3, r7
 80085ac:	bfa8      	it	ge
 80085ae:	463b      	movge	r3, r7
 80085b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b2:	eba9 0903 	sub.w	r9, r9, r3
 80085b6:	1aff      	subs	r7, r7, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085be:	b1f3      	cbz	r3, 80085fe <_dtoa_r+0x7a6>
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a0 	beq.w	8008708 <_dtoa_r+0x8b0>
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	dd10      	ble.n	80085ee <_dtoa_r+0x796>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4622      	mov	r2, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 fc21 	bl	8008e18 <__pow5mult>
 80085d6:	4652      	mov	r2, sl
 80085d8:	4601      	mov	r1, r0
 80085da:	4606      	mov	r6, r0
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 fb73 	bl	8008cc8 <__multiply>
 80085e2:	4680      	mov	r8, r0
 80085e4:	4651      	mov	r1, sl
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 faa2 	bl	8008b30 <_Bfree>
 80085ec:	46c2      	mov	sl, r8
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	1b1a      	subs	r2, r3, r4
 80085f2:	d004      	beq.n	80085fe <_dtoa_r+0x7a6>
 80085f4:	4651      	mov	r1, sl
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fc0e 	bl	8008e18 <__pow5mult>
 80085fc:	4682      	mov	sl, r0
 80085fe:	2101      	movs	r1, #1
 8008600:	4628      	mov	r0, r5
 8008602:	f000 fb4b 	bl	8008c9c <__i2b>
 8008606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008608:	4604      	mov	r4, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	f340 8082 	ble.w	8008714 <_dtoa_r+0x8bc>
 8008610:	461a      	mov	r2, r3
 8008612:	4601      	mov	r1, r0
 8008614:	4628      	mov	r0, r5
 8008616:	f000 fbff 	bl	8008e18 <__pow5mult>
 800861a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800861c:	4604      	mov	r4, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	dd7b      	ble.n	800871a <_dtoa_r+0x8c2>
 8008622:	f04f 0800 	mov.w	r8, #0
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800862c:	6918      	ldr	r0, [r3, #16]
 800862e:	f000 fae7 	bl	8008c00 <__hi0bits>
 8008632:	f1c0 0020 	rsb	r0, r0, #32
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	4418      	add	r0, r3
 800863a:	f010 001f 	ands.w	r0, r0, #31
 800863e:	f000 8092 	beq.w	8008766 <_dtoa_r+0x90e>
 8008642:	f1c0 0320 	rsb	r3, r0, #32
 8008646:	2b04      	cmp	r3, #4
 8008648:	f340 8085 	ble.w	8008756 <_dtoa_r+0x8fe>
 800864c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864e:	f1c0 001c 	rsb	r0, r0, #28
 8008652:	4403      	add	r3, r0
 8008654:	4481      	add	r9, r0
 8008656:	4407      	add	r7, r0
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	f1b9 0f00 	cmp.w	r9, #0
 800865e:	dd05      	ble.n	800866c <_dtoa_r+0x814>
 8008660:	4651      	mov	r1, sl
 8008662:	464a      	mov	r2, r9
 8008664:	4628      	mov	r0, r5
 8008666:	f000 fc31 	bl	8008ecc <__lshift>
 800866a:	4682      	mov	sl, r0
 800866c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	dd05      	ble.n	800867e <_dtoa_r+0x826>
 8008672:	4621      	mov	r1, r4
 8008674:	461a      	mov	r2, r3
 8008676:	4628      	mov	r0, r5
 8008678:	f000 fc28 	bl	8008ecc <__lshift>
 800867c:	4604      	mov	r4, r0
 800867e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d072      	beq.n	800876a <_dtoa_r+0x912>
 8008684:	4621      	mov	r1, r4
 8008686:	4650      	mov	r0, sl
 8008688:	f000 fc8c 	bl	8008fa4 <__mcmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	da6c      	bge.n	800876a <_dtoa_r+0x912>
 8008690:	2300      	movs	r3, #0
 8008692:	4651      	mov	r1, sl
 8008694:	220a      	movs	r2, #10
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fa6c 	bl	8008b74 <__multadd>
 800869c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869e:	4682      	mov	sl, r0
 80086a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 81ac 	beq.w	8008a02 <_dtoa_r+0xbaa>
 80086aa:	2300      	movs	r3, #0
 80086ac:	4631      	mov	r1, r6
 80086ae:	220a      	movs	r2, #10
 80086b0:	4628      	mov	r0, r5
 80086b2:	f000 fa5f 	bl	8008b74 <__multadd>
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	4606      	mov	r6, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f300 8093 	bgt.w	80087e6 <_dtoa_r+0x98e>
 80086c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	dc59      	bgt.n	800877a <_dtoa_r+0x922>
 80086c6:	e08e      	b.n	80087e6 <_dtoa_r+0x98e>
 80086c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ce:	e75d      	b.n	800858c <_dtoa_r+0x734>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	1e5c      	subs	r4, r3, #1
 80086d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	bfbf      	itttt	lt
 80086da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80086de:	1ae3      	sublt	r3, r4, r3
 80086e0:	18d2      	addlt	r2, r2, r3
 80086e2:	bfa8      	it	ge
 80086e4:	1b1c      	subge	r4, r3, r4
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	bfbe      	ittt	lt
 80086ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 80086ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80086ee:	2400      	movlt	r4, #0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfb5      	itete	lt
 80086f4:	eba9 0703 	sublt.w	r7, r9, r3
 80086f8:	464f      	movge	r7, r9
 80086fa:	2300      	movlt	r3, #0
 80086fc:	9b08      	ldrge	r3, [sp, #32]
 80086fe:	e747      	b.n	8008590 <_dtoa_r+0x738>
 8008700:	464f      	mov	r7, r9
 8008702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008704:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008706:	e74c      	b.n	80085a2 <_dtoa_r+0x74a>
 8008708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800870a:	e773      	b.n	80085f4 <_dtoa_r+0x79c>
 800870c:	3fe00000 	.word	0x3fe00000
 8008710:	40240000 	.word	0x40240000
 8008714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008716:	2b01      	cmp	r3, #1
 8008718:	dc18      	bgt.n	800874c <_dtoa_r+0x8f4>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	b9b3      	cbnz	r3, 800874c <_dtoa_r+0x8f4>
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008724:	b993      	cbnz	r3, 800874c <_dtoa_r+0x8f4>
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800872c:	0d1b      	lsrs	r3, r3, #20
 800872e:	051b      	lsls	r3, r3, #20
 8008730:	b17b      	cbz	r3, 8008752 <_dtoa_r+0x8fa>
 8008732:	f04f 0801 	mov.w	r8, #1
 8008736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008738:	f109 0901 	add.w	r9, r9, #1
 800873c:	3301      	adds	r3, #1
 800873e:	9309      	str	r3, [sp, #36]	; 0x24
 8008740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	f47f af6f 	bne.w	8008626 <_dtoa_r+0x7ce>
 8008748:	2001      	movs	r0, #1
 800874a:	e774      	b.n	8008636 <_dtoa_r+0x7de>
 800874c:	f04f 0800 	mov.w	r8, #0
 8008750:	e7f6      	b.n	8008740 <_dtoa_r+0x8e8>
 8008752:	4698      	mov	r8, r3
 8008754:	e7f4      	b.n	8008740 <_dtoa_r+0x8e8>
 8008756:	d080      	beq.n	800865a <_dtoa_r+0x802>
 8008758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875a:	331c      	adds	r3, #28
 800875c:	441a      	add	r2, r3
 800875e:	4499      	add	r9, r3
 8008760:	441f      	add	r7, r3
 8008762:	9209      	str	r2, [sp, #36]	; 0x24
 8008764:	e779      	b.n	800865a <_dtoa_r+0x802>
 8008766:	4603      	mov	r3, r0
 8008768:	e7f6      	b.n	8008758 <_dtoa_r+0x900>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	2b00      	cmp	r3, #0
 800876e:	dc34      	bgt.n	80087da <_dtoa_r+0x982>
 8008770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008772:	2b02      	cmp	r3, #2
 8008774:	dd31      	ble.n	80087da <_dtoa_r+0x982>
 8008776:	9b08      	ldr	r3, [sp, #32]
 8008778:	9306      	str	r3, [sp, #24]
 800877a:	9b06      	ldr	r3, [sp, #24]
 800877c:	b963      	cbnz	r3, 8008798 <_dtoa_r+0x940>
 800877e:	4621      	mov	r1, r4
 8008780:	2205      	movs	r2, #5
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f9f6 	bl	8008b74 <__multadd>
 8008788:	4601      	mov	r1, r0
 800878a:	4604      	mov	r4, r0
 800878c:	4650      	mov	r0, sl
 800878e:	f000 fc09 	bl	8008fa4 <__mcmp>
 8008792:	2800      	cmp	r0, #0
 8008794:	f73f adbf 	bgt.w	8008316 <_dtoa_r+0x4be>
 8008798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800879a:	9f03      	ldr	r7, [sp, #12]
 800879c:	ea6f 0b03 	mvn.w	fp, r3
 80087a0:	f04f 0800 	mov.w	r8, #0
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f9c2 	bl	8008b30 <_Bfree>
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	f43f aead 	beq.w	800850c <_dtoa_r+0x6b4>
 80087b2:	f1b8 0f00 	cmp.w	r8, #0
 80087b6:	d005      	beq.n	80087c4 <_dtoa_r+0x96c>
 80087b8:	45b0      	cmp	r8, r6
 80087ba:	d003      	beq.n	80087c4 <_dtoa_r+0x96c>
 80087bc:	4641      	mov	r1, r8
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f9b6 	bl	8008b30 <_Bfree>
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f9b2 	bl	8008b30 <_Bfree>
 80087cc:	e69e      	b.n	800850c <_dtoa_r+0x6b4>
 80087ce:	2400      	movs	r4, #0
 80087d0:	4626      	mov	r6, r4
 80087d2:	e7e1      	b.n	8008798 <_dtoa_r+0x940>
 80087d4:	46c3      	mov	fp, r8
 80087d6:	4626      	mov	r6, r4
 80087d8:	e59d      	b.n	8008316 <_dtoa_r+0x4be>
 80087da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80c8 	beq.w	8008972 <_dtoa_r+0xb1a>
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	9306      	str	r3, [sp, #24]
 80087e6:	2f00      	cmp	r7, #0
 80087e8:	dd05      	ble.n	80087f6 <_dtoa_r+0x99e>
 80087ea:	4631      	mov	r1, r6
 80087ec:	463a      	mov	r2, r7
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 fb6c 	bl	8008ecc <__lshift>
 80087f4:	4606      	mov	r6, r0
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	d05b      	beq.n	80088b4 <_dtoa_r+0xa5c>
 80087fc:	4628      	mov	r0, r5
 80087fe:	6871      	ldr	r1, [r6, #4]
 8008800:	f000 f956 	bl	8008ab0 <_Balloc>
 8008804:	4607      	mov	r7, r0
 8008806:	b928      	cbnz	r0, 8008814 <_dtoa_r+0x9bc>
 8008808:	4602      	mov	r2, r0
 800880a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800880e:	4b81      	ldr	r3, [pc, #516]	; (8008a14 <_dtoa_r+0xbbc>)
 8008810:	f7ff bb36 	b.w	8007e80 <_dtoa_r+0x28>
 8008814:	6932      	ldr	r2, [r6, #16]
 8008816:	f106 010c 	add.w	r1, r6, #12
 800881a:	3202      	adds	r2, #2
 800881c:	0092      	lsls	r2, r2, #2
 800881e:	300c      	adds	r0, #12
 8008820:	f7ff fa82 	bl	8007d28 <memcpy>
 8008824:	2201      	movs	r2, #1
 8008826:	4639      	mov	r1, r7
 8008828:	4628      	mov	r0, r5
 800882a:	f000 fb4f 	bl	8008ecc <__lshift>
 800882e:	46b0      	mov	r8, r6
 8008830:	4606      	mov	r6, r0
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	9a03      	ldr	r2, [sp, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	9308      	str	r3, [sp, #32]
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	4413      	add	r3, r2
 800883e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	930a      	str	r3, [sp, #40]	; 0x28
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	4621      	mov	r1, r4
 800884c:	3b01      	subs	r3, #1
 800884e:	4650      	mov	r0, sl
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	f7ff fa77 	bl	8007d44 <quorem>
 8008856:	4641      	mov	r1, r8
 8008858:	9006      	str	r0, [sp, #24]
 800885a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800885e:	4650      	mov	r0, sl
 8008860:	f000 fba0 	bl	8008fa4 <__mcmp>
 8008864:	4632      	mov	r2, r6
 8008866:	9009      	str	r0, [sp, #36]	; 0x24
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fbb6 	bl	8008fdc <__mdiff>
 8008870:	68c2      	ldr	r2, [r0, #12]
 8008872:	4607      	mov	r7, r0
 8008874:	bb02      	cbnz	r2, 80088b8 <_dtoa_r+0xa60>
 8008876:	4601      	mov	r1, r0
 8008878:	4650      	mov	r0, sl
 800887a:	f000 fb93 	bl	8008fa4 <__mcmp>
 800887e:	4602      	mov	r2, r0
 8008880:	4639      	mov	r1, r7
 8008882:	4628      	mov	r0, r5
 8008884:	920c      	str	r2, [sp, #48]	; 0x30
 8008886:	f000 f953 	bl	8008b30 <_Bfree>
 800888a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800888e:	9f08      	ldr	r7, [sp, #32]
 8008890:	ea43 0102 	orr.w	r1, r3, r2
 8008894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008896:	4319      	orrs	r1, r3
 8008898:	d110      	bne.n	80088bc <_dtoa_r+0xa64>
 800889a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800889e:	d029      	beq.n	80088f4 <_dtoa_r+0xa9c>
 80088a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd02      	ble.n	80088ac <_dtoa_r+0xa54>
 80088a6:	9b06      	ldr	r3, [sp, #24]
 80088a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	f883 9000 	strb.w	r9, [r3]
 80088b2:	e777      	b.n	80087a4 <_dtoa_r+0x94c>
 80088b4:	4630      	mov	r0, r6
 80088b6:	e7ba      	b.n	800882e <_dtoa_r+0x9d6>
 80088b8:	2201      	movs	r2, #1
 80088ba:	e7e1      	b.n	8008880 <_dtoa_r+0xa28>
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	db04      	blt.n	80088cc <_dtoa_r+0xa74>
 80088c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80088c4:	430b      	orrs	r3, r1
 80088c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088c8:	430b      	orrs	r3, r1
 80088ca:	d120      	bne.n	800890e <_dtoa_r+0xab6>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	dded      	ble.n	80088ac <_dtoa_r+0xa54>
 80088d0:	4651      	mov	r1, sl
 80088d2:	2201      	movs	r2, #1
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 faf9 	bl	8008ecc <__lshift>
 80088da:	4621      	mov	r1, r4
 80088dc:	4682      	mov	sl, r0
 80088de:	f000 fb61 	bl	8008fa4 <__mcmp>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	dc03      	bgt.n	80088ee <_dtoa_r+0xa96>
 80088e6:	d1e1      	bne.n	80088ac <_dtoa_r+0xa54>
 80088e8:	f019 0f01 	tst.w	r9, #1
 80088ec:	d0de      	beq.n	80088ac <_dtoa_r+0xa54>
 80088ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088f2:	d1d8      	bne.n	80088a6 <_dtoa_r+0xa4e>
 80088f4:	2339      	movs	r3, #57	; 0x39
 80088f6:	9a04      	ldr	r2, [sp, #16]
 80088f8:	7013      	strb	r3, [r2, #0]
 80088fa:	463b      	mov	r3, r7
 80088fc:	461f      	mov	r7, r3
 80088fe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008902:	3b01      	subs	r3, #1
 8008904:	2a39      	cmp	r2, #57	; 0x39
 8008906:	d06b      	beq.n	80089e0 <_dtoa_r+0xb88>
 8008908:	3201      	adds	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e74a      	b.n	80087a4 <_dtoa_r+0x94c>
 800890e:	2a00      	cmp	r2, #0
 8008910:	dd07      	ble.n	8008922 <_dtoa_r+0xaca>
 8008912:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008916:	d0ed      	beq.n	80088f4 <_dtoa_r+0xa9c>
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	f109 0301 	add.w	r3, r9, #1
 800891e:	7013      	strb	r3, [r2, #0]
 8008920:	e740      	b.n	80087a4 <_dtoa_r+0x94c>
 8008922:	9b08      	ldr	r3, [sp, #32]
 8008924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008926:	f803 9c01 	strb.w	r9, [r3, #-1]
 800892a:	4293      	cmp	r3, r2
 800892c:	d042      	beq.n	80089b4 <_dtoa_r+0xb5c>
 800892e:	4651      	mov	r1, sl
 8008930:	2300      	movs	r3, #0
 8008932:	220a      	movs	r2, #10
 8008934:	4628      	mov	r0, r5
 8008936:	f000 f91d 	bl	8008b74 <__multadd>
 800893a:	45b0      	cmp	r8, r6
 800893c:	4682      	mov	sl, r0
 800893e:	f04f 0300 	mov.w	r3, #0
 8008942:	f04f 020a 	mov.w	r2, #10
 8008946:	4641      	mov	r1, r8
 8008948:	4628      	mov	r0, r5
 800894a:	d107      	bne.n	800895c <_dtoa_r+0xb04>
 800894c:	f000 f912 	bl	8008b74 <__multadd>
 8008950:	4680      	mov	r8, r0
 8008952:	4606      	mov	r6, r0
 8008954:	9b08      	ldr	r3, [sp, #32]
 8008956:	3301      	adds	r3, #1
 8008958:	9308      	str	r3, [sp, #32]
 800895a:	e775      	b.n	8008848 <_dtoa_r+0x9f0>
 800895c:	f000 f90a 	bl	8008b74 <__multadd>
 8008960:	4631      	mov	r1, r6
 8008962:	4680      	mov	r8, r0
 8008964:	2300      	movs	r3, #0
 8008966:	220a      	movs	r2, #10
 8008968:	4628      	mov	r0, r5
 800896a:	f000 f903 	bl	8008b74 <__multadd>
 800896e:	4606      	mov	r6, r0
 8008970:	e7f0      	b.n	8008954 <_dtoa_r+0xafc>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	9306      	str	r3, [sp, #24]
 8008976:	9f03      	ldr	r7, [sp, #12]
 8008978:	4621      	mov	r1, r4
 800897a:	4650      	mov	r0, sl
 800897c:	f7ff f9e2 	bl	8007d44 <quorem>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008986:	f807 9b01 	strb.w	r9, [r7], #1
 800898a:	1afa      	subs	r2, r7, r3
 800898c:	9b06      	ldr	r3, [sp, #24]
 800898e:	4293      	cmp	r3, r2
 8008990:	dd07      	ble.n	80089a2 <_dtoa_r+0xb4a>
 8008992:	4651      	mov	r1, sl
 8008994:	2300      	movs	r3, #0
 8008996:	220a      	movs	r2, #10
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f8eb 	bl	8008b74 <__multadd>
 800899e:	4682      	mov	sl, r0
 80089a0:	e7ea      	b.n	8008978 <_dtoa_r+0xb20>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	f04f 0800 	mov.w	r8, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfcc      	ite	gt
 80089ac:	461f      	movgt	r7, r3
 80089ae:	2701      	movle	r7, #1
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	441f      	add	r7, r3
 80089b4:	4651      	mov	r1, sl
 80089b6:	2201      	movs	r2, #1
 80089b8:	4628      	mov	r0, r5
 80089ba:	f000 fa87 	bl	8008ecc <__lshift>
 80089be:	4621      	mov	r1, r4
 80089c0:	4682      	mov	sl, r0
 80089c2:	f000 faef 	bl	8008fa4 <__mcmp>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	dc97      	bgt.n	80088fa <_dtoa_r+0xaa2>
 80089ca:	d102      	bne.n	80089d2 <_dtoa_r+0xb7a>
 80089cc:	f019 0f01 	tst.w	r9, #1
 80089d0:	d193      	bne.n	80088fa <_dtoa_r+0xaa2>
 80089d2:	463b      	mov	r3, r7
 80089d4:	461f      	mov	r7, r3
 80089d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089da:	2a30      	cmp	r2, #48	; 0x30
 80089dc:	d0fa      	beq.n	80089d4 <_dtoa_r+0xb7c>
 80089de:	e6e1      	b.n	80087a4 <_dtoa_r+0x94c>
 80089e0:	9a03      	ldr	r2, [sp, #12]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d18a      	bne.n	80088fc <_dtoa_r+0xaa4>
 80089e6:	2331      	movs	r3, #49	; 0x31
 80089e8:	f10b 0b01 	add.w	fp, fp, #1
 80089ec:	e797      	b.n	800891e <_dtoa_r+0xac6>
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <_dtoa_r+0xbc0>)
 80089f0:	f7ff ba9f 	b.w	8007f32 <_dtoa_r+0xda>
 80089f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f47f aa77 	bne.w	8007eea <_dtoa_r+0x92>
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <_dtoa_r+0xbc4>)
 80089fe:	f7ff ba98 	b.w	8007f32 <_dtoa_r+0xda>
 8008a02:	9b06      	ldr	r3, [sp, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dcb6      	bgt.n	8008976 <_dtoa_r+0xb1e>
 8008a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	f73f aeb5 	bgt.w	800877a <_dtoa_r+0x922>
 8008a10:	e7b1      	b.n	8008976 <_dtoa_r+0xb1e>
 8008a12:	bf00      	nop
 8008a14:	080153a4 	.word	0x080153a4
 8008a18:	08015304 	.word	0x08015304
 8008a1c:	08015328 	.word	0x08015328

08008a20 <_free_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	2900      	cmp	r1, #0
 8008a26:	d040      	beq.n	8008aaa <_free_r+0x8a>
 8008a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2c:	1f0c      	subs	r4, r1, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bfb8      	it	lt
 8008a32:	18e4      	addlt	r4, r4, r3
 8008a34:	f7fe fb4a 	bl	80070cc <__malloc_lock>
 8008a38:	4a1c      	ldr	r2, [pc, #112]	; (8008aac <_free_r+0x8c>)
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	b933      	cbnz	r3, 8008a4c <_free_r+0x2c>
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	6014      	str	r4, [r2, #0]
 8008a42:	4628      	mov	r0, r5
 8008a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a48:	f7fe bb46 	b.w	80070d8 <__malloc_unlock>
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d908      	bls.n	8008a62 <_free_r+0x42>
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	1821      	adds	r1, r4, r0
 8008a54:	428b      	cmp	r3, r1
 8008a56:	bf01      	itttt	eq
 8008a58:	6819      	ldreq	r1, [r3, #0]
 8008a5a:	685b      	ldreq	r3, [r3, #4]
 8008a5c:	1809      	addeq	r1, r1, r0
 8008a5e:	6021      	streq	r1, [r4, #0]
 8008a60:	e7ed      	b.n	8008a3e <_free_r+0x1e>
 8008a62:	461a      	mov	r2, r3
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	b10b      	cbz	r3, 8008a6c <_free_r+0x4c>
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	d9fa      	bls.n	8008a62 <_free_r+0x42>
 8008a6c:	6811      	ldr	r1, [r2, #0]
 8008a6e:	1850      	adds	r0, r2, r1
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d10b      	bne.n	8008a8c <_free_r+0x6c>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	4401      	add	r1, r0
 8008a78:	1850      	adds	r0, r2, r1
 8008a7a:	4283      	cmp	r3, r0
 8008a7c:	6011      	str	r1, [r2, #0]
 8008a7e:	d1e0      	bne.n	8008a42 <_free_r+0x22>
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	4408      	add	r0, r1
 8008a86:	6010      	str	r0, [r2, #0]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	e7da      	b.n	8008a42 <_free_r+0x22>
 8008a8c:	d902      	bls.n	8008a94 <_free_r+0x74>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	e7d6      	b.n	8008a42 <_free_r+0x22>
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	1821      	adds	r1, r4, r0
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	bf01      	itttt	eq
 8008a9c:	6819      	ldreq	r1, [r3, #0]
 8008a9e:	685b      	ldreq	r3, [r3, #4]
 8008aa0:	1809      	addeq	r1, r1, r0
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	6054      	str	r4, [r2, #4]
 8008aa8:	e7cb      	b.n	8008a42 <_free_r+0x22>
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20004808 	.word	0x20004808

08008ab0 <_Balloc>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	69c6      	ldr	r6, [r0, #28]
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	b976      	cbnz	r6, 8008ad8 <_Balloc+0x28>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f7fe fa5e 	bl	8006f7c <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	61e0      	str	r0, [r4, #28]
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_Balloc+0x20>
 8008ac6:	216b      	movs	r1, #107	; 0x6b
 8008ac8:	4b17      	ldr	r3, [pc, #92]	; (8008b28 <_Balloc+0x78>)
 8008aca:	4818      	ldr	r0, [pc, #96]	; (8008b2c <_Balloc+0x7c>)
 8008acc:	f000 fd84 	bl	80095d8 <__assert_func>
 8008ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad4:	6006      	str	r6, [r0, #0]
 8008ad6:	60c6      	str	r6, [r0, #12]
 8008ad8:	69e6      	ldr	r6, [r4, #28]
 8008ada:	68f3      	ldr	r3, [r6, #12]
 8008adc:	b183      	cbz	r3, 8008b00 <_Balloc+0x50>
 8008ade:	69e3      	ldr	r3, [r4, #28]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ae6:	b9b8      	cbnz	r0, 8008b18 <_Balloc+0x68>
 8008ae8:	2101      	movs	r1, #1
 8008aea:	fa01 f605 	lsl.w	r6, r1, r5
 8008aee:	1d72      	adds	r2, r6, #5
 8008af0:	4620      	mov	r0, r4
 8008af2:	0092      	lsls	r2, r2, #2
 8008af4:	f000 fd8e 	bl	8009614 <_calloc_r>
 8008af8:	b160      	cbz	r0, 8008b14 <_Balloc+0x64>
 8008afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008afe:	e00e      	b.n	8008b1e <_Balloc+0x6e>
 8008b00:	2221      	movs	r2, #33	; 0x21
 8008b02:	2104      	movs	r1, #4
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fd85 	bl	8009614 <_calloc_r>
 8008b0a:	69e3      	ldr	r3, [r4, #28]
 8008b0c:	60f0      	str	r0, [r6, #12]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e4      	bne.n	8008ade <_Balloc+0x2e>
 8008b14:	2000      	movs	r0, #0
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	6802      	ldr	r2, [r0, #0]
 8008b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b24:	e7f7      	b.n	8008b16 <_Balloc+0x66>
 8008b26:	bf00      	nop
 8008b28:	08015335 	.word	0x08015335
 8008b2c:	080153b5 	.word	0x080153b5

08008b30 <_Bfree>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	69c6      	ldr	r6, [r0, #28]
 8008b34:	4605      	mov	r5, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b976      	cbnz	r6, 8008b58 <_Bfree+0x28>
 8008b3a:	2010      	movs	r0, #16
 8008b3c:	f7fe fa1e 	bl	8006f7c <malloc>
 8008b40:	4602      	mov	r2, r0
 8008b42:	61e8      	str	r0, [r5, #28]
 8008b44:	b920      	cbnz	r0, 8008b50 <_Bfree+0x20>
 8008b46:	218f      	movs	r1, #143	; 0x8f
 8008b48:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <_Bfree+0x3c>)
 8008b4a:	4809      	ldr	r0, [pc, #36]	; (8008b70 <_Bfree+0x40>)
 8008b4c:	f000 fd44 	bl	80095d8 <__assert_func>
 8008b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b54:	6006      	str	r6, [r0, #0]
 8008b56:	60c6      	str	r6, [r0, #12]
 8008b58:	b13c      	cbz	r4, 8008b6a <_Bfree+0x3a>
 8008b5a:	69eb      	ldr	r3, [r5, #28]
 8008b5c:	6862      	ldr	r2, [r4, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b64:	6021      	str	r1, [r4, #0]
 8008b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	08015335 	.word	0x08015335
 8008b70:	080153b5 	.word	0x080153b5

08008b74 <__multadd>:
 8008b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b78:	4607      	mov	r7, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	2000      	movs	r0, #0
 8008b80:	690d      	ldr	r5, [r1, #16]
 8008b82:	f101 0c14 	add.w	ip, r1, #20
 8008b86:	f8dc 3000 	ldr.w	r3, [ip]
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	fb02 6101 	mla	r1, r2, r1, r6
 8008b92:	0c1e      	lsrs	r6, r3, #16
 8008b94:	0c0b      	lsrs	r3, r1, #16
 8008b96:	fb02 3306 	mla	r3, r2, r6, r3
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ba0:	4285      	cmp	r5, r0
 8008ba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ba6:	f84c 1b04 	str.w	r1, [ip], #4
 8008baa:	dcec      	bgt.n	8008b86 <__multadd+0x12>
 8008bac:	b30e      	cbz	r6, 8008bf2 <__multadd+0x7e>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dc19      	bgt.n	8008be8 <__multadd+0x74>
 8008bb4:	6861      	ldr	r1, [r4, #4]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	3101      	adds	r1, #1
 8008bba:	f7ff ff79 	bl	8008ab0 <_Balloc>
 8008bbe:	4680      	mov	r8, r0
 8008bc0:	b928      	cbnz	r0, 8008bce <__multadd+0x5a>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	21ba      	movs	r1, #186	; 0xba
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <__multadd+0x84>)
 8008bc8:	480c      	ldr	r0, [pc, #48]	; (8008bfc <__multadd+0x88>)
 8008bca:	f000 fd05 	bl	80095d8 <__assert_func>
 8008bce:	6922      	ldr	r2, [r4, #16]
 8008bd0:	f104 010c 	add.w	r1, r4, #12
 8008bd4:	3202      	adds	r2, #2
 8008bd6:	0092      	lsls	r2, r2, #2
 8008bd8:	300c      	adds	r0, #12
 8008bda:	f7ff f8a5 	bl	8007d28 <memcpy>
 8008bde:	4621      	mov	r1, r4
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ffa5 	bl	8008b30 <_Bfree>
 8008be6:	4644      	mov	r4, r8
 8008be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bec:	3501      	adds	r5, #1
 8008bee:	615e      	str	r6, [r3, #20]
 8008bf0:	6125      	str	r5, [r4, #16]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf8:	080153a4 	.word	0x080153a4
 8008bfc:	080153b5 	.word	0x080153b5

08008c00 <__hi0bits>:
 8008c00:	0c02      	lsrs	r2, r0, #16
 8008c02:	0412      	lsls	r2, r2, #16
 8008c04:	4603      	mov	r3, r0
 8008c06:	b9ca      	cbnz	r2, 8008c3c <__hi0bits+0x3c>
 8008c08:	0403      	lsls	r3, r0, #16
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c10:	bf04      	itt	eq
 8008c12:	021b      	lsleq	r3, r3, #8
 8008c14:	3008      	addeq	r0, #8
 8008c16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c1a:	bf04      	itt	eq
 8008c1c:	011b      	lsleq	r3, r3, #4
 8008c1e:	3004      	addeq	r0, #4
 8008c20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c24:	bf04      	itt	eq
 8008c26:	009b      	lsleq	r3, r3, #2
 8008c28:	3002      	addeq	r0, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	db05      	blt.n	8008c3a <__hi0bits+0x3a>
 8008c2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c32:	f100 0001 	add.w	r0, r0, #1
 8008c36:	bf08      	it	eq
 8008c38:	2020      	moveq	r0, #32
 8008c3a:	4770      	bx	lr
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e7e5      	b.n	8008c0c <__hi0bits+0xc>

08008c40 <__lo0bits>:
 8008c40:	6803      	ldr	r3, [r0, #0]
 8008c42:	4602      	mov	r2, r0
 8008c44:	f013 0007 	ands.w	r0, r3, #7
 8008c48:	d00b      	beq.n	8008c62 <__lo0bits+0x22>
 8008c4a:	07d9      	lsls	r1, r3, #31
 8008c4c:	d421      	bmi.n	8008c92 <__lo0bits+0x52>
 8008c4e:	0798      	lsls	r0, r3, #30
 8008c50:	bf49      	itett	mi
 8008c52:	085b      	lsrmi	r3, r3, #1
 8008c54:	089b      	lsrpl	r3, r3, #2
 8008c56:	2001      	movmi	r0, #1
 8008c58:	6013      	strmi	r3, [r2, #0]
 8008c5a:	bf5c      	itt	pl
 8008c5c:	2002      	movpl	r0, #2
 8008c5e:	6013      	strpl	r3, [r2, #0]
 8008c60:	4770      	bx	lr
 8008c62:	b299      	uxth	r1, r3
 8008c64:	b909      	cbnz	r1, 8008c6a <__lo0bits+0x2a>
 8008c66:	2010      	movs	r0, #16
 8008c68:	0c1b      	lsrs	r3, r3, #16
 8008c6a:	b2d9      	uxtb	r1, r3
 8008c6c:	b909      	cbnz	r1, 8008c72 <__lo0bits+0x32>
 8008c6e:	3008      	adds	r0, #8
 8008c70:	0a1b      	lsrs	r3, r3, #8
 8008c72:	0719      	lsls	r1, r3, #28
 8008c74:	bf04      	itt	eq
 8008c76:	091b      	lsreq	r3, r3, #4
 8008c78:	3004      	addeq	r0, #4
 8008c7a:	0799      	lsls	r1, r3, #30
 8008c7c:	bf04      	itt	eq
 8008c7e:	089b      	lsreq	r3, r3, #2
 8008c80:	3002      	addeq	r0, #2
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d403      	bmi.n	8008c8e <__lo0bits+0x4e>
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	f100 0001 	add.w	r0, r0, #1
 8008c8c:	d003      	beq.n	8008c96 <__lo0bits+0x56>
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4770      	bx	lr
 8008c92:	2000      	movs	r0, #0
 8008c94:	4770      	bx	lr
 8008c96:	2020      	movs	r0, #32
 8008c98:	4770      	bx	lr
	...

08008c9c <__i2b>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	f7ff ff05 	bl	8008ab0 <_Balloc>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	b928      	cbnz	r0, 8008cb6 <__i2b+0x1a>
 8008caa:	f240 1145 	movw	r1, #325	; 0x145
 8008cae:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <__i2b+0x24>)
 8008cb0:	4804      	ldr	r0, [pc, #16]	; (8008cc4 <__i2b+0x28>)
 8008cb2:	f000 fc91 	bl	80095d8 <__assert_func>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	6144      	str	r4, [r0, #20]
 8008cba:	6103      	str	r3, [r0, #16]
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	bf00      	nop
 8008cc0:	080153a4 	.word	0x080153a4
 8008cc4:	080153b5 	.word	0x080153b5

08008cc8 <__multiply>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	4691      	mov	r9, r2
 8008cce:	690a      	ldr	r2, [r1, #16]
 8008cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	bfbe      	ittt	lt
 8008cda:	460b      	movlt	r3, r1
 8008cdc:	464c      	movlt	r4, r9
 8008cde:	4699      	movlt	r9, r3
 8008ce0:	6927      	ldr	r7, [r4, #16]
 8008ce2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	6861      	ldr	r1, [r4, #4]
 8008cea:	eb07 060a 	add.w	r6, r7, sl
 8008cee:	42b3      	cmp	r3, r6
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	bfb8      	it	lt
 8008cf4:	3101      	addlt	r1, #1
 8008cf6:	f7ff fedb 	bl	8008ab0 <_Balloc>
 8008cfa:	b930      	cbnz	r0, 8008d0a <__multiply+0x42>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d02:	4b43      	ldr	r3, [pc, #268]	; (8008e10 <__multiply+0x148>)
 8008d04:	4843      	ldr	r0, [pc, #268]	; (8008e14 <__multiply+0x14c>)
 8008d06:	f000 fc67 	bl	80095d8 <__assert_func>
 8008d0a:	f100 0514 	add.w	r5, r0, #20
 8008d0e:	462b      	mov	r3, r5
 8008d10:	2200      	movs	r2, #0
 8008d12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d16:	4543      	cmp	r3, r8
 8008d18:	d321      	bcc.n	8008d5e <__multiply+0x96>
 8008d1a:	f104 0314 	add.w	r3, r4, #20
 8008d1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d22:	f109 0314 	add.w	r3, r9, #20
 8008d26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d2a:	9202      	str	r2, [sp, #8]
 8008d2c:	1b3a      	subs	r2, r7, r4
 8008d2e:	3a15      	subs	r2, #21
 8008d30:	f022 0203 	bic.w	r2, r2, #3
 8008d34:	3204      	adds	r2, #4
 8008d36:	f104 0115 	add.w	r1, r4, #21
 8008d3a:	428f      	cmp	r7, r1
 8008d3c:	bf38      	it	cc
 8008d3e:	2204      	movcc	r2, #4
 8008d40:	9201      	str	r2, [sp, #4]
 8008d42:	9a02      	ldr	r2, [sp, #8]
 8008d44:	9303      	str	r3, [sp, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d80c      	bhi.n	8008d64 <__multiply+0x9c>
 8008d4a:	2e00      	cmp	r6, #0
 8008d4c:	dd03      	ble.n	8008d56 <__multiply+0x8e>
 8008d4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d05a      	beq.n	8008e0c <__multiply+0x144>
 8008d56:	6106      	str	r6, [r0, #16]
 8008d58:	b005      	add	sp, #20
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	f843 2b04 	str.w	r2, [r3], #4
 8008d62:	e7d8      	b.n	8008d16 <__multiply+0x4e>
 8008d64:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d68:	f1ba 0f00 	cmp.w	sl, #0
 8008d6c:	d023      	beq.n	8008db6 <__multiply+0xee>
 8008d6e:	46a9      	mov	r9, r5
 8008d70:	f04f 0c00 	mov.w	ip, #0
 8008d74:	f104 0e14 	add.w	lr, r4, #20
 8008d78:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d7c:	f8d9 1000 	ldr.w	r1, [r9]
 8008d80:	fa1f fb82 	uxth.w	fp, r2
 8008d84:	b289      	uxth	r1, r1
 8008d86:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d8a:	4461      	add	r1, ip
 8008d8c:	f8d9 c000 	ldr.w	ip, [r9]
 8008d90:	0c12      	lsrs	r2, r2, #16
 8008d92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d96:	fb0a c202 	mla	r2, sl, r2, ip
 8008d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d9e:	b289      	uxth	r1, r1
 8008da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008da4:	4577      	cmp	r7, lr
 8008da6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008daa:	f849 1b04 	str.w	r1, [r9], #4
 8008dae:	d8e3      	bhi.n	8008d78 <__multiply+0xb0>
 8008db0:	9a01      	ldr	r2, [sp, #4]
 8008db2:	f845 c002 	str.w	ip, [r5, r2]
 8008db6:	9a03      	ldr	r2, [sp, #12]
 8008db8:	3304      	adds	r3, #4
 8008dba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008dbe:	f1b9 0f00 	cmp.w	r9, #0
 8008dc2:	d021      	beq.n	8008e08 <__multiply+0x140>
 8008dc4:	46ae      	mov	lr, r5
 8008dc6:	f04f 0a00 	mov.w	sl, #0
 8008dca:	6829      	ldr	r1, [r5, #0]
 8008dcc:	f104 0c14 	add.w	ip, r4, #20
 8008dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8008dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008dd8:	b289      	uxth	r1, r1
 8008dda:	fb09 220b 	mla	r2, r9, fp, r2
 8008dde:	4452      	add	r2, sl
 8008de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008de4:	f84e 1b04 	str.w	r1, [lr], #4
 8008de8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008df0:	f8be 1000 	ldrh.w	r1, [lr]
 8008df4:	4567      	cmp	r7, ip
 8008df6:	fb09 110a 	mla	r1, r9, sl, r1
 8008dfa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008dfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e02:	d8e5      	bhi.n	8008dd0 <__multiply+0x108>
 8008e04:	9a01      	ldr	r2, [sp, #4]
 8008e06:	50a9      	str	r1, [r5, r2]
 8008e08:	3504      	adds	r5, #4
 8008e0a:	e79a      	b.n	8008d42 <__multiply+0x7a>
 8008e0c:	3e01      	subs	r6, #1
 8008e0e:	e79c      	b.n	8008d4a <__multiply+0x82>
 8008e10:	080153a4 	.word	0x080153a4
 8008e14:	080153b5 	.word	0x080153b5

08008e18 <__pow5mult>:
 8008e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	f012 0203 	ands.w	r2, r2, #3
 8008e22:	4606      	mov	r6, r0
 8008e24:	460f      	mov	r7, r1
 8008e26:	d007      	beq.n	8008e38 <__pow5mult+0x20>
 8008e28:	4c25      	ldr	r4, [pc, #148]	; (8008ec0 <__pow5mult+0xa8>)
 8008e2a:	3a01      	subs	r2, #1
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e32:	f7ff fe9f 	bl	8008b74 <__multadd>
 8008e36:	4607      	mov	r7, r0
 8008e38:	10ad      	asrs	r5, r5, #2
 8008e3a:	d03d      	beq.n	8008eb8 <__pow5mult+0xa0>
 8008e3c:	69f4      	ldr	r4, [r6, #28]
 8008e3e:	b97c      	cbnz	r4, 8008e60 <__pow5mult+0x48>
 8008e40:	2010      	movs	r0, #16
 8008e42:	f7fe f89b 	bl	8006f7c <malloc>
 8008e46:	4602      	mov	r2, r0
 8008e48:	61f0      	str	r0, [r6, #28]
 8008e4a:	b928      	cbnz	r0, 8008e58 <__pow5mult+0x40>
 8008e4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <__pow5mult+0xac>)
 8008e52:	481d      	ldr	r0, [pc, #116]	; (8008ec8 <__pow5mult+0xb0>)
 8008e54:	f000 fbc0 	bl	80095d8 <__assert_func>
 8008e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e5c:	6004      	str	r4, [r0, #0]
 8008e5e:	60c4      	str	r4, [r0, #12]
 8008e60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e68:	b94c      	cbnz	r4, 8008e7e <__pow5mult+0x66>
 8008e6a:	f240 2171 	movw	r1, #625	; 0x271
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7ff ff14 	bl	8008c9c <__i2b>
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e7c:	6003      	str	r3, [r0, #0]
 8008e7e:	f04f 0900 	mov.w	r9, #0
 8008e82:	07eb      	lsls	r3, r5, #31
 8008e84:	d50a      	bpl.n	8008e9c <__pow5mult+0x84>
 8008e86:	4639      	mov	r1, r7
 8008e88:	4622      	mov	r2, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff1c 	bl	8008cc8 <__multiply>
 8008e90:	4680      	mov	r8, r0
 8008e92:	4639      	mov	r1, r7
 8008e94:	4630      	mov	r0, r6
 8008e96:	f7ff fe4b 	bl	8008b30 <_Bfree>
 8008e9a:	4647      	mov	r7, r8
 8008e9c:	106d      	asrs	r5, r5, #1
 8008e9e:	d00b      	beq.n	8008eb8 <__pow5mult+0xa0>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	b938      	cbnz	r0, 8008eb4 <__pow5mult+0x9c>
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff ff0d 	bl	8008cc8 <__multiply>
 8008eae:	6020      	str	r0, [r4, #0]
 8008eb0:	f8c0 9000 	str.w	r9, [r0]
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	e7e4      	b.n	8008e82 <__pow5mult+0x6a>
 8008eb8:	4638      	mov	r0, r7
 8008eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ebe:	bf00      	nop
 8008ec0:	08015500 	.word	0x08015500
 8008ec4:	08015335 	.word	0x08015335
 8008ec8:	080153b5 	.word	0x080153b5

08008ecc <__lshift>:
 8008ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	4691      	mov	r9, r2
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	6849      	ldr	r1, [r1, #4]
 8008eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee4:	f108 0601 	add.w	r6, r8, #1
 8008ee8:	42b3      	cmp	r3, r6
 8008eea:	db0b      	blt.n	8008f04 <__lshift+0x38>
 8008eec:	4638      	mov	r0, r7
 8008eee:	f7ff fddf 	bl	8008ab0 <_Balloc>
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	b948      	cbnz	r0, 8008f0a <__lshift+0x3e>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008efc:	4b27      	ldr	r3, [pc, #156]	; (8008f9c <__lshift+0xd0>)
 8008efe:	4828      	ldr	r0, [pc, #160]	; (8008fa0 <__lshift+0xd4>)
 8008f00:	f000 fb6a 	bl	80095d8 <__assert_func>
 8008f04:	3101      	adds	r1, #1
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	e7ee      	b.n	8008ee8 <__lshift+0x1c>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f100 0114 	add.w	r1, r0, #20
 8008f10:	f100 0210 	add.w	r2, r0, #16
 8008f14:	4618      	mov	r0, r3
 8008f16:	4553      	cmp	r3, sl
 8008f18:	db33      	blt.n	8008f82 <__lshift+0xb6>
 8008f1a:	6920      	ldr	r0, [r4, #16]
 8008f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f20:	f104 0314 	add.w	r3, r4, #20
 8008f24:	f019 091f 	ands.w	r9, r9, #31
 8008f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f30:	d02b      	beq.n	8008f8a <__lshift+0xbe>
 8008f32:	468a      	mov	sl, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	f1c9 0e20 	rsb	lr, r9, #32
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f40:	4310      	orrs	r0, r2
 8008f42:	f84a 0b04 	str.w	r0, [sl], #4
 8008f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4a:	459c      	cmp	ip, r3
 8008f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f50:	d8f3      	bhi.n	8008f3a <__lshift+0x6e>
 8008f52:	ebac 0304 	sub.w	r3, ip, r4
 8008f56:	3b15      	subs	r3, #21
 8008f58:	f023 0303 	bic.w	r3, r3, #3
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	f104 0015 	add.w	r0, r4, #21
 8008f62:	4584      	cmp	ip, r0
 8008f64:	bf38      	it	cc
 8008f66:	2304      	movcc	r3, #4
 8008f68:	50ca      	str	r2, [r1, r3]
 8008f6a:	b10a      	cbz	r2, 8008f70 <__lshift+0xa4>
 8008f6c:	f108 0602 	add.w	r6, r8, #2
 8008f70:	3e01      	subs	r6, #1
 8008f72:	4638      	mov	r0, r7
 8008f74:	4621      	mov	r1, r4
 8008f76:	612e      	str	r6, [r5, #16]
 8008f78:	f7ff fdda 	bl	8008b30 <_Bfree>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f86:	3301      	adds	r3, #1
 8008f88:	e7c5      	b.n	8008f16 <__lshift+0x4a>
 8008f8a:	3904      	subs	r1, #4
 8008f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f90:	459c      	cmp	ip, r3
 8008f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f96:	d8f9      	bhi.n	8008f8c <__lshift+0xc0>
 8008f98:	e7ea      	b.n	8008f70 <__lshift+0xa4>
 8008f9a:	bf00      	nop
 8008f9c:	080153a4 	.word	0x080153a4
 8008fa0:	080153b5 	.word	0x080153b5

08008fa4 <__mcmp>:
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	690a      	ldr	r2, [r1, #16]
 8008fa8:	6900      	ldr	r0, [r0, #16]
 8008faa:	b530      	push	{r4, r5, lr}
 8008fac:	1a80      	subs	r0, r0, r2
 8008fae:	d10d      	bne.n	8008fcc <__mcmp+0x28>
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	3114      	adds	r1, #20
 8008fb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fc4:	4295      	cmp	r5, r2
 8008fc6:	d002      	beq.n	8008fce <__mcmp+0x2a>
 8008fc8:	d304      	bcc.n	8008fd4 <__mcmp+0x30>
 8008fca:	2001      	movs	r0, #1
 8008fcc:	bd30      	pop	{r4, r5, pc}
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	d3f4      	bcc.n	8008fbc <__mcmp+0x18>
 8008fd2:	e7fb      	b.n	8008fcc <__mcmp+0x28>
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e7f8      	b.n	8008fcc <__mcmp+0x28>
	...

08008fdc <__mdiff>:
 8008fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	4614      	mov	r4, r2
 8008fea:	f7ff ffdb 	bl	8008fa4 <__mcmp>
 8008fee:	1e06      	subs	r6, r0, #0
 8008ff0:	d111      	bne.n	8009016 <__mdiff+0x3a>
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff fd5b 	bl	8008ab0 <_Balloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	b928      	cbnz	r0, 800900a <__mdiff+0x2e>
 8008ffe:	f240 2137 	movw	r1, #567	; 0x237
 8009002:	4b3a      	ldr	r3, [pc, #232]	; (80090ec <__mdiff+0x110>)
 8009004:	483a      	ldr	r0, [pc, #232]	; (80090f0 <__mdiff+0x114>)
 8009006:	f000 fae7 	bl	80095d8 <__assert_func>
 800900a:	2301      	movs	r3, #1
 800900c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009010:	4610      	mov	r0, r2
 8009012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009016:	bfa4      	itt	ge
 8009018:	4623      	movge	r3, r4
 800901a:	462c      	movge	r4, r5
 800901c:	4638      	mov	r0, r7
 800901e:	6861      	ldr	r1, [r4, #4]
 8009020:	bfa6      	itte	ge
 8009022:	461d      	movge	r5, r3
 8009024:	2600      	movge	r6, #0
 8009026:	2601      	movlt	r6, #1
 8009028:	f7ff fd42 	bl	8008ab0 <_Balloc>
 800902c:	4602      	mov	r2, r0
 800902e:	b918      	cbnz	r0, 8009038 <__mdiff+0x5c>
 8009030:	f240 2145 	movw	r1, #581	; 0x245
 8009034:	4b2d      	ldr	r3, [pc, #180]	; (80090ec <__mdiff+0x110>)
 8009036:	e7e5      	b.n	8009004 <__mdiff+0x28>
 8009038:	f102 0814 	add.w	r8, r2, #20
 800903c:	46c2      	mov	sl, r8
 800903e:	f04f 0c00 	mov.w	ip, #0
 8009042:	6927      	ldr	r7, [r4, #16]
 8009044:	60c6      	str	r6, [r0, #12]
 8009046:	692e      	ldr	r6, [r5, #16]
 8009048:	f104 0014 	add.w	r0, r4, #20
 800904c:	f105 0914 	add.w	r9, r5, #20
 8009050:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009058:	3410      	adds	r4, #16
 800905a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800905e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009062:	fa1f f18b 	uxth.w	r1, fp
 8009066:	4461      	add	r1, ip
 8009068:	fa1f fc83 	uxth.w	ip, r3
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	eba1 010c 	sub.w	r1, r1, ip
 8009072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009076:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800907a:	b289      	uxth	r1, r1
 800907c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009080:	454e      	cmp	r6, r9
 8009082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009086:	f84a 1b04 	str.w	r1, [sl], #4
 800908a:	d8e6      	bhi.n	800905a <__mdiff+0x7e>
 800908c:	1b73      	subs	r3, r6, r5
 800908e:	3b15      	subs	r3, #21
 8009090:	f023 0303 	bic.w	r3, r3, #3
 8009094:	3515      	adds	r5, #21
 8009096:	3304      	adds	r3, #4
 8009098:	42ae      	cmp	r6, r5
 800909a:	bf38      	it	cc
 800909c:	2304      	movcc	r3, #4
 800909e:	4418      	add	r0, r3
 80090a0:	4443      	add	r3, r8
 80090a2:	461e      	mov	r6, r3
 80090a4:	4605      	mov	r5, r0
 80090a6:	4575      	cmp	r5, lr
 80090a8:	d30e      	bcc.n	80090c8 <__mdiff+0xec>
 80090aa:	f10e 0103 	add.w	r1, lr, #3
 80090ae:	1a09      	subs	r1, r1, r0
 80090b0:	f021 0103 	bic.w	r1, r1, #3
 80090b4:	3803      	subs	r0, #3
 80090b6:	4586      	cmp	lr, r0
 80090b8:	bf38      	it	cc
 80090ba:	2100      	movcc	r1, #0
 80090bc:	440b      	add	r3, r1
 80090be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090c2:	b189      	cbz	r1, 80090e8 <__mdiff+0x10c>
 80090c4:	6117      	str	r7, [r2, #16]
 80090c6:	e7a3      	b.n	8009010 <__mdiff+0x34>
 80090c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80090cc:	fa1f f188 	uxth.w	r1, r8
 80090d0:	4461      	add	r1, ip
 80090d2:	140c      	asrs	r4, r1, #16
 80090d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090d8:	b289      	uxth	r1, r1
 80090da:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090de:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80090e2:	f846 1b04 	str.w	r1, [r6], #4
 80090e6:	e7de      	b.n	80090a6 <__mdiff+0xca>
 80090e8:	3f01      	subs	r7, #1
 80090ea:	e7e8      	b.n	80090be <__mdiff+0xe2>
 80090ec:	080153a4 	.word	0x080153a4
 80090f0:	080153b5 	.word	0x080153b5

080090f4 <__d2b>:
 80090f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f6:	2101      	movs	r1, #1
 80090f8:	4617      	mov	r7, r2
 80090fa:	461c      	mov	r4, r3
 80090fc:	9e08      	ldr	r6, [sp, #32]
 80090fe:	f7ff fcd7 	bl	8008ab0 <_Balloc>
 8009102:	4605      	mov	r5, r0
 8009104:	b930      	cbnz	r0, 8009114 <__d2b+0x20>
 8009106:	4602      	mov	r2, r0
 8009108:	f240 310f 	movw	r1, #783	; 0x30f
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <__d2b+0xa4>)
 800910e:	4823      	ldr	r0, [pc, #140]	; (800919c <__d2b+0xa8>)
 8009110:	f000 fa62 	bl	80095d8 <__assert_func>
 8009114:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009118:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800911c:	bb24      	cbnz	r4, 8009168 <__d2b+0x74>
 800911e:	2f00      	cmp	r7, #0
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	d026      	beq.n	8009172 <__d2b+0x7e>
 8009124:	4668      	mov	r0, sp
 8009126:	9700      	str	r7, [sp, #0]
 8009128:	f7ff fd8a 	bl	8008c40 <__lo0bits>
 800912c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009130:	b1e8      	cbz	r0, 800916e <__d2b+0x7a>
 8009132:	f1c0 0320 	rsb	r3, r0, #32
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	430b      	orrs	r3, r1
 800913c:	40c2      	lsrs	r2, r0
 800913e:	616b      	str	r3, [r5, #20]
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf14      	ite	ne
 8009148:	2102      	movne	r1, #2
 800914a:	2101      	moveq	r1, #1
 800914c:	61ab      	str	r3, [r5, #24]
 800914e:	6129      	str	r1, [r5, #16]
 8009150:	b1bc      	cbz	r4, 8009182 <__d2b+0x8e>
 8009152:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009156:	4404      	add	r4, r0
 8009158:	6034      	str	r4, [r6, #0]
 800915a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	6018      	str	r0, [r3, #0]
 8009162:	4628      	mov	r0, r5
 8009164:	b003      	add	sp, #12
 8009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800916c:	e7d7      	b.n	800911e <__d2b+0x2a>
 800916e:	6169      	str	r1, [r5, #20]
 8009170:	e7e7      	b.n	8009142 <__d2b+0x4e>
 8009172:	a801      	add	r0, sp, #4
 8009174:	f7ff fd64 	bl	8008c40 <__lo0bits>
 8009178:	9b01      	ldr	r3, [sp, #4]
 800917a:	2101      	movs	r1, #1
 800917c:	616b      	str	r3, [r5, #20]
 800917e:	3020      	adds	r0, #32
 8009180:	e7e5      	b.n	800914e <__d2b+0x5a>
 8009182:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009186:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800918a:	6030      	str	r0, [r6, #0]
 800918c:	6918      	ldr	r0, [r3, #16]
 800918e:	f7ff fd37 	bl	8008c00 <__hi0bits>
 8009192:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009196:	e7e2      	b.n	800915e <__d2b+0x6a>
 8009198:	080153a4 	.word	0x080153a4
 800919c:	080153b5 	.word	0x080153b5

080091a0 <__ssputs_r>:
 80091a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	461f      	mov	r7, r3
 80091a6:	688e      	ldr	r6, [r1, #8]
 80091a8:	4682      	mov	sl, r0
 80091aa:	42be      	cmp	r6, r7
 80091ac:	460c      	mov	r4, r1
 80091ae:	4690      	mov	r8, r2
 80091b0:	680b      	ldr	r3, [r1, #0]
 80091b2:	d82c      	bhi.n	800920e <__ssputs_r+0x6e>
 80091b4:	898a      	ldrh	r2, [r1, #12]
 80091b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091ba:	d026      	beq.n	800920a <__ssputs_r+0x6a>
 80091bc:	6965      	ldr	r5, [r4, #20]
 80091be:	6909      	ldr	r1, [r1, #16]
 80091c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091c4:	eba3 0901 	sub.w	r9, r3, r1
 80091c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091cc:	1c7b      	adds	r3, r7, #1
 80091ce:	444b      	add	r3, r9
 80091d0:	106d      	asrs	r5, r5, #1
 80091d2:	429d      	cmp	r5, r3
 80091d4:	bf38      	it	cc
 80091d6:	461d      	movcc	r5, r3
 80091d8:	0553      	lsls	r3, r2, #21
 80091da:	d527      	bpl.n	800922c <__ssputs_r+0x8c>
 80091dc:	4629      	mov	r1, r5
 80091de:	f7fd fef5 	bl	8006fcc <_malloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b360      	cbz	r0, 8009240 <__ssputs_r+0xa0>
 80091e6:	464a      	mov	r2, r9
 80091e8:	6921      	ldr	r1, [r4, #16]
 80091ea:	f7fe fd9d 	bl	8007d28 <memcpy>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	6126      	str	r6, [r4, #16]
 80091fc:	444e      	add	r6, r9
 80091fe:	6026      	str	r6, [r4, #0]
 8009200:	463e      	mov	r6, r7
 8009202:	6165      	str	r5, [r4, #20]
 8009204:	eba5 0509 	sub.w	r5, r5, r9
 8009208:	60a5      	str	r5, [r4, #8]
 800920a:	42be      	cmp	r6, r7
 800920c:	d900      	bls.n	8009210 <__ssputs_r+0x70>
 800920e:	463e      	mov	r6, r7
 8009210:	4632      	mov	r2, r6
 8009212:	4641      	mov	r1, r8
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	f000 f9c5 	bl	80095a4 <memmove>
 800921a:	2000      	movs	r0, #0
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	1b9b      	subs	r3, r3, r6
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	4433      	add	r3, r6
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922c:	462a      	mov	r2, r5
 800922e:	f000 fa17 	bl	8009660 <_realloc_r>
 8009232:	4606      	mov	r6, r0
 8009234:	2800      	cmp	r0, #0
 8009236:	d1e0      	bne.n	80091fa <__ssputs_r+0x5a>
 8009238:	4650      	mov	r0, sl
 800923a:	6921      	ldr	r1, [r4, #16]
 800923c:	f7ff fbf0 	bl	8008a20 <_free_r>
 8009240:	230c      	movs	r3, #12
 8009242:	f8ca 3000 	str.w	r3, [sl]
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	e7e9      	b.n	8009228 <__ssputs_r+0x88>

08009254 <_svfiprintf_r>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	4698      	mov	r8, r3
 800925a:	898b      	ldrh	r3, [r1, #12]
 800925c:	4607      	mov	r7, r0
 800925e:	061b      	lsls	r3, r3, #24
 8009260:	460d      	mov	r5, r1
 8009262:	4614      	mov	r4, r2
 8009264:	b09d      	sub	sp, #116	; 0x74
 8009266:	d50e      	bpl.n	8009286 <_svfiprintf_r+0x32>
 8009268:	690b      	ldr	r3, [r1, #16]
 800926a:	b963      	cbnz	r3, 8009286 <_svfiprintf_r+0x32>
 800926c:	2140      	movs	r1, #64	; 0x40
 800926e:	f7fd fead 	bl	8006fcc <_malloc_r>
 8009272:	6028      	str	r0, [r5, #0]
 8009274:	6128      	str	r0, [r5, #16]
 8009276:	b920      	cbnz	r0, 8009282 <_svfiprintf_r+0x2e>
 8009278:	230c      	movs	r3, #12
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e0d0      	b.n	8009424 <_svfiprintf_r+0x1d0>
 8009282:	2340      	movs	r3, #64	; 0x40
 8009284:	616b      	str	r3, [r5, #20]
 8009286:	2300      	movs	r3, #0
 8009288:	9309      	str	r3, [sp, #36]	; 0x24
 800928a:	2320      	movs	r3, #32
 800928c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009290:	2330      	movs	r3, #48	; 0x30
 8009292:	f04f 0901 	mov.w	r9, #1
 8009296:	f8cd 800c 	str.w	r8, [sp, #12]
 800929a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800943c <_svfiprintf_r+0x1e8>
 800929e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a2:	4623      	mov	r3, r4
 80092a4:	469a      	mov	sl, r3
 80092a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092aa:	b10a      	cbz	r2, 80092b0 <_svfiprintf_r+0x5c>
 80092ac:	2a25      	cmp	r2, #37	; 0x25
 80092ae:	d1f9      	bne.n	80092a4 <_svfiprintf_r+0x50>
 80092b0:	ebba 0b04 	subs.w	fp, sl, r4
 80092b4:	d00b      	beq.n	80092ce <_svfiprintf_r+0x7a>
 80092b6:	465b      	mov	r3, fp
 80092b8:	4622      	mov	r2, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff ff6f 	bl	80091a0 <__ssputs_r>
 80092c2:	3001      	adds	r0, #1
 80092c4:	f000 80a9 	beq.w	800941a <_svfiprintf_r+0x1c6>
 80092c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ca:	445a      	add	r2, fp
 80092cc:	9209      	str	r2, [sp, #36]	; 0x24
 80092ce:	f89a 3000 	ldrb.w	r3, [sl]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80a1 	beq.w	800941a <_svfiprintf_r+0x1c6>
 80092d8:	2300      	movs	r3, #0
 80092da:	f04f 32ff 	mov.w	r2, #4294967295
 80092de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e2:	f10a 0a01 	add.w	sl, sl, #1
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ee:	931a      	str	r3, [sp, #104]	; 0x68
 80092f0:	4654      	mov	r4, sl
 80092f2:	2205      	movs	r2, #5
 80092f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f8:	4850      	ldr	r0, [pc, #320]	; (800943c <_svfiprintf_r+0x1e8>)
 80092fa:	f7fe fd07 	bl	8007d0c <memchr>
 80092fe:	9a04      	ldr	r2, [sp, #16]
 8009300:	b9d8      	cbnz	r0, 800933a <_svfiprintf_r+0xe6>
 8009302:	06d0      	lsls	r0, r2, #27
 8009304:	bf44      	itt	mi
 8009306:	2320      	movmi	r3, #32
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930c:	0711      	lsls	r1, r2, #28
 800930e:	bf44      	itt	mi
 8009310:	232b      	movmi	r3, #43	; 0x2b
 8009312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009316:	f89a 3000 	ldrb.w	r3, [sl]
 800931a:	2b2a      	cmp	r3, #42	; 0x2a
 800931c:	d015      	beq.n	800934a <_svfiprintf_r+0xf6>
 800931e:	4654      	mov	r4, sl
 8009320:	2000      	movs	r0, #0
 8009322:	f04f 0c0a 	mov.w	ip, #10
 8009326:	9a07      	ldr	r2, [sp, #28]
 8009328:	4621      	mov	r1, r4
 800932a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932e:	3b30      	subs	r3, #48	; 0x30
 8009330:	2b09      	cmp	r3, #9
 8009332:	d94d      	bls.n	80093d0 <_svfiprintf_r+0x17c>
 8009334:	b1b0      	cbz	r0, 8009364 <_svfiprintf_r+0x110>
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	e014      	b.n	8009364 <_svfiprintf_r+0x110>
 800933a:	eba0 0308 	sub.w	r3, r0, r8
 800933e:	fa09 f303 	lsl.w	r3, r9, r3
 8009342:	4313      	orrs	r3, r2
 8009344:	46a2      	mov	sl, r4
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	e7d2      	b.n	80092f0 <_svfiprintf_r+0x9c>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	1d19      	adds	r1, r3, #4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9103      	str	r1, [sp, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfbb      	ittet	lt
 8009356:	425b      	neglt	r3, r3
 8009358:	f042 0202 	orrlt.w	r2, r2, #2
 800935c:	9307      	strge	r3, [sp, #28]
 800935e:	9307      	strlt	r3, [sp, #28]
 8009360:	bfb8      	it	lt
 8009362:	9204      	strlt	r2, [sp, #16]
 8009364:	7823      	ldrb	r3, [r4, #0]
 8009366:	2b2e      	cmp	r3, #46	; 0x2e
 8009368:	d10c      	bne.n	8009384 <_svfiprintf_r+0x130>
 800936a:	7863      	ldrb	r3, [r4, #1]
 800936c:	2b2a      	cmp	r3, #42	; 0x2a
 800936e:	d134      	bne.n	80093da <_svfiprintf_r+0x186>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	3402      	adds	r4, #2
 8009374:	1d1a      	adds	r2, r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	9203      	str	r2, [sp, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	bfb8      	it	lt
 800937e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009382:	9305      	str	r3, [sp, #20]
 8009384:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009440 <_svfiprintf_r+0x1ec>
 8009388:	2203      	movs	r2, #3
 800938a:	4650      	mov	r0, sl
 800938c:	7821      	ldrb	r1, [r4, #0]
 800938e:	f7fe fcbd 	bl	8007d0c <memchr>
 8009392:	b138      	cbz	r0, 80093a4 <_svfiprintf_r+0x150>
 8009394:	2240      	movs	r2, #64	; 0x40
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	eba0 000a 	sub.w	r0, r0, sl
 800939c:	4082      	lsls	r2, r0
 800939e:	4313      	orrs	r3, r2
 80093a0:	3401      	adds	r4, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a8:	2206      	movs	r2, #6
 80093aa:	4826      	ldr	r0, [pc, #152]	; (8009444 <_svfiprintf_r+0x1f0>)
 80093ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b0:	f7fe fcac 	bl	8007d0c <memchr>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d038      	beq.n	800942a <_svfiprintf_r+0x1d6>
 80093b8:	4b23      	ldr	r3, [pc, #140]	; (8009448 <_svfiprintf_r+0x1f4>)
 80093ba:	bb1b      	cbnz	r3, 8009404 <_svfiprintf_r+0x1b0>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	3307      	adds	r3, #7
 80093c0:	f023 0307 	bic.w	r3, r3, #7
 80093c4:	3308      	adds	r3, #8
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	4433      	add	r3, r6
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	e768      	b.n	80092a2 <_svfiprintf_r+0x4e>
 80093d0:	460c      	mov	r4, r1
 80093d2:	2001      	movs	r0, #1
 80093d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d8:	e7a6      	b.n	8009328 <_svfiprintf_r+0xd4>
 80093da:	2300      	movs	r3, #0
 80093dc:	f04f 0c0a 	mov.w	ip, #10
 80093e0:	4619      	mov	r1, r3
 80093e2:	3401      	adds	r4, #1
 80093e4:	9305      	str	r3, [sp, #20]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ec:	3a30      	subs	r2, #48	; 0x30
 80093ee:	2a09      	cmp	r2, #9
 80093f0:	d903      	bls.n	80093fa <_svfiprintf_r+0x1a6>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0c6      	beq.n	8009384 <_svfiprintf_r+0x130>
 80093f6:	9105      	str	r1, [sp, #20]
 80093f8:	e7c4      	b.n	8009384 <_svfiprintf_r+0x130>
 80093fa:	4604      	mov	r4, r0
 80093fc:	2301      	movs	r3, #1
 80093fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009402:	e7f0      	b.n	80093e6 <_svfiprintf_r+0x192>
 8009404:	ab03      	add	r3, sp, #12
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	462a      	mov	r2, r5
 800940a:	4638      	mov	r0, r7
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <_svfiprintf_r+0x1f8>)
 800940e:	a904      	add	r1, sp, #16
 8009410:	f7fd ff04 	bl	800721c <_printf_float>
 8009414:	1c42      	adds	r2, r0, #1
 8009416:	4606      	mov	r6, r0
 8009418:	d1d6      	bne.n	80093c8 <_svfiprintf_r+0x174>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	065b      	lsls	r3, r3, #25
 800941e:	f53f af2d 	bmi.w	800927c <_svfiprintf_r+0x28>
 8009422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009424:	b01d      	add	sp, #116	; 0x74
 8009426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942a:	ab03      	add	r3, sp, #12
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	4638      	mov	r0, r7
 8009432:	4b06      	ldr	r3, [pc, #24]	; (800944c <_svfiprintf_r+0x1f8>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	f7fe f991 	bl	800775c <_printf_i>
 800943a:	e7eb      	b.n	8009414 <_svfiprintf_r+0x1c0>
 800943c:	0801550c 	.word	0x0801550c
 8009440:	08015512 	.word	0x08015512
 8009444:	08015516 	.word	0x08015516
 8009448:	0800721d 	.word	0x0800721d
 800944c:	080091a1 	.word	0x080091a1

08009450 <__sflush_r>:
 8009450:	898a      	ldrh	r2, [r1, #12]
 8009452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009454:	4605      	mov	r5, r0
 8009456:	0710      	lsls	r0, r2, #28
 8009458:	460c      	mov	r4, r1
 800945a:	d457      	bmi.n	800950c <__sflush_r+0xbc>
 800945c:	684b      	ldr	r3, [r1, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	dc04      	bgt.n	800946c <__sflush_r+0x1c>
 8009462:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	dc01      	bgt.n	800946c <__sflush_r+0x1c>
 8009468:	2000      	movs	r0, #0
 800946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800946e:	2e00      	cmp	r6, #0
 8009470:	d0fa      	beq.n	8009468 <__sflush_r+0x18>
 8009472:	2300      	movs	r3, #0
 8009474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009478:	682f      	ldr	r7, [r5, #0]
 800947a:	6a21      	ldr	r1, [r4, #32]
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	d032      	beq.n	80094e6 <__sflush_r+0x96>
 8009480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	075a      	lsls	r2, r3, #29
 8009486:	d505      	bpl.n	8009494 <__sflush_r+0x44>
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	1ac0      	subs	r0, r0, r3
 800948c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800948e:	b10b      	cbz	r3, 8009494 <__sflush_r+0x44>
 8009490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009492:	1ac0      	subs	r0, r0, r3
 8009494:	2300      	movs	r3, #0
 8009496:	4602      	mov	r2, r0
 8009498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800949a:	4628      	mov	r0, r5
 800949c:	6a21      	ldr	r1, [r4, #32]
 800949e:	47b0      	blx	r6
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	d106      	bne.n	80094b4 <__sflush_r+0x64>
 80094a6:	6829      	ldr	r1, [r5, #0]
 80094a8:	291d      	cmp	r1, #29
 80094aa:	d82b      	bhi.n	8009504 <__sflush_r+0xb4>
 80094ac:	4a28      	ldr	r2, [pc, #160]	; (8009550 <__sflush_r+0x100>)
 80094ae:	410a      	asrs	r2, r1
 80094b0:	07d6      	lsls	r6, r2, #31
 80094b2:	d427      	bmi.n	8009504 <__sflush_r+0xb4>
 80094b4:	2200      	movs	r2, #0
 80094b6:	6062      	str	r2, [r4, #4]
 80094b8:	6922      	ldr	r2, [r4, #16]
 80094ba:	04d9      	lsls	r1, r3, #19
 80094bc:	6022      	str	r2, [r4, #0]
 80094be:	d504      	bpl.n	80094ca <__sflush_r+0x7a>
 80094c0:	1c42      	adds	r2, r0, #1
 80094c2:	d101      	bne.n	80094c8 <__sflush_r+0x78>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b903      	cbnz	r3, 80094ca <__sflush_r+0x7a>
 80094c8:	6560      	str	r0, [r4, #84]	; 0x54
 80094ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094cc:	602f      	str	r7, [r5, #0]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d0ca      	beq.n	8009468 <__sflush_r+0x18>
 80094d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094d6:	4299      	cmp	r1, r3
 80094d8:	d002      	beq.n	80094e0 <__sflush_r+0x90>
 80094da:	4628      	mov	r0, r5
 80094dc:	f7ff faa0 	bl	8008a20 <_free_r>
 80094e0:	2000      	movs	r0, #0
 80094e2:	6360      	str	r0, [r4, #52]	; 0x34
 80094e4:	e7c1      	b.n	800946a <__sflush_r+0x1a>
 80094e6:	2301      	movs	r3, #1
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b0      	blx	r6
 80094ec:	1c41      	adds	r1, r0, #1
 80094ee:	d1c8      	bne.n	8009482 <__sflush_r+0x32>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0c5      	beq.n	8009482 <__sflush_r+0x32>
 80094f6:	2b1d      	cmp	r3, #29
 80094f8:	d001      	beq.n	80094fe <__sflush_r+0xae>
 80094fa:	2b16      	cmp	r3, #22
 80094fc:	d101      	bne.n	8009502 <__sflush_r+0xb2>
 80094fe:	602f      	str	r7, [r5, #0]
 8009500:	e7b2      	b.n	8009468 <__sflush_r+0x18>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009508:	81a3      	strh	r3, [r4, #12]
 800950a:	e7ae      	b.n	800946a <__sflush_r+0x1a>
 800950c:	690f      	ldr	r7, [r1, #16]
 800950e:	2f00      	cmp	r7, #0
 8009510:	d0aa      	beq.n	8009468 <__sflush_r+0x18>
 8009512:	0793      	lsls	r3, r2, #30
 8009514:	bf18      	it	ne
 8009516:	2300      	movne	r3, #0
 8009518:	680e      	ldr	r6, [r1, #0]
 800951a:	bf08      	it	eq
 800951c:	694b      	ldreq	r3, [r1, #20]
 800951e:	1bf6      	subs	r6, r6, r7
 8009520:	600f      	str	r7, [r1, #0]
 8009522:	608b      	str	r3, [r1, #8]
 8009524:	2e00      	cmp	r6, #0
 8009526:	dd9f      	ble.n	8009468 <__sflush_r+0x18>
 8009528:	4633      	mov	r3, r6
 800952a:	463a      	mov	r2, r7
 800952c:	4628      	mov	r0, r5
 800952e:	6a21      	ldr	r1, [r4, #32]
 8009530:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009534:	47e0      	blx	ip
 8009536:	2800      	cmp	r0, #0
 8009538:	dc06      	bgt.n	8009548 <__sflush_r+0xf8>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	e790      	b.n	800946a <__sflush_r+0x1a>
 8009548:	4407      	add	r7, r0
 800954a:	1a36      	subs	r6, r6, r0
 800954c:	e7ea      	b.n	8009524 <__sflush_r+0xd4>
 800954e:	bf00      	nop
 8009550:	dfbffffe 	.word	0xdfbffffe

08009554 <_fflush_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	690b      	ldr	r3, [r1, #16]
 8009558:	4605      	mov	r5, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b913      	cbnz	r3, 8009564 <_fflush_r+0x10>
 800955e:	2500      	movs	r5, #0
 8009560:	4628      	mov	r0, r5
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	b118      	cbz	r0, 800956e <_fflush_r+0x1a>
 8009566:	6a03      	ldr	r3, [r0, #32]
 8009568:	b90b      	cbnz	r3, 800956e <_fflush_r+0x1a>
 800956a:	f7fe fa93 	bl	8007a94 <__sinit>
 800956e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f3      	beq.n	800955e <_fflush_r+0xa>
 8009576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009578:	07d0      	lsls	r0, r2, #31
 800957a:	d404      	bmi.n	8009586 <_fflush_r+0x32>
 800957c:	0599      	lsls	r1, r3, #22
 800957e:	d402      	bmi.n	8009586 <_fflush_r+0x32>
 8009580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009582:	f7fe fbc1 	bl	8007d08 <__retarget_lock_acquire_recursive>
 8009586:	4628      	mov	r0, r5
 8009588:	4621      	mov	r1, r4
 800958a:	f7ff ff61 	bl	8009450 <__sflush_r>
 800958e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009590:	4605      	mov	r5, r0
 8009592:	07da      	lsls	r2, r3, #31
 8009594:	d4e4      	bmi.n	8009560 <_fflush_r+0xc>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	059b      	lsls	r3, r3, #22
 800959a:	d4e1      	bmi.n	8009560 <_fflush_r+0xc>
 800959c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959e:	f7fe fbb4 	bl	8007d0a <__retarget_lock_release_recursive>
 80095a2:	e7dd      	b.n	8009560 <_fflush_r+0xc>

080095a4 <memmove>:
 80095a4:	4288      	cmp	r0, r1
 80095a6:	b510      	push	{r4, lr}
 80095a8:	eb01 0402 	add.w	r4, r1, r2
 80095ac:	d902      	bls.n	80095b4 <memmove+0x10>
 80095ae:	4284      	cmp	r4, r0
 80095b0:	4623      	mov	r3, r4
 80095b2:	d807      	bhi.n	80095c4 <memmove+0x20>
 80095b4:	1e43      	subs	r3, r0, #1
 80095b6:	42a1      	cmp	r1, r4
 80095b8:	d008      	beq.n	80095cc <memmove+0x28>
 80095ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095c2:	e7f8      	b.n	80095b6 <memmove+0x12>
 80095c4:	4601      	mov	r1, r0
 80095c6:	4402      	add	r2, r0
 80095c8:	428a      	cmp	r2, r1
 80095ca:	d100      	bne.n	80095ce <memmove+0x2a>
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d6:	e7f7      	b.n	80095c8 <memmove+0x24>

080095d8 <__assert_func>:
 80095d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095da:	4614      	mov	r4, r2
 80095dc:	461a      	mov	r2, r3
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <__assert_func+0x2c>)
 80095e0:	4605      	mov	r5, r0
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68d8      	ldr	r0, [r3, #12]
 80095e6:	b14c      	cbz	r4, 80095fc <__assert_func+0x24>
 80095e8:	4b07      	ldr	r3, [pc, #28]	; (8009608 <__assert_func+0x30>)
 80095ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ee:	9100      	str	r1, [sp, #0]
 80095f0:	462b      	mov	r3, r5
 80095f2:	4906      	ldr	r1, [pc, #24]	; (800960c <__assert_func+0x34>)
 80095f4:	f000 f870 	bl	80096d8 <fiprintf>
 80095f8:	f000 f880 	bl	80096fc <abort>
 80095fc:	4b04      	ldr	r3, [pc, #16]	; (8009610 <__assert_func+0x38>)
 80095fe:	461c      	mov	r4, r3
 8009600:	e7f3      	b.n	80095ea <__assert_func+0x12>
 8009602:	bf00      	nop
 8009604:	200000c4 	.word	0x200000c4
 8009608:	08015527 	.word	0x08015527
 800960c:	08015534 	.word	0x08015534
 8009610:	08015562 	.word	0x08015562

08009614 <_calloc_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	fba1 5402 	umull	r5, r4, r1, r2
 800961a:	b934      	cbnz	r4, 800962a <_calloc_r+0x16>
 800961c:	4629      	mov	r1, r5
 800961e:	f7fd fcd5 	bl	8006fcc <_malloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	b928      	cbnz	r0, 8009632 <_calloc_r+0x1e>
 8009626:	4630      	mov	r0, r6
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	220c      	movs	r2, #12
 800962c:	2600      	movs	r6, #0
 800962e:	6002      	str	r2, [r0, #0]
 8009630:	e7f9      	b.n	8009626 <_calloc_r+0x12>
 8009632:	462a      	mov	r2, r5
 8009634:	4621      	mov	r1, r4
 8009636:	f7fe fada 	bl	8007bee <memset>
 800963a:	e7f4      	b.n	8009626 <_calloc_r+0x12>

0800963c <__ascii_mbtowc>:
 800963c:	b082      	sub	sp, #8
 800963e:	b901      	cbnz	r1, 8009642 <__ascii_mbtowc+0x6>
 8009640:	a901      	add	r1, sp, #4
 8009642:	b142      	cbz	r2, 8009656 <__ascii_mbtowc+0x1a>
 8009644:	b14b      	cbz	r3, 800965a <__ascii_mbtowc+0x1e>
 8009646:	7813      	ldrb	r3, [r2, #0]
 8009648:	600b      	str	r3, [r1, #0]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	1e10      	subs	r0, r2, #0
 800964e:	bf18      	it	ne
 8009650:	2001      	movne	r0, #1
 8009652:	b002      	add	sp, #8
 8009654:	4770      	bx	lr
 8009656:	4610      	mov	r0, r2
 8009658:	e7fb      	b.n	8009652 <__ascii_mbtowc+0x16>
 800965a:	f06f 0001 	mvn.w	r0, #1
 800965e:	e7f8      	b.n	8009652 <__ascii_mbtowc+0x16>

08009660 <_realloc_r>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4680      	mov	r8, r0
 8009666:	4614      	mov	r4, r2
 8009668:	460e      	mov	r6, r1
 800966a:	b921      	cbnz	r1, 8009676 <_realloc_r+0x16>
 800966c:	4611      	mov	r1, r2
 800966e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	f7fd bcab 	b.w	8006fcc <_malloc_r>
 8009676:	b92a      	cbnz	r2, 8009684 <_realloc_r+0x24>
 8009678:	f7ff f9d2 	bl	8008a20 <_free_r>
 800967c:	4625      	mov	r5, r4
 800967e:	4628      	mov	r0, r5
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	f000 f841 	bl	800970a <_malloc_usable_size_r>
 8009688:	4284      	cmp	r4, r0
 800968a:	4607      	mov	r7, r0
 800968c:	d802      	bhi.n	8009694 <_realloc_r+0x34>
 800968e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009692:	d812      	bhi.n	80096ba <_realloc_r+0x5a>
 8009694:	4621      	mov	r1, r4
 8009696:	4640      	mov	r0, r8
 8009698:	f7fd fc98 	bl	8006fcc <_malloc_r>
 800969c:	4605      	mov	r5, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	d0ed      	beq.n	800967e <_realloc_r+0x1e>
 80096a2:	42bc      	cmp	r4, r7
 80096a4:	4622      	mov	r2, r4
 80096a6:	4631      	mov	r1, r6
 80096a8:	bf28      	it	cs
 80096aa:	463a      	movcs	r2, r7
 80096ac:	f7fe fb3c 	bl	8007d28 <memcpy>
 80096b0:	4631      	mov	r1, r6
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff f9b4 	bl	8008a20 <_free_r>
 80096b8:	e7e1      	b.n	800967e <_realloc_r+0x1e>
 80096ba:	4635      	mov	r5, r6
 80096bc:	e7df      	b.n	800967e <_realloc_r+0x1e>

080096be <__ascii_wctomb>:
 80096be:	4603      	mov	r3, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	b141      	cbz	r1, 80096d6 <__ascii_wctomb+0x18>
 80096c4:	2aff      	cmp	r2, #255	; 0xff
 80096c6:	d904      	bls.n	80096d2 <__ascii_wctomb+0x14>
 80096c8:	228a      	movs	r2, #138	; 0x8a
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	4770      	bx	lr
 80096d2:	2001      	movs	r0, #1
 80096d4:	700a      	strb	r2, [r1, #0]
 80096d6:	4770      	bx	lr

080096d8 <fiprintf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b503      	push	{r0, r1, lr}
 80096dc:	4601      	mov	r1, r0
 80096de:	ab03      	add	r3, sp, #12
 80096e0:	4805      	ldr	r0, [pc, #20]	; (80096f8 <fiprintf+0x20>)
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f000 f83d 	bl	8009768 <_vfiprintf_r>
 80096ee:	b002      	add	sp, #8
 80096f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f4:	b003      	add	sp, #12
 80096f6:	4770      	bx	lr
 80096f8:	200000c4 	.word	0x200000c4

080096fc <abort>:
 80096fc:	2006      	movs	r0, #6
 80096fe:	b508      	push	{r3, lr}
 8009700:	f000 fa0a 	bl	8009b18 <raise>
 8009704:	2001      	movs	r0, #1
 8009706:	f7fd fb66 	bl	8006dd6 <_exit>

0800970a <_malloc_usable_size_r>:
 800970a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970e:	1f18      	subs	r0, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	580b      	ldrlt	r3, [r1, r0]
 8009716:	18c0      	addlt	r0, r0, r3
 8009718:	4770      	bx	lr

0800971a <__sfputc_r>:
 800971a:	6893      	ldr	r3, [r2, #8]
 800971c:	b410      	push	{r4}
 800971e:	3b01      	subs	r3, #1
 8009720:	2b00      	cmp	r3, #0
 8009722:	6093      	str	r3, [r2, #8]
 8009724:	da07      	bge.n	8009736 <__sfputc_r+0x1c>
 8009726:	6994      	ldr	r4, [r2, #24]
 8009728:	42a3      	cmp	r3, r4
 800972a:	db01      	blt.n	8009730 <__sfputc_r+0x16>
 800972c:	290a      	cmp	r1, #10
 800972e:	d102      	bne.n	8009736 <__sfputc_r+0x1c>
 8009730:	bc10      	pop	{r4}
 8009732:	f000 b933 	b.w	800999c <__swbuf_r>
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	1c58      	adds	r0, r3, #1
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	7019      	strb	r1, [r3, #0]
 800973e:	4608      	mov	r0, r1
 8009740:	bc10      	pop	{r4}
 8009742:	4770      	bx	lr

08009744 <__sfputs_r>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	4614      	mov	r4, r2
 800974c:	18d5      	adds	r5, r2, r3
 800974e:	42ac      	cmp	r4, r5
 8009750:	d101      	bne.n	8009756 <__sfputs_r+0x12>
 8009752:	2000      	movs	r0, #0
 8009754:	e007      	b.n	8009766 <__sfputs_r+0x22>
 8009756:	463a      	mov	r2, r7
 8009758:	4630      	mov	r0, r6
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	f7ff ffdc 	bl	800971a <__sfputc_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d1f3      	bne.n	800974e <__sfputs_r+0xa>
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009768 <_vfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	460d      	mov	r5, r1
 800976e:	4614      	mov	r4, r2
 8009770:	4698      	mov	r8, r3
 8009772:	4606      	mov	r6, r0
 8009774:	b09d      	sub	sp, #116	; 0x74
 8009776:	b118      	cbz	r0, 8009780 <_vfiprintf_r+0x18>
 8009778:	6a03      	ldr	r3, [r0, #32]
 800977a:	b90b      	cbnz	r3, 8009780 <_vfiprintf_r+0x18>
 800977c:	f7fe f98a 	bl	8007a94 <__sinit>
 8009780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	d405      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	059a      	lsls	r2, r3, #22
 800978a:	d402      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 800978c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978e:	f7fe fabb 	bl	8007d08 <__retarget_lock_acquire_recursive>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	071b      	lsls	r3, r3, #28
 8009796:	d501      	bpl.n	800979c <_vfiprintf_r+0x34>
 8009798:	692b      	ldr	r3, [r5, #16]
 800979a:	b99b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x5c>
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f000 f93a 	bl	8009a18 <__swsetup_r>
 80097a4:	b170      	cbz	r0, 80097c4 <_vfiprintf_r+0x5c>
 80097a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a8:	07dc      	lsls	r4, r3, #31
 80097aa:	d504      	bpl.n	80097b6 <_vfiprintf_r+0x4e>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	b01d      	add	sp, #116	; 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	0598      	lsls	r0, r3, #22
 80097ba:	d4f7      	bmi.n	80097ac <_vfiprintf_r+0x44>
 80097bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097be:	f7fe faa4 	bl	8007d0a <__retarget_lock_release_recursive>
 80097c2:	e7f3      	b.n	80097ac <_vfiprintf_r+0x44>
 80097c4:	2300      	movs	r3, #0
 80097c6:	9309      	str	r3, [sp, #36]	; 0x24
 80097c8:	2320      	movs	r3, #32
 80097ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ce:	2330      	movs	r3, #48	; 0x30
 80097d0:	f04f 0901 	mov.w	r9, #1
 80097d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009988 <_vfiprintf_r+0x220>
 80097dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097e0:	4623      	mov	r3, r4
 80097e2:	469a      	mov	sl, r3
 80097e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e8:	b10a      	cbz	r2, 80097ee <_vfiprintf_r+0x86>
 80097ea:	2a25      	cmp	r2, #37	; 0x25
 80097ec:	d1f9      	bne.n	80097e2 <_vfiprintf_r+0x7a>
 80097ee:	ebba 0b04 	subs.w	fp, sl, r4
 80097f2:	d00b      	beq.n	800980c <_vfiprintf_r+0xa4>
 80097f4:	465b      	mov	r3, fp
 80097f6:	4622      	mov	r2, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ffa2 	bl	8009744 <__sfputs_r>
 8009800:	3001      	adds	r0, #1
 8009802:	f000 80a9 	beq.w	8009958 <_vfiprintf_r+0x1f0>
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	445a      	add	r2, fp
 800980a:	9209      	str	r2, [sp, #36]	; 0x24
 800980c:	f89a 3000 	ldrb.w	r3, [sl]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80a1 	beq.w	8009958 <_vfiprintf_r+0x1f0>
 8009816:	2300      	movs	r3, #0
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009820:	f10a 0a01 	add.w	sl, sl, #1
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800982c:	931a      	str	r3, [sp, #104]	; 0x68
 800982e:	4654      	mov	r4, sl
 8009830:	2205      	movs	r2, #5
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	4854      	ldr	r0, [pc, #336]	; (8009988 <_vfiprintf_r+0x220>)
 8009838:	f7fe fa68 	bl	8007d0c <memchr>
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	b9d8      	cbnz	r0, 8009878 <_vfiprintf_r+0x110>
 8009840:	06d1      	lsls	r1, r2, #27
 8009842:	bf44      	itt	mi
 8009844:	2320      	movmi	r3, #32
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800984a:	0713      	lsls	r3, r2, #28
 800984c:	bf44      	itt	mi
 800984e:	232b      	movmi	r3, #43	; 0x2b
 8009850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b2a      	cmp	r3, #42	; 0x2a
 800985a:	d015      	beq.n	8009888 <_vfiprintf_r+0x120>
 800985c:	4654      	mov	r4, sl
 800985e:	2000      	movs	r0, #0
 8009860:	f04f 0c0a 	mov.w	ip, #10
 8009864:	9a07      	ldr	r2, [sp, #28]
 8009866:	4621      	mov	r1, r4
 8009868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986c:	3b30      	subs	r3, #48	; 0x30
 800986e:	2b09      	cmp	r3, #9
 8009870:	d94d      	bls.n	800990e <_vfiprintf_r+0x1a6>
 8009872:	b1b0      	cbz	r0, 80098a2 <_vfiprintf_r+0x13a>
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	e014      	b.n	80098a2 <_vfiprintf_r+0x13a>
 8009878:	eba0 0308 	sub.w	r3, r0, r8
 800987c:	fa09 f303 	lsl.w	r3, r9, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	46a2      	mov	sl, r4
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	e7d2      	b.n	800982e <_vfiprintf_r+0xc6>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d19      	adds	r1, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfbb      	ittet	lt
 8009894:	425b      	neglt	r3, r3
 8009896:	f042 0202 	orrlt.w	r2, r2, #2
 800989a:	9307      	strge	r3, [sp, #28]
 800989c:	9307      	strlt	r3, [sp, #28]
 800989e:	bfb8      	it	lt
 80098a0:	9204      	strlt	r2, [sp, #16]
 80098a2:	7823      	ldrb	r3, [r4, #0]
 80098a4:	2b2e      	cmp	r3, #46	; 0x2e
 80098a6:	d10c      	bne.n	80098c2 <_vfiprintf_r+0x15a>
 80098a8:	7863      	ldrb	r3, [r4, #1]
 80098aa:	2b2a      	cmp	r3, #42	; 0x2a
 80098ac:	d134      	bne.n	8009918 <_vfiprintf_r+0x1b0>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	3402      	adds	r4, #2
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	9203      	str	r2, [sp, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bfb8      	it	lt
 80098bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800998c <_vfiprintf_r+0x224>
 80098c6:	2203      	movs	r2, #3
 80098c8:	4650      	mov	r0, sl
 80098ca:	7821      	ldrb	r1, [r4, #0]
 80098cc:	f7fe fa1e 	bl	8007d0c <memchr>
 80098d0:	b138      	cbz	r0, 80098e2 <_vfiprintf_r+0x17a>
 80098d2:	2240      	movs	r2, #64	; 0x40
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	eba0 000a 	sub.w	r0, r0, sl
 80098da:	4082      	lsls	r2, r0
 80098dc:	4313      	orrs	r3, r2
 80098de:	3401      	adds	r4, #1
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	2206      	movs	r2, #6
 80098e8:	4829      	ldr	r0, [pc, #164]	; (8009990 <_vfiprintf_r+0x228>)
 80098ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ee:	f7fe fa0d 	bl	8007d0c <memchr>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d03f      	beq.n	8009976 <_vfiprintf_r+0x20e>
 80098f6:	4b27      	ldr	r3, [pc, #156]	; (8009994 <_vfiprintf_r+0x22c>)
 80098f8:	bb1b      	cbnz	r3, 8009942 <_vfiprintf_r+0x1da>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	3307      	adds	r3, #7
 80098fe:	f023 0307 	bic.w	r3, r3, #7
 8009902:	3308      	adds	r3, #8
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009908:	443b      	add	r3, r7
 800990a:	9309      	str	r3, [sp, #36]	; 0x24
 800990c:	e768      	b.n	80097e0 <_vfiprintf_r+0x78>
 800990e:	460c      	mov	r4, r1
 8009910:	2001      	movs	r0, #1
 8009912:	fb0c 3202 	mla	r2, ip, r2, r3
 8009916:	e7a6      	b.n	8009866 <_vfiprintf_r+0xfe>
 8009918:	2300      	movs	r3, #0
 800991a:	f04f 0c0a 	mov.w	ip, #10
 800991e:	4619      	mov	r1, r3
 8009920:	3401      	adds	r4, #1
 8009922:	9305      	str	r3, [sp, #20]
 8009924:	4620      	mov	r0, r4
 8009926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992a:	3a30      	subs	r2, #48	; 0x30
 800992c:	2a09      	cmp	r2, #9
 800992e:	d903      	bls.n	8009938 <_vfiprintf_r+0x1d0>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0c6      	beq.n	80098c2 <_vfiprintf_r+0x15a>
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	e7c4      	b.n	80098c2 <_vfiprintf_r+0x15a>
 8009938:	4604      	mov	r4, r0
 800993a:	2301      	movs	r3, #1
 800993c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009940:	e7f0      	b.n	8009924 <_vfiprintf_r+0x1bc>
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4630      	mov	r0, r6
 800994a:	4b13      	ldr	r3, [pc, #76]	; (8009998 <_vfiprintf_r+0x230>)
 800994c:	a904      	add	r1, sp, #16
 800994e:	f7fd fc65 	bl	800721c <_printf_float>
 8009952:	4607      	mov	r7, r0
 8009954:	1c78      	adds	r0, r7, #1
 8009956:	d1d6      	bne.n	8009906 <_vfiprintf_r+0x19e>
 8009958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d405      	bmi.n	800996a <_vfiprintf_r+0x202>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	059a      	lsls	r2, r3, #22
 8009962:	d402      	bmi.n	800996a <_vfiprintf_r+0x202>
 8009964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009966:	f7fe f9d0 	bl	8007d0a <__retarget_lock_release_recursive>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	065b      	lsls	r3, r3, #25
 800996e:	f53f af1d 	bmi.w	80097ac <_vfiprintf_r+0x44>
 8009972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009974:	e71c      	b.n	80097b0 <_vfiprintf_r+0x48>
 8009976:	ab03      	add	r3, sp, #12
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462a      	mov	r2, r5
 800997c:	4630      	mov	r0, r6
 800997e:	4b06      	ldr	r3, [pc, #24]	; (8009998 <_vfiprintf_r+0x230>)
 8009980:	a904      	add	r1, sp, #16
 8009982:	f7fd feeb 	bl	800775c <_printf_i>
 8009986:	e7e4      	b.n	8009952 <_vfiprintf_r+0x1ea>
 8009988:	0801550c 	.word	0x0801550c
 800998c:	08015512 	.word	0x08015512
 8009990:	08015516 	.word	0x08015516
 8009994:	0800721d 	.word	0x0800721d
 8009998:	08009745 	.word	0x08009745

0800999c <__swbuf_r>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4614      	mov	r4, r2
 80099a2:	4605      	mov	r5, r0
 80099a4:	b118      	cbz	r0, 80099ae <__swbuf_r+0x12>
 80099a6:	6a03      	ldr	r3, [r0, #32]
 80099a8:	b90b      	cbnz	r3, 80099ae <__swbuf_r+0x12>
 80099aa:	f7fe f873 	bl	8007a94 <__sinit>
 80099ae:	69a3      	ldr	r3, [r4, #24]
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	071a      	lsls	r2, r3, #28
 80099b6:	d525      	bpl.n	8009a04 <__swbuf_r+0x68>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b31b      	cbz	r3, 8009a04 <__swbuf_r+0x68>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	6922      	ldr	r2, [r4, #16]
 80099c0:	b2f6      	uxtb	r6, r6
 80099c2:	1a98      	subs	r0, r3, r2
 80099c4:	6963      	ldr	r3, [r4, #20]
 80099c6:	4637      	mov	r7, r6
 80099c8:	4283      	cmp	r3, r0
 80099ca:	dc04      	bgt.n	80099d6 <__swbuf_r+0x3a>
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f7ff fdc0 	bl	8009554 <_fflush_r>
 80099d4:	b9e0      	cbnz	r0, 8009a10 <__swbuf_r+0x74>
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	3b01      	subs	r3, #1
 80099da:	60a3      	str	r3, [r4, #8]
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	6022      	str	r2, [r4, #0]
 80099e2:	701e      	strb	r6, [r3, #0]
 80099e4:	6962      	ldr	r2, [r4, #20]
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d004      	beq.n	80099f6 <__swbuf_r+0x5a>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	07db      	lsls	r3, r3, #31
 80099f0:	d506      	bpl.n	8009a00 <__swbuf_r+0x64>
 80099f2:	2e0a      	cmp	r6, #10
 80099f4:	d104      	bne.n	8009a00 <__swbuf_r+0x64>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7ff fdab 	bl	8009554 <_fflush_r>
 80099fe:	b938      	cbnz	r0, 8009a10 <__swbuf_r+0x74>
 8009a00:	4638      	mov	r0, r7
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f806 	bl	8009a18 <__swsetup_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d0d5      	beq.n	80099bc <__swbuf_r+0x20>
 8009a10:	f04f 37ff 	mov.w	r7, #4294967295
 8009a14:	e7f4      	b.n	8009a00 <__swbuf_r+0x64>
	...

08009a18 <__swsetup_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <__swsetup_r+0xac>)
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	460c      	mov	r4, r1
 8009a22:	b118      	cbz	r0, 8009a2c <__swsetup_r+0x14>
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	b90b      	cbnz	r3, 8009a2c <__swsetup_r+0x14>
 8009a28:	f7fe f834 	bl	8007a94 <__sinit>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a32:	0718      	lsls	r0, r3, #28
 8009a34:	d422      	bmi.n	8009a7c <__swsetup_r+0x64>
 8009a36:	06d9      	lsls	r1, r3, #27
 8009a38:	d407      	bmi.n	8009a4a <__swsetup_r+0x32>
 8009a3a:	2309      	movs	r3, #9
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	e034      	b.n	8009ab4 <__swsetup_r+0x9c>
 8009a4a:	0758      	lsls	r0, r3, #29
 8009a4c:	d512      	bpl.n	8009a74 <__swsetup_r+0x5c>
 8009a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a50:	b141      	cbz	r1, 8009a64 <__swsetup_r+0x4c>
 8009a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a56:	4299      	cmp	r1, r3
 8009a58:	d002      	beq.n	8009a60 <__swsetup_r+0x48>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f7fe ffe0 	bl	8008a20 <_free_r>
 8009a60:	2300      	movs	r3, #0
 8009a62:	6363      	str	r3, [r4, #52]	; 0x34
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f043 0308 	orr.w	r3, r3, #8
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b94b      	cbnz	r3, 8009a94 <__swsetup_r+0x7c>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8a:	d003      	beq.n	8009a94 <__swsetup_r+0x7c>
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f883 	bl	8009b9a <__smakebuf_r>
 8009a94:	89a0      	ldrh	r0, [r4, #12]
 8009a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a9a:	f010 0301 	ands.w	r3, r0, #1
 8009a9e:	d00a      	beq.n	8009ab6 <__swsetup_r+0x9e>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6963      	ldr	r3, [r4, #20]
 8009aa6:	425b      	negs	r3, r3
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	b943      	cbnz	r3, 8009ac0 <__swsetup_r+0xa8>
 8009aae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab2:	d1c4      	bne.n	8009a3e <__swsetup_r+0x26>
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	0781      	lsls	r1, r0, #30
 8009ab8:	bf58      	it	pl
 8009aba:	6963      	ldrpl	r3, [r4, #20]
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	e7f4      	b.n	8009aaa <__swsetup_r+0x92>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e7f7      	b.n	8009ab4 <__swsetup_r+0x9c>
 8009ac4:	200000c4 	.word	0x200000c4

08009ac8 <_raise_r>:
 8009ac8:	291f      	cmp	r1, #31
 8009aca:	b538      	push	{r3, r4, r5, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	d904      	bls.n	8009adc <_raise_r+0x14>
 8009ad2:	2316      	movs	r3, #22
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ade:	b112      	cbz	r2, 8009ae6 <_raise_r+0x1e>
 8009ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae4:	b94b      	cbnz	r3, 8009afa <_raise_r+0x32>
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f830 	bl	8009b4c <_getpid_r>
 8009aec:	462a      	mov	r2, r5
 8009aee:	4601      	mov	r1, r0
 8009af0:	4620      	mov	r0, r4
 8009af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af6:	f000 b817 	b.w	8009b28 <_kill_r>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d00a      	beq.n	8009b14 <_raise_r+0x4c>
 8009afe:	1c59      	adds	r1, r3, #1
 8009b00:	d103      	bne.n	8009b0a <_raise_r+0x42>
 8009b02:	2316      	movs	r3, #22
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	2001      	movs	r0, #1
 8009b08:	e7e7      	b.n	8009ada <_raise_r+0x12>
 8009b0a:	2400      	movs	r4, #0
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b12:	4798      	blx	r3
 8009b14:	2000      	movs	r0, #0
 8009b16:	e7e0      	b.n	8009ada <_raise_r+0x12>

08009b18 <raise>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <raise+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f7ff bfd3 	b.w	8009ac8 <_raise_r>
 8009b22:	bf00      	nop
 8009b24:	200000c4 	.word	0x200000c4

08009b28 <_kill_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4d06      	ldr	r5, [pc, #24]	; (8009b48 <_kill_r+0x20>)
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	f7fd f93e 	bl	8006db6 <_kill>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	d102      	bne.n	8009b44 <_kill_r+0x1c>
 8009b3e:	682b      	ldr	r3, [r5, #0]
 8009b40:	b103      	cbz	r3, 8009b44 <_kill_r+0x1c>
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	2000494c 	.word	0x2000494c

08009b4c <_getpid_r>:
 8009b4c:	f7fd b92c 	b.w	8006da8 <_getpid>

08009b50 <__swhatbuf_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b58:	4615      	mov	r5, r2
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	461e      	mov	r6, r3
 8009b5e:	b096      	sub	sp, #88	; 0x58
 8009b60:	da0c      	bge.n	8009b7c <__swhatbuf_r+0x2c>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	2100      	movs	r1, #0
 8009b66:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b6a:	bf0c      	ite	eq
 8009b6c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b70:	2340      	movne	r3, #64	; 0x40
 8009b72:	2000      	movs	r0, #0
 8009b74:	6031      	str	r1, [r6, #0]
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	b016      	add	sp, #88	; 0x58
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	466a      	mov	r2, sp
 8009b7e:	f000 f849 	bl	8009c14 <_fstat_r>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	dbed      	blt.n	8009b62 <__swhatbuf_r+0x12>
 8009b86:	9901      	ldr	r1, [sp, #4]
 8009b88:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b8c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b90:	4259      	negs	r1, r3
 8009b92:	4159      	adcs	r1, r3
 8009b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b98:	e7eb      	b.n	8009b72 <__swhatbuf_r+0x22>

08009b9a <__smakebuf_r>:
 8009b9a:	898b      	ldrh	r3, [r1, #12]
 8009b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b9e:	079d      	lsls	r5, r3, #30
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	d507      	bpl.n	8009bb6 <__smakebuf_r+0x1c>
 8009ba6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	2301      	movs	r3, #1
 8009bb0:	6163      	str	r3, [r4, #20]
 8009bb2:	b002      	add	sp, #8
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	466a      	mov	r2, sp
 8009bb8:	ab01      	add	r3, sp, #4
 8009bba:	f7ff ffc9 	bl	8009b50 <__swhatbuf_r>
 8009bbe:	9900      	ldr	r1, [sp, #0]
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7fd fa02 	bl	8006fcc <_malloc_r>
 8009bc8:	b948      	cbnz	r0, 8009bde <__smakebuf_r+0x44>
 8009bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bce:	059a      	lsls	r2, r3, #22
 8009bd0:	d4ef      	bmi.n	8009bb2 <__smakebuf_r+0x18>
 8009bd2:	f023 0303 	bic.w	r3, r3, #3
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	e7e3      	b.n	8009ba6 <__smakebuf_r+0xc>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	6020      	str	r0, [r4, #0]
 8009be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be6:	81a3      	strh	r3, [r4, #12]
 8009be8:	9b00      	ldr	r3, [sp, #0]
 8009bea:	6120      	str	r0, [r4, #16]
 8009bec:	6163      	str	r3, [r4, #20]
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	b15b      	cbz	r3, 8009c0a <__smakebuf_r+0x70>
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf8:	f000 f81e 	bl	8009c38 <_isatty_r>
 8009bfc:	b128      	cbz	r0, 8009c0a <__smakebuf_r+0x70>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f023 0303 	bic.w	r3, r3, #3
 8009c04:	f043 0301 	orr.w	r3, r3, #1
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	431d      	orrs	r5, r3
 8009c0e:	81a5      	strh	r5, [r4, #12]
 8009c10:	e7cf      	b.n	8009bb2 <__smakebuf_r+0x18>
	...

08009c14 <_fstat_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	2300      	movs	r3, #0
 8009c18:	4d06      	ldr	r5, [pc, #24]	; (8009c34 <_fstat_r+0x20>)
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f7fd f926 	bl	8006e72 <_fstat>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d102      	bne.n	8009c30 <_fstat_r+0x1c>
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	b103      	cbz	r3, 8009c30 <_fstat_r+0x1c>
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	bf00      	nop
 8009c34:	2000494c 	.word	0x2000494c

08009c38 <_isatty_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4d05      	ldr	r5, [pc, #20]	; (8009c54 <_isatty_r+0x1c>)
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7fd f924 	bl	8006e90 <_isatty>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_isatty_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_isatty_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	2000494c 	.word	0x2000494c

08009c58 <_init>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr

08009c64 <_fini>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr
