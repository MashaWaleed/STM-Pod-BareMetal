
FREE-RTOS-IMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000513c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e7c  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080060e8  080060e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060e8  080060e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046f8  20000074  08006164  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000476c  08006164  0002476c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c67  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e33  00000000  00000000  00026d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00028b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000610  00000000  00000000  000293c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004cc4  00000000  00000000  000299d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a88b  00000000  00000000  0002e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000157db  00000000  00000000  00038f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000252c  00000000  00000000  0004e6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00050c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000074 	.word	0x20000074
 800014c:	00000000 	.word	0x00000000
 8000150:	08005254 	.word	0x08005254

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000078 	.word	0x20000078
 800016c:	08005254 	.word	0x08005254

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <EXTI0_IRQHandler>:
 * 										ISR FUNCTIONS
 * =======================================================================================
 */


void EXTI0_IRQHandler(void){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <EXTI0_IRQHandler+0x14>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <EXTI0_IRQHandler+0x18>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4798      	blx	r3
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010400 	.word	0x40010400
 8000e20:	20000090 	.word	0x20000090

08000e24 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <EXTI1_IRQHandler+0x14>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 8000e2e:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <EXTI1_IRQHandler+0x18>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010400 	.word	0x40010400
 8000e3c:	20000090 	.word	0x20000090

08000e40 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <EXTI2_IRQHandler+0x14>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 8000e4a:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <EXTI2_IRQHandler+0x18>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4798      	blx	r3
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010400 	.word	0x40010400
 8000e58:	20000090 	.word	0x20000090

08000e5c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <EXTI3_IRQHandler+0x14>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <EXTI3_IRQHandler+0x18>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4798      	blx	r3
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010400 	.word	0x40010400
 8000e74:	20000090 	.word	0x20000090

08000e78 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <EXTI4_IRQHandler+0x14>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <EXTI4_IRQHandler+0x18>)
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	4798      	blx	r3
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	20000090 	.word	0x20000090

08000e94 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <EXTI9_5_IRQHandler+0x1c>
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	615a      	str	r2, [r3, #20]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <EXTI9_5_IRQHandler+0x88>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <EXTI9_5_IRQHandler+0x34>
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000ebe:	2240      	movs	r2, #64	; 0x40
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <EXTI9_5_IRQHandler+0x88>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <EXTI9_5_IRQHandler+0x4c>
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <EXTI9_5_IRQHandler+0x88>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <EXTI9_5_IRQHandler+0x66>
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <EXTI9_5_IRQHandler+0x88>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <EXTI9_5_IRQHandler+0x80>
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <EXTI9_5_IRQHandler+0x84>)
 8000f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <EXTI9_5_IRQHandler+0x88>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	4798      	blx	r3
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40010400 	.word	0x40010400
 8000f1c:	20000090 	.word	0x20000090

08000f20 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <EXTI15_10_IRQHandler+0x22>
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6153      	str	r3, [r2, #20]
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d008      	beq.n	8000f60 <EXTI15_10_IRQHandler+0x40>
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <EXTI15_10_IRQHandler+0x5e>
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f76:	6153      	str	r3, [r2, #20]
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <EXTI15_10_IRQHandler+0x7c>
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d008      	beq.n	8000fba <EXTI15_10_IRQHandler+0x9a>
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6153      	str	r3, [r2, #20]
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb8:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <EXTI15_10_IRQHandler+0xb8>
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	4798      	blx	r3
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010400 	.word	0x40010400
 8000fe0:	20000090 	.word	0x20000090

08000fe4 <GET_CRLH_Position>:
#include "GPIO.h"

/**================================================================ */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff4:	f000 80a5 	beq.w	8001142 <GET_CRLH_Position+0x15e>
 8000ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ffc:	f300 80a3 	bgt.w	8001146 <GET_CRLH_Position+0x162>
 8001000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001004:	f000 809b 	beq.w	800113e <GET_CRLH_Position+0x15a>
 8001008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800100c:	f300 809b 	bgt.w	8001146 <GET_CRLH_Position+0x162>
 8001010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001014:	f000 8091 	beq.w	800113a <GET_CRLH_Position+0x156>
 8001018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800101c:	f300 8093 	bgt.w	8001146 <GET_CRLH_Position+0x162>
 8001020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001024:	f000 8087 	beq.w	8001136 <GET_CRLH_Position+0x152>
 8001028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800102c:	f300 808b 	bgt.w	8001146 <GET_CRLH_Position+0x162>
 8001030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001034:	d07d      	beq.n	8001132 <GET_CRLH_Position+0x14e>
 8001036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800103a:	f300 8084 	bgt.w	8001146 <GET_CRLH_Position+0x162>
 800103e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001042:	d074      	beq.n	800112e <GET_CRLH_Position+0x14a>
 8001044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001048:	dc7d      	bgt.n	8001146 <GET_CRLH_Position+0x162>
 800104a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800104e:	d06c      	beq.n	800112a <GET_CRLH_Position+0x146>
 8001050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001054:	dc77      	bgt.n	8001146 <GET_CRLH_Position+0x162>
 8001056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105a:	d064      	beq.n	8001126 <GET_CRLH_Position+0x142>
 800105c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001060:	dc71      	bgt.n	8001146 <GET_CRLH_Position+0x162>
 8001062:	2b80      	cmp	r3, #128	; 0x80
 8001064:	d05d      	beq.n	8001122 <GET_CRLH_Position+0x13e>
 8001066:	2b80      	cmp	r3, #128	; 0x80
 8001068:	dc6d      	bgt.n	8001146 <GET_CRLH_Position+0x162>
 800106a:	2b20      	cmp	r3, #32
 800106c:	dc48      	bgt.n	8001100 <GET_CRLH_Position+0x11c>
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd69      	ble.n	8001146 <GET_CRLH_Position+0x162>
 8001072:	3b01      	subs	r3, #1
 8001074:	2b1f      	cmp	r3, #31
 8001076:	d866      	bhi.n	8001146 <GET_CRLH_Position+0x162>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <GET_CRLH_Position+0x9c>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001107 	.word	0x08001107
 8001084:	0800110b 	.word	0x0800110b
 8001088:	08001147 	.word	0x08001147
 800108c:	0800110f 	.word	0x0800110f
 8001090:	08001147 	.word	0x08001147
 8001094:	08001147 	.word	0x08001147
 8001098:	08001147 	.word	0x08001147
 800109c:	08001113 	.word	0x08001113
 80010a0:	08001147 	.word	0x08001147
 80010a4:	08001147 	.word	0x08001147
 80010a8:	08001147 	.word	0x08001147
 80010ac:	08001147 	.word	0x08001147
 80010b0:	08001147 	.word	0x08001147
 80010b4:	08001147 	.word	0x08001147
 80010b8:	08001147 	.word	0x08001147
 80010bc:	08001117 	.word	0x08001117
 80010c0:	08001147 	.word	0x08001147
 80010c4:	08001147 	.word	0x08001147
 80010c8:	08001147 	.word	0x08001147
 80010cc:	08001147 	.word	0x08001147
 80010d0:	08001147 	.word	0x08001147
 80010d4:	08001147 	.word	0x08001147
 80010d8:	08001147 	.word	0x08001147
 80010dc:	08001147 	.word	0x08001147
 80010e0:	08001147 	.word	0x08001147
 80010e4:	08001147 	.word	0x08001147
 80010e8:	08001147 	.word	0x08001147
 80010ec:	08001147 	.word	0x08001147
 80010f0:	08001147 	.word	0x08001147
 80010f4:	08001147 	.word	0x08001147
 80010f8:	08001147 	.word	0x08001147
 80010fc:	0800111b 	.word	0x0800111b
 8001100:	2b40      	cmp	r3, #64	; 0x40
 8001102:	d00c      	beq.n	800111e <GET_CRLH_Position+0x13a>
 8001104:	e01f      	b.n	8001146 <GET_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001106:	2300      	movs	r3, #0
 8001108:	e01e      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800110a:	2304      	movs	r3, #4
 800110c:	e01c      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800110e:	2308      	movs	r3, #8
 8001110:	e01a      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001112:	230c      	movs	r3, #12
 8001114:	e018      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001116:	2310      	movs	r3, #16
 8001118:	e016      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 800111a:	2314      	movs	r3, #20
 800111c:	e014      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800111e:	2318      	movs	r3, #24
 8001120:	e012      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001122:	231c      	movs	r3, #28
 8001124:	e010      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001126:	2300      	movs	r3, #0
 8001128:	e00e      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 800112a:	2304      	movs	r3, #4
 800112c:	e00c      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800112e:	2308      	movs	r3, #8
 8001130:	e00a      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001132:	230c      	movs	r3, #12
 8001134:	e008      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001136:	2310      	movs	r3, #16
 8001138:	e006      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 800113a:	2314      	movs	r3, #20
 800113c:	e004      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800113e:	2318      	movs	r3, #24
 8001140:	e002      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001142:	231c      	movs	r3, #28
 8001144:	e000      	b.n	8001148 <GET_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register = NULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	config_register = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)?&GPIOX->CRL:&GPIOX->CRH;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <MCAL_GPIO_Init+0x1a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <MCAL_GPIO_Init+0x1e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <GET_CRLH_Position>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	210f      	movs	r1, #15
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	43d2      	mvns	r2, r2
 8001194:	401a      	ands	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d00b      	beq.n	80011ba <MCAL_GPIO_Init+0x66>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d007      	beq.n	80011ba <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	d003      	beq.n	80011ba <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d10e      	bne.n	80011d8 <MCAL_GPIO_Init+0x84>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	789b      	ldrb	r3, [r3, #2]
 80011be:	3b04      	subs	r3, #4
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	b25a      	sxtb	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	75fb      	strb	r3, [r7, #23]
 80011d6:	e031      	b.n	800123c <MCAL_GPIO_Init+0xe8>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	789b      	ldrb	r3, [r3, #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <MCAL_GPIO_Init+0x94>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d107      	bne.n	80011f8 <MCAL_GPIO_Init+0xa4>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e021      	b.n	800123c <MCAL_GPIO_Init+0xe8>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d107      	bne.n	8001210 <MCAL_GPIO_Init+0xbc>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	75fb      	strb	r3, [r7, #23]
 800120e:	e015      	b.n	800123c <MCAL_GPIO_Init+0xe8>
		}
		//if pin is PU or PD
		else{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8001210:	2308      	movs	r3, #8
 8001212:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d107      	bne.n	800122c <MCAL_GPIO_Init+0xd8>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	8812      	ldrh	r2, [r2, #0]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	e007      	b.n	800123c <MCAL_GPIO_Init+0xe8>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	7df9      	ldrb	r1, [r7, #23]
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	431a      	orrs	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]

}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <MCAL_GPIO_ReadPin>:
 * @param[in]	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOX , uint16_t PinNumber)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status;
	if (((GPIOX->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <MCAL_GPIO_ReadPin+0x1e>
	{
		bit_status = GPIO_PIN_SET;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bit_status = GPIO_PIN_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status ;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 80012a0:	e002      	b.n	80012a8 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	615a      	str	r2, [r3, #20]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <PLL_MUL_Calculator>:
const uint8_t AHB_PrescaleTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
const uint8_t APB_PrescaleTable[8U] = {0,0,0,0,1,2,3,4};
/*****************************< Private Function Implementations *****************************/

u32 PLL_MUL_Calculator(u32 Copy_u32Input_CLkValue, u8 Copy_u8MUL_Factor)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
	//Handle the 6.5 corner case
    Copy_u8MUL_Factor = (Copy_u8MUL_Factor == 0xD) ? 4.5 : Copy_u8MUL_Factor;
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d00c      	beq.n	80012e0 <PLL_MUL_Calculator+0x2c>
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8a3 	bl	8000414 <__aeabi_i2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fb19 	bl	800090c <__aeabi_d2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e000      	b.n	80012e2 <PLL_MUL_Calculator+0x2e>
 80012e0:	2304      	movs	r3, #4
 80012e2:	70fb      	strb	r3, [r7, #3]

    //conditional for the Frequency value
	if((Copy_u32Input_CLkValue * (Copy_u8MUL_Factor + 2)) <= SYSCLK_SAFE_LIMIT)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	3302      	adds	r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <PLL_MUL_Calculator+0x5c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d806      	bhi.n	8001304 <PLL_MUL_Calculator+0x50>
	{

		return (Copy_u32Input_CLkValue * (Copy_u8MUL_Factor + 2));
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	3302      	adds	r3, #2
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	e000      	b.n	8001306 <PLL_MUL_Calculator+0x52>
	}
	else{
		return E_NOT_OK;
 8001304:	2300      	movs	r3, #0
	}
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	044aa200 	.word	0x044aa200

08001314 <MCAL_RCC_InitSysClock>:
//}


/*****************************< API Implementations *****************************/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
    #elif RCC_SYSCLK == RCC_PLL

        /**< Specify PLL source. */
		#if RCC_PLL_SRC == RCC_HSE

        	CLR_BIT(RCC_CR, RCC_CR_HSEBYP);
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
        	SET_BIT(RCC_CR, RCC_CR_HSEON);
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]

        	while (!(RCC_CR & (1 << 17)));
 8001336:	bf00      	nop
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f9      	beq.n	8001338 <MCAL_RCC_InitSysClock+0x24>

			#ifdef Is_72MHZ
        	FLASH_ACR |= 0x12;
			#endif

        	SET_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //PREDIV1 SELECTED (HSE undivided reset value)
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 800134a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134e:	6013      	str	r3, [r2, #0]
		#elif RCC_PLL_SRC == RCC_HSI
        	CLR_BIT(RCC_CFGR, RCC_CFGR_PLLSRC);            //HSI/2 SELECTED
		#endif

        /**< Check if multiplied value is within safe frequency limit. */
		if(PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL) != E_NOT_OK )
 8001350:	2100      	movs	r1, #0
 8001352:	4828      	ldr	r0, [pc, #160]	; (80013f4 <MCAL_RCC_InitSysClock+0xe0>)
 8001354:	f7ff ffae 	bl	80012b4 <PLL_MUL_Calculator>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03f      	beq.n	80013de <MCAL_RCC_InitSysClock+0xca>
		{

			RCC_CFGR |= (AHB_PRESCALE<<4);
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001360:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (APB2_PRESCALE<<11);
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (APB1_PRESCALE<<8);
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6013      	str	r3, [r2, #0]

			/**< Set configure PLL MUL value . */
			RCC_CFGR &= ~(0xF << RCC_CFGR_PLLMUL);
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 800137c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001380:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (RCC_PLL_MUL << RCC_CFGR_PLLMUL);
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6013      	str	r3, [r2, #0]


			/**< Enable the PLL . */
			SET_BIT(RCC_CR, RCC_CR_PLLON);
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 8001390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001394:	6013      	str	r3, [r2, #0]
			while (!(RCC_CR & (1 << 25)));
 8001396:	bf00      	nop
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f9      	beq.n	8001398 <MCAL_RCC_InitSysClock+0x84>
			/**< Wait until the PLL clock is stable. */
			while(!GET_BIT(RCC_CR, RCC_CR_PLLRDY));
 80013a4:	bf00      	nop
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MCAL_RCC_InitSysClock+0xd8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <MCAL_RCC_InitSysClock+0x92>
			/**< select PLL as SYSCLK without changing remaining bits. */
			RCC_CFGR &= ~(0b11 << RCC_CFGR_SW);
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 80013b8:	f023 0303 	bic.w	r3, r3, #3
 80013bc:	6013      	str	r3, [r2, #0]
			RCC_CFGR |= (0b10 << RCC_CFGR_SW);
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6013      	str	r3, [r2, #0]

			while (!(RCC_CFGR & (1 << 3)));
 80013ca:	bf00      	nop
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MCAL_RCC_InitSysClock+0xdc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f9      	beq.n	80013cc <MCAL_RCC_InitSysClock+0xb8>


			Local_FunctionStatus = E_OK;
 80013d8:	2301      	movs	r3, #1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	e001      	b.n	80013e2 <MCAL_RCC_InitSysClock+0xce>

		}
		else
		{
			Local_FunctionStatus = E_NOT_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
    #else
        #error "Wrong Choice !!"

    #endif /**< RCC_SYSCLK */

    return Local_FunctionStatus;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021004 	.word	0x40021004
 80013f4:	007a1200 	.word	0x007a1200

080013f8 <MCAL_RCC_EnablePeripheral>:

Std_ReturnType MCAL_RCC_EnablePeripheral(u8 Copy_BusId, u8 Copy_PeripheralId)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

    switch(Copy_BusId)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d020      	beq.n	8001454 <MCAL_RCC_EnablePeripheral+0x5c>
 8001412:	2b02      	cmp	r3, #2
 8001414:	dc2b      	bgt.n	800146e <MCAL_RCC_EnablePeripheral+0x76>
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <MCAL_RCC_EnablePeripheral+0x28>
 800141a:	2b01      	cmp	r3, #1
 800141c:	d00d      	beq.n	800143a <MCAL_RCC_EnablePeripheral+0x42>
 800141e:	e026      	b.n	800146e <MCAL_RCC_EnablePeripheral+0x76>
    {
        /**< Enable the peripheral on the AHB bus. */
        case RCC_AHB:
            SET_BIT(RCC_AHBENR, Copy_PeripheralId);
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MCAL_RCC_EnablePeripheral+0x88>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	79ba      	ldrb	r2, [r7, #6]
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	4611      	mov	r1, r2
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <MCAL_RCC_EnablePeripheral+0x88>)
 8001430:	430b      	orrs	r3, r1
 8001432:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
            break;
 8001438:	e01c      	b.n	8001474 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB1 bus. */
        case RCC_APB1:
            SET_BIT(RCC_APB1ENR, Copy_PeripheralId);
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MCAL_RCC_EnablePeripheral+0x8c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	79ba      	ldrb	r2, [r7, #6]
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	4611      	mov	r1, r2
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <MCAL_RCC_EnablePeripheral+0x8c>)
 800144a:	430b      	orrs	r3, r1
 800144c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
            break;
 8001452:	e00f      	b.n	8001474 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB2 bus. */
        case RCC_APB2:
            SET_BIT(RCC_APB2ENR, Copy_PeripheralId);
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MCAL_RCC_EnablePeripheral+0x90>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4611      	mov	r1, r2
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <MCAL_RCC_EnablePeripheral+0x90>)
 8001464:	430b      	orrs	r3, r1
 8001466:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
            break;
 800146c:	e002      	b.n	8001474 <MCAL_RCC_EnablePeripheral+0x7c>

        default:
            Local_FunctionStatus = E_NOT_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
            break;
 8001472:	bf00      	nop
    }

    return Local_FunctionStatus;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021014 	.word	0x40021014
 8001484:	4002101c 	.word	0x4002101c
 8001488:	40021018 	.word	0x40021018

0800148c <MCAL_RCC_GetSYSCLK>:

    return Local_FunctionStatus;
}

uint32_t MCAL_RCC_GetSYSCLK(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
#if RCC_SYSCLK == RCC_HSE
	return HSE_VAL;
#elif RCC_SYSCLK == RCC_HSI
	return HSI_VAL;
#elif RCC_SYSCLK == RCC_PLL
	return (PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL));
 8001490:	2100      	movs	r1, #0
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MCAL_RCC_GetSYSCLK+0x14>)
 8001494:	f7ff ff0e 	bl	80012b4 <PLL_MUL_Calculator>
 8001498:	4603      	mov	r3, r0
#else
	return E_NOT_OK;
#endif
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	007a1200 	.word	0x007a1200

080014a4 <MCAL_RCC_GetHCLK>:
uint32_t MCAL_RCC_GetHCLK(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYSCLK() >> AHB_PrescaleTable[AHB_PRESCALE]);
 80014a8:	f7ff fff0 	bl	800148c <MCAL_RCC_GetSYSCLK>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2200      	movs	r2, #0
 80014b0:	40d3      	lsrs	r3, r2
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <MCAL_RCC_GetPCLK1>:
uint32_t MCAL_RCC_GetPCLK1(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB1_PRESCALE]);
 80014ba:	f7ff fff3 	bl	80014a4 <MCAL_RCC_GetHCLK>
 80014be:	4603      	mov	r3, r0
 80014c0:	2200      	movs	r2, #0
 80014c2:	40d3      	lsrs	r3, r2
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <MCAL_RCC_GetPCLK2>:
uint32_t MCAL_RCC_GetPCLK2(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB2_PRESCALE]);
 80014cc:	f7ff ffea 	bl	80014a4 <MCAL_RCC_GetHCLK>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2200      	movs	r2, #0
 80014d4:	40d3      	lsrs	r3, r2
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}

080014da <CheckFlag_TXE>:

/////////////////////////////////////////////////////////////////////////////
//                          Private functions                             //
////////////////////////////////////////////////////////////////////////////

static uint8_t CheckFlag_TXE(SPI_TypeDef *SPIx) {
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 1));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3

}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <CheckFlag_RXNE>:

static uint8_t CheckFlag_RXNE(SPI_TypeDef *SPIx) {
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 0));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <CheckFlag_ERR>:
static uint8_t CheckFlag_ERR(SPI_TypeDef *SPIx) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	return (GET_BIT(SPIx->SPI_SR, 4));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <MCAL_SPI_Init>:

/////////////////////////////////////////////////////////////////////////////
//                                A P I                                   //
////////////////////////////////////////////////////////////////////////////

void MCAL_SPI_Init(SPI_TypeDef *SPIx, SPI_Config_t *cfg) {
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	// Temporary registers image for configurations to be mirrored onto without worrying about option precedence
	uint16_t tempregcr1 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
	uint16_t tempregcr2 = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <MCAL_SPI_Init+0xa8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <MCAL_SPI_Init+0x22>
		Global_SPI_CFG[SPI1_CFG] = cfg;
 8001552:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <MCAL_SPI_Init+0xac>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e006      	b.n	8001568 <MCAL_SPI_Init+0x30>
	} else if (SPIx == SPI2) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <MCAL_SPI_Init+0xb0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <MCAL_SPI_Init+0x30>
		Global_SPI_CFG[SPI2_CFG] = cfg;
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <MCAL_SPI_Init+0xac>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6053      	str	r3, [r2, #4]
	}
	tempregcr1 |= (0x1U << 6);
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156e:	81fb      	strh	r3, [r7, #14]

	tempregcr1 |= cfg->Device_Mode;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	4313      	orrs	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Com_Mode;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	885a      	ldrh	r2, [r3, #2]
 800157e:	89fb      	ldrh	r3, [r7, #14]
 8001580:	4313      	orrs	r3, r2
 8001582:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Frame_Format;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	889a      	ldrh	r2, [r3, #4]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	4313      	orrs	r3, r2
 800158c:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Data_Size;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	88da      	ldrh	r2, [r3, #6]
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	4313      	orrs	r3, r2
 8001596:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->CLK_POL;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	891a      	ldrh	r2, [r3, #8]
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	4313      	orrs	r3, r2
 80015a0:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->CLK_PHA;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	895a      	ldrh	r2, [r3, #10]
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->Baud_PS;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	89da      	ldrh	r2, [r3, #14]
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	81fb      	strh	r3, [r7, #14]
	tempregcr1 |= cfg->NSS;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	899a      	ldrh	r2, [r3, #12]
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	4313      	orrs	r3, r2
 80015be:	81fb      	strh	r3, [r7, #14]

	tempregcr2 |= cfg->IRQ_En;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	8a1a      	ldrh	r2, [r3, #16]
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	81bb      	strh	r3, [r7, #12]

	SPIx->SPI_CR1 = tempregcr1;
 80015ca:	89fa      	ldrh	r2, [r7, #14]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempregcr2;
 80015d0:	89ba      	ldrh	r2, [r7, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	605a      	str	r2, [r3, #4]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40013000 	.word	0x40013000
 80015e4:	200000cc 	.word	0x200000cc
 80015e8:	40013800 	.word	0x40013800

080015ec <MCAL_SPI_GPIO_PINS>:

void MCAL_SPI_GPIO_PINS(SPI_TypeDef *SPIx) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t cfg;
	if (SPIx == SPI1) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <MCAL_SPI_GPIO_PINS+0x178>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d154      	bne.n	80016a6 <MCAL_SPI_GPIO_PINS+0xba>
		// PA4 NSS
		// PA5 SCK
		// PA6 MISO
		// PA7 MOSI

		if (Global_SPI_CFG[SPI1_CFG]->Device_Mode == SPI_Device_Mode_Master) {
 80015fc:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d129      	bne.n	800165a <MCAL_SPI_GPIO_PINS+0x6e>

			//NSS TO DOOOOOOO I WILL JUST USE SW NIGGER

			// SCK PA5 AFPP
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001606:	2306      	movs	r3, #6
 8001608:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_5;
 800160a:	2320      	movs	r3, #32
 800160c:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 800160e:	2303      	movs	r3, #3
 8001610:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	4854      	ldr	r0, [pc, #336]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 800161a:	f7ff fd9b 	bl	8001154 <MCAL_GPIO_Init>

			// MISO PA6 AFPP only in bidirectional
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10b      	bne.n	8001640 <MCAL_SPI_GPIO_PINS+0x54>
				cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001628:	2306      	movs	r3, #6
 800162a:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_6;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	81bb      	strh	r3, [r7, #12]
				cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001630:	2303      	movs	r3, #3
 8001632:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &cfg);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	484c      	ldr	r0, [pc, #304]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 800163c:	f7ff fd8a 	bl	8001154 <MCAL_GPIO_Init>
			}

			// MOSI PA7 AFPP
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001640:	2306      	movs	r3, #6
 8001642:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_7;
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001648:	2303      	movs	r3, #3
 800164a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4846      	ldr	r0, [pc, #280]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 8001654:	f7ff fd7e 	bl	8001154 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &cfg);

		}

	}
}
 8001658:	e07f      	b.n	800175a <MCAL_SPI_GPIO_PINS+0x16e>
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800165a:	2301      	movs	r3, #1
 800165c:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_5;
 800165e:	2320      	movs	r3, #32
 8001660:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4840      	ldr	r0, [pc, #256]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 800166a:	f7ff fd73 	bl	8001154 <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	885b      	ldrh	r3, [r3, #2]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <MCAL_SPI_GPIO_PINS+0xa0>
				cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001678:	2301      	movs	r3, #1
 800167a:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_7;
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &cfg);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4839      	ldr	r0, [pc, #228]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 8001688:	f7ff fd64 	bl	8001154 <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800168c:	2306      	movs	r3, #6
 800168e:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_6;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8001694:	2303      	movs	r3, #3
 8001696:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <MCAL_SPI_GPIO_PINS+0x180>)
 80016a0:	f7ff fd58 	bl	8001154 <MCAL_GPIO_Init>
}
 80016a4:	e059      	b.n	800175a <MCAL_SPI_GPIO_PINS+0x16e>
		if (Global_SPI_CFG[SPI2_CFG]->Device_Mode == SPI_Device_Mode_Master) {
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d12c      	bne.n	800170a <MCAL_SPI_GPIO_PINS+0x11e>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80016b0:	2306      	movs	r3, #6
 80016b2:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 80016ba:	2303      	movs	r3, #3
 80016bc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	482a      	ldr	r0, [pc, #168]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 80016c6:	f7ff fd45 	bl	8001154 <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	885b      	ldrh	r3, [r3, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10c      	bne.n	80016ee <MCAL_SPI_GPIO_PINS+0x102>
				cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80016d4:	2306      	movs	r3, #6
 80016d6:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_14;
 80016d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016dc:	81bb      	strh	r3, [r7, #12]
				cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 80016de:	2303      	movs	r3, #3
 80016e0:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &cfg);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4619      	mov	r1, r3
 80016e8:	4821      	ldr	r0, [pc, #132]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 80016ea:	f7ff fd33 	bl	8001154 <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80016ee:	2306      	movs	r3, #6
 80016f0:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_15;
 80016f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f6:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 80016f8:	2303      	movs	r3, #3
 80016fa:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 8001704:	f7ff fd26 	bl	8001154 <MCAL_GPIO_Init>
}
 8001708:	e027      	b.n	800175a <MCAL_SPI_GPIO_PINS+0x16e>
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800170a:	2301      	movs	r3, #1
 800170c:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 800170e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001712:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4815      	ldr	r0, [pc, #84]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 800171c:	f7ff fd1a 	bl	8001154 <MCAL_GPIO_Init>
			if (Global_SPI_CFG[SPI1_CFG]->Com_Mode == SPI_Com_Mode_2L) {
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MCAL_SPI_GPIO_PINS+0x17c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	885b      	ldrh	r3, [r3, #2]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10a      	bne.n	8001740 <MCAL_SPI_GPIO_PINS+0x154>
				cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800172a:	2301      	movs	r3, #1
 800172c:	73bb      	strb	r3, [r7, #14]
				cfg.GPIO_PinNumber = GPIO_PIN_14;
 800172e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001732:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &cfg);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 800173c:	f7ff fd0a 	bl	8001154 <MCAL_GPIO_Init>
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001740:	2306      	movs	r3, #6
 8001742:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_PinNumber = GPIO_PIN_15;
 8001744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001748:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 800174a:	2303      	movs	r3, #3
 800174c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <MCAL_SPI_GPIO_PINS+0x184>)
 8001756:	f7ff fcfd 	bl	8001154 <MCAL_GPIO_Init>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40013000 	.word	0x40013000
 8001768:	200000cc 	.word	0x200000cc
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00

08001774 <MCAL_SPI_TX>:

// this only really works in full duplux 2 line uindirectional , or 1 line unidirectional, bidirectional requires more logic (i think ?)

void MCAL_SPI_TX(SPI_TypeDef *SPIx, uint8_t *Pdata, uint16_t size) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
	uint16_t tempctr = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	82fb      	strh	r3, [r7, #22]
	uint8_t *tempPdata = Pdata;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	613b      	str	r3, [r7, #16]

	while (!CheckFlag_TXE(SPIx))
 800178a:	bf00      	nop
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fea4 	bl	80014da <CheckFlag_TXE>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f9      	beq.n	800178c <MCAL_SPI_TX+0x18>
		;

	SPIx->SPI_DR = *tempPdata;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	60da      	str	r2, [r3, #12]
	tempPdata += sizeof(uint8_t);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
	tempctr++;
 80017a8:	8afb      	ldrh	r3, [r7, #22]
 80017aa:	3301      	adds	r3, #1
 80017ac:	82fb      	strh	r3, [r7, #22]

	while (tempctr <= size) {
 80017ae:	e010      	b.n	80017d2 <MCAL_SPI_TX+0x5e>
		if (CheckFlag_TXE(SPIx)) {
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fe92 	bl	80014da <CheckFlag_TXE>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <MCAL_SPI_TX+0x5e>
			SPIx->SPI_DR = *tempPdata;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	60da      	str	r2, [r3, #12]
			tempPdata += sizeof(uint8_t);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3301      	adds	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
			tempctr++;
 80017cc:	8afb      	ldrh	r3, [r7, #22]
 80017ce:	3301      	adds	r3, #1
 80017d0:	82fb      	strh	r3, [r7, #22]
	while (tempctr <= size) {
 80017d2:	8afa      	ldrh	r2, [r7, #22]
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d9ea      	bls.n	80017b0 <MCAL_SPI_TX+0x3c>

	// TO DO WAIT FOR END OF TRANSMITTION --> BUSY FLAG "MAYBE UNNECESSARY"

	//while(CheckFlag_BSY);

}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SPI1_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
//                                I R Q                                   //
////////////////////////////////////////////////////////////////////////////

void SPI1_IRQHandler(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC src;

	src.TXE = CheckFlag_TXE(SPI1);
 80017ea:	4815      	ldr	r0, [pc, #84]	; (8001840 <SPI1_IRQHandler+0x5c>)
 80017ec:	f7ff fe75 	bl	80014da <CheckFlag_TXE>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	793b      	ldrb	r3, [r7, #4]
 80017fa:	f362 0300 	bfi	r3, r2, #0, #1
 80017fe:	713b      	strb	r3, [r7, #4]
	src.RXNE = CheckFlag_RXNE(SPI1);
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <SPI1_IRQHandler+0x5c>)
 8001802:	f7ff fe7a 	bl	80014fa <CheckFlag_RXNE>
 8001806:	4603      	mov	r3, r0
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	f362 0341 	bfi	r3, r2, #1, #1
 8001814:	713b      	strb	r3, [r7, #4]
	src.ERRI = CheckFlag_ERR(SPI1);
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <SPI1_IRQHandler+0x5c>)
 8001818:	f7ff fe7e 	bl	8001518 <CheckFlag_ERR>
 800181c:	4603      	mov	r3, r0
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	793b      	ldrb	r3, [r7, #4]
 8001826:	f362 0382 	bfi	r3, r2, #2, #1
 800182a:	713b      	strb	r3, [r7, #4]

	Global_SPI_CFG[SPI1_CFG]->P_IRq_CallBack(src);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SPI1_IRQHandler+0x60>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	7938      	ldrb	r0, [r7, #4]
 8001834:	4798      	blx	r3
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40013000 	.word	0x40013000
 8001844:	200000cc 	.word	0x200000cc

08001848 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC src;

	src.TXE = CheckFlag_TXE(SPI2);
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <SPI2_IRQHandler+0x5c>)
 8001850:	f7ff fe43 	bl	80014da <CheckFlag_TXE>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	793b      	ldrb	r3, [r7, #4]
 800185e:	f362 0300 	bfi	r3, r2, #0, #1
 8001862:	713b      	strb	r3, [r7, #4]
	src.RXNE = CheckFlag_RXNE(SPI2);
 8001864:	480f      	ldr	r0, [pc, #60]	; (80018a4 <SPI2_IRQHandler+0x5c>)
 8001866:	f7ff fe48 	bl	80014fa <CheckFlag_RXNE>
 800186a:	4603      	mov	r3, r0
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	793b      	ldrb	r3, [r7, #4]
 8001874:	f362 0341 	bfi	r3, r2, #1, #1
 8001878:	713b      	strb	r3, [r7, #4]
	src.ERRI = CheckFlag_ERR(SPI2);
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <SPI2_IRQHandler+0x5c>)
 800187c:	f7ff fe4c 	bl	8001518 <CheckFlag_ERR>
 8001880:	4603      	mov	r3, r0
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	793b      	ldrb	r3, [r7, #4]
 800188a:	f362 0382 	bfi	r3, r2, #2, #1
 800188e:	713b      	strb	r3, [r7, #4]

	Global_SPI_CFG[SPI2_CFG]->P_IRq_CallBack(src);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SPI2_IRQHandler+0x60>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	7938      	ldrb	r0, [r7, #4]
 8001898:	4798      	blx	r3
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	200000cc 	.word	0x200000cc

080018ac <STK_SetDelay_ms>:

    return Local_FunctionStatus;
}
  
Std_ReturnType STK_SetDelay_ms(f32 Copy_Milliseconds)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    /**< Calculate the number of ticks required to wait for the specified number of milliseconds */
    u32 Local_u32Ticks = (u32)((Copy_Milliseconds * STK_AHB_CLK) / 1000.0);
 80018b4:	f7ff fdf6 	bl	80014a4 <MCAL_RCC_GetHCLK>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f8fc 	bl	8000ab8 <__aeabi_ui2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f94f 	bl	8000b68 <__aeabi_fmul>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f9fd 	bl	8000cd0 <__aeabi_fdiv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fdad 	bl	8000438 <__aeabi_f2d>
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <STK_SetDelay_ms+0x9c>)
 80018e4:	f7fe ff2a 	bl	800073c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f80c 	bl	800090c <__aeabi_d2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]

    /**< Check if TicksRequired is within the valid range */
    if (Local_u32Ticks <= 0x00FFFFFF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fe:	d21d      	bcs.n	800193c <STK_SetDelay_ms+0x90>
    {
    	/**< Clear the current value */
    	STK->VAL = 0;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <STK_SetDelay_ms+0xa0>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
        /**< Configure SysTick timer with the calculated number of ticks */
        STK->LOAD = Local_u32Ticks;
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <STK_SetDelay_ms+0xa0>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6053      	str	r3, [r2, #4]

        /**< Enable SysTick timer */
        STK->CTRL |= STK_CTRL_ENABLE_MASK;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <STK_SetDelay_ms+0xa0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <STK_SetDelay_ms+0xa0>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

        /**< Wait until the SysTick timer reaches zero */
        while (!(STK->CTRL & STK_CTRL_COUNTFLAG_MASK));
 8001918:	bf00      	nop
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <STK_SetDelay_ms+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f9      	beq.n	800191a <STK_SetDelay_ms+0x6e>

        /**< Disable SysTick timer */
        STK->CTRL &= ~STK_CTRL_ENABLE_MASK;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <STK_SetDelay_ms+0xa0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <STK_SetDelay_ms+0xa0>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6013      	str	r3, [r2, #0]

        /**< Reset the timer value */
        STK->VAL = 0;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <STK_SetDelay_ms+0xa0>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]

        /**< Return success status */
        return E_OK;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <STK_SetDelay_ms+0x92>
    }
    else
    { 
        /**< Return error status */
        return E_NOT_OK;
 800193c:	2300      	movs	r3, #0
    }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	408f4000 	.word	0x408f4000
 800194c:	e000e010 	.word	0xe000e010

08001950 <TIM2_IRQHandler>:
#include "NVIC_Interface.h"
#include "stm32f103x8.h"

static volatile uint32_t elapsed_ms = 0;

void TIM2_IRQHandler(void) {
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
    elapsed_ms += 1000;  // Since this ISR is called every second
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <TIM2_IRQHandler+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <TIM2_IRQHandler+0x28>)
 800195e:	6013      	str	r3, [r2, #0]
    TIMER2->SR &= ~1;       // Clear interrupt
 8001960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6113      	str	r3, [r2, #16]

}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	200000d4 	.word	0x200000d4

0800197c <GetIndex>:


/*************<Private Helper Functions***********/

static uint8_t GetIndex(USART_TypeDef *USARTx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <GetIndex+0x2c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <GetIndex+0x14>
		return 0;
 800198c:	2300      	movs	r3, #0
 800198e:	e006      	b.n	800199e <GetIndex+0x22>
	}
	else if(USARTx == USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <GetIndex+0x30>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <GetIndex+0x20>
	{
		return 1;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <GetIndex+0x22>
	}
	else
	{
		return 2;
 800199c:	2302      	movs	r3, #2
	}
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40004400 	.word	0x40004400

080019b0 <MCAL_USART_Init>:

/*************<Implementation***********/

void MCAL_USART_Init(USART_TypeDef *USARTx, USART_Config_t *config) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	u32 pclk, BRR;

	uint8_t LocalIndex = GetIndex(USARTx);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffde 	bl	800197c <GetIndex>
 80019c0:	4603      	mov	r3, r0
 80019c2:	74fb      	strb	r3, [r7, #19]
	Global_USART_Config[LocalIndex] = config;
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <MCAL_USART_Init+0xf4>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//EN USART
	USARTx->CR1 |= 1 << 13;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60da      	str	r2, [r3, #12]
	//Enable TX or RX or both
	USARTx->CR1 |= config->USART_Mode;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
	//Configure Parity width
	USARTx->CR1 |= config->PayLoadLength;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60da      	str	r2, [r3, #12]
	//configure Parity bit
	USARTx->CR1 |= config->Parity;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	60da      	str	r2, [r3, #12]
	//configure Stop bits
	USARTx->CR2 |= config->StopBits;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
	//configure Flow Control
	USARTx->CR3 |= config->FlowCTRL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	615a      	str	r2, [r3, #20]
	//configure Baud Rate
	//call RCC get clk to know the clock for which you will calculate the baud rate
	if (USARTx == USART1) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <MCAL_USART_Init+0xf8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d103      	bne.n	8001a30 <MCAL_USART_Init+0x80>
		pclk = MCAL_RCC_GetPCLK2();
 8001a28:	f7ff fd4e 	bl	80014c8 <MCAL_RCC_GetPCLK2>
 8001a2c:	6178      	str	r0, [r7, #20]
 8001a2e:	e002      	b.n	8001a36 <MCAL_USART_Init+0x86>
	} else {
		pclk = MCAL_RCC_GetPCLK1();
 8001a30:	f7ff fd41 	bl	80014b6 <MCAL_RCC_GetPCLK1>
 8001a34:	6178      	str	r0, [r7, #20]
	}
	BRR = UART_BRR_VALUE(pclk, config->BaudRate);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	0119      	lsls	r1, r3, #4
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009a      	lsls	r2, r3, #2
 8001a4e:	441a      	add	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	fb00 f303 	mul.w	r3, r0, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <MCAL_USART_Init+0xfc>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	60fb      	str	r3, [r7, #12]
	USARTx->BRR = BRR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	609a      	str	r2, [r3, #8]

	//Enable or Disable interrupt
	if (config->IRQ_Enable != USART_IRQ_ENABLE_NONE) {
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <MCAL_USART_Init+0xec>
		USARTx->CR1 |= (config->IRQ_Enable);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
	}

	//NVIC is handled separately as well as RCC initialization
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200000d8 	.word	0x200000d8
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	51eb851f 	.word	0x51eb851f

08001ab0 <MCAL_USART_Send_Data>:
		MCAL_NVIC_DisableIRQ(NVIC_USART3_IRQn);
	}
}

void MCAL_USART_Send_Data(USART_TypeDef *USARTx, uint16_t *pTxBuffer,
		enum Polling_Mechanism PollingEN, uint8_t size) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_cnt = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
	uint8_t LocalIndex = GetIndex(USARTx);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff ff56 	bl	800197c <GetIndex>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75bb      	strb	r3, [r7, #22]
	while (temp_cnt <= size) {
 8001ad4:	e029      	b.n	8001b2a <MCAL_USART_Send_Data+0x7a>
		if (PollingEN == enable) {
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <MCAL_USART_Send_Data+0x3a>
			while (!(USARTx->SR & 1 << 7))
 8001adc:	bf00      	nop
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f9      	beq.n	8001ade <MCAL_USART_Send_Data+0x2e>
				;
		}
		if (Global_USART_Config[LocalIndex]->PayLoadLength == USART_DATA_9bits) {
 8001aea:	7dbb      	ldrb	r3, [r7, #22]
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <MCAL_USART_Send_Data+0x8c>)
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d10c      	bne.n	8001b14 <MCAL_USART_Send_Data+0x64>
			USARTx->DR = (*pTxBuffer & (u16) 0x1FF);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
			pTxBuffer += 1;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
			temp_cnt++;
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
 8001b12:	e00a      	b.n	8001b2a <MCAL_USART_Send_Data+0x7a>
		} else {
			USARTx->DR = (*pTxBuffer & (u8) 0xFF);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
			pTxBuffer += 1;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3302      	adds	r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
			temp_cnt++;
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	3301      	adds	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
	while (temp_cnt <= size) {
 8001b2a:	7dfa      	ldrb	r2, [r7, #23]
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d9d1      	bls.n	8001ad6 <MCAL_USART_Send_Data+0x26>
		}
	}

}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200000d8 	.word	0x200000d8

08001b40 <MCAL_USART_GPIO_SetPins>:
			*((u16*) pRxBuffer) = (USARTx->DR & (u8) 0x7F);
		}
	}
}

void MCAL_USART_GPIO_SetPins(USART_TypeDef *USARTx) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t cfg;
	if (USARTx == USART1) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a73      	ldr	r2, [pc, #460]	; (8001d18 <MCAL_USART_GPIO_SetPins+0x1d8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d149      	bne.n	8001be4 <MCAL_USART_GPIO_SetPins+0xa4>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		cfg.GPIO_PinNumber = GPIO_PIN_9;
 8001b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b54:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001b56:	2306      	movs	r3, #6
 8001b58:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	486d      	ldr	r0, [pc, #436]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001b66:	f7ff faf5 	bl	8001154 <MCAL_GPIO_Init>

		//PA10 RX
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6e:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4868      	ldr	r0, [pc, #416]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001b7c:	f7ff faea 	bl	8001154 <MCAL_GPIO_Init>

		//PA11 CTS
		if (Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_CTS
 8001b80:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8a:	d005      	beq.n	8001b98 <MCAL_USART_GPIO_SetPins+0x58>
				|| Global_USART_Config[0]->FlowCTRL
 8001b8c:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b96:	d10a      	bne.n	8001bae <MCAL_USART_GPIO_SetPins+0x6e>
						== USART_FLOW_CTRL_CTS_RTS) {
			cfg.GPIO_PinNumber = GPIO_PIN_11;
 8001b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b9c:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	485c      	ldr	r0, [pc, #368]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001baa:	f7ff fad3 	bl	8001154 <MCAL_GPIO_Init>
		}

		//PA12 RTS
		if (Global_USART_Config[0]->FlowCTRL == USART_FLOW_CTRL_RTS
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb8:	d006      	beq.n	8001bc8 <MCAL_USART_GPIO_SetPins+0x88>
				|| Global_USART_Config[0]->FlowCTRL
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bc4:	f040 80a3 	bne.w	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
						== USART_FLOW_CTRL_CTS_RTS) {
			cfg.GPIO_PinNumber = GPIO_PIN_12;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001bce:	2306      	movs	r3, #6
 8001bd0:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	484f      	ldr	r0, [pc, #316]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001bde:	f7ff fab9 	bl	8001154 <MCAL_GPIO_Init>
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &cfg);

		}
	}
}
 8001be2:	e094      	b.n	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
	} else if (USARTx == USART2) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <MCAL_USART_GPIO_SetPins+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d144      	bne.n	8001c76 <MCAL_USART_GPIO_SetPins+0x136>
		cfg.GPIO_PinNumber = GPIO_PIN_2;
 8001bec:	2304      	movs	r3, #4
 8001bee:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4847      	ldr	r0, [pc, #284]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001c00:	f7ff faa8 	bl	8001154 <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_3;
 8001c04:	2308      	movs	r3, #8
 8001c06:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4619      	mov	r1, r3
 8001c12:	4842      	ldr	r0, [pc, #264]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001c14:	f7ff fa9e 	bl	8001154 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_CTS
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c22:	d005      	beq.n	8001c30 <MCAL_USART_GPIO_SetPins+0xf0>
				|| Global_USART_Config[1]->FlowCTRL
 8001c24:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c2e:	d109      	bne.n	8001c44 <MCAL_USART_GPIO_SetPins+0x104>
			cfg.GPIO_PinNumber = GPIO_PIN_0;
 8001c30:	2301      	movs	r3, #1
 8001c32:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4837      	ldr	r0, [pc, #220]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001c40:	f7ff fa88 	bl	8001154 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->FlowCTRL == USART_FLOW_CTRL_RTS
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4e:	d005      	beq.n	8001c5c <MCAL_USART_GPIO_SetPins+0x11c>
				|| Global_USART_Config[1]->FlowCTRL
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c5a:	d158      	bne.n	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
			cfg.GPIO_PinNumber = GPIO_PIN_1;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001c60:	2306      	movs	r3, #6
 8001c62:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &cfg);
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	482b      	ldr	r0, [pc, #172]	; (8001d1c <MCAL_USART_GPIO_SetPins+0x1dc>)
 8001c70:	f7ff fa70 	bl	8001154 <MCAL_GPIO_Init>
}
 8001c74:	e04b      	b.n	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
	} else if (USARTx == USART3) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <MCAL_USART_GPIO_SetPins+0x1e8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d147      	bne.n	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001c84:	2306      	movs	r3, #6
 8001c86:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &cfg);
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	4826      	ldr	r0, [pc, #152]	; (8001d2c <MCAL_USART_GPIO_SetPins+0x1ec>)
 8001c94:	f7ff fa5e 	bl	8001154 <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_11;
 8001c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c9c:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &cfg);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4820      	ldr	r0, [pc, #128]	; (8001d2c <MCAL_USART_GPIO_SetPins+0x1ec>)
 8001caa:	f7ff fa53 	bl	8001154 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_CTS
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb8:	d005      	beq.n	8001cc6 <MCAL_USART_GPIO_SetPins+0x186>
				|| Global_USART_Config[2]->FlowCTRL
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cc4:	d10a      	bne.n	8001cdc <MCAL_USART_GPIO_SetPins+0x19c>
			cfg.GPIO_PinNumber = GPIO_PIN_13;
 8001cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cca:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <MCAL_USART_GPIO_SetPins+0x1ec>)
 8001cd8:	f7ff fa3c 	bl	8001154 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->FlowCTRL == USART_FLOW_CTRL_RTS
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce6:	d005      	beq.n	8001cf4 <MCAL_USART_GPIO_SetPins+0x1b4>
				|| Global_USART_Config[2]->FlowCTRL
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <MCAL_USART_GPIO_SetPins+0x1e0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cf2:	d10c      	bne.n	8001d0e <MCAL_USART_GPIO_SetPins+0x1ce>
			cfg.GPIO_PinNumber = GPIO_PIN_14;
 8001cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf8:	81bb      	strh	r3, [r7, #12]
			cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	73bb      	strb	r3, [r7, #14]
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &cfg);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MCAL_USART_GPIO_SetPins+0x1ec>)
 8001d0a:	f7ff fa23 	bl	8001154 <MCAL_GPIO_Init>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	200000d8 	.word	0x200000d8
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <USART1_IRQHandler+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4798      	blx	r3
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200000d8 	.word	0x200000d8

08001d44 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <USART2_IRQHandler+0x10>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4798      	blx	r3
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000d8 	.word	0x200000d8

08001d58 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <USART3_IRQHandler+0x10>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4798      	blx	r3
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200000d8 	.word	0x200000d8

08001d6c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8001d72:	2018      	movs	r0, #24
 8001d74:	f001 f90c 	bl	8002f90 <pvPortMalloc>
 8001d78:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f938 	bl	8002000 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8001d90:	687b      	ldr	r3, [r7, #4]
    }
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
    #endif

    vTaskSuspendAll();
 8001db6:	f000 fb5b 	bl	8002470 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	69f8      	ldr	r0, [r7, #28]
 8001dc6:	f000 f8fa 	bl	8001fbe <prvTestWaitCondition>
 8001dca:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00e      	beq.n	8001df0 <xEventGroupWaitBits+0x54>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d028      	beq.n	8001e32 <xEventGroupWaitBits+0x96>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e020      	b.n	8001e32 <xEventGroupWaitBits+0x96>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <xEventGroupWaitBits+0x64>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	e018      	b.n	8001e32 <xEventGroupWaitBits+0x96>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <xEventGroupWaitBits+0x72>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <xEventGroupWaitBits+0x80>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	1d18      	adds	r0, r3, #4
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	4313      	orrs	r3, r2
 8001e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f000 fd67 	bl	80028fc <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8001e32:	f000 fb2b 	bl	800248c <xTaskResumeAll>
 8001e36:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 8001e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d031      	beq.n	8001ea2 <xEventGroupWaitBits+0x106>
    {
        if( xAlreadyYielded == pdFALSE )
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <xEventGroupWaitBits+0xb8>
        {
            portYIELD_WITHIN_API();
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <xEventGroupWaitBits+0x110>)
 8001e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8001e54:	f000 feda 	bl	8002c0c <uxTaskResetEventItemValue>
 8001e58:	62f8      	str	r0, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11a      	bne.n	8001e9a <xEventGroupWaitBits+0xfe>
        {
            taskENTER_CRITICAL();
 8001e64:	f000 fffa 	bl	8002e5c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e74:	f000 f8a3 	bl	8001fbe <prvTestWaitCondition>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <xEventGroupWaitBits+0xf6>
                {
                    if( xClearOnExit != pdFALSE )
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <xEventGroupWaitBits+0xf6>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 8001e96:	f000 fffb 	bl	8002e90 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3730      	adds	r7, #48	; 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    taskENTER_CRITICAL();
 8001ebe:	f000 ffcd 	bl	8002e5c <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8001ed6:	f000 ffdb 	bl	8002e90 <vPortExitCritical>

    return uxReturn;
 8001eda:	68bb      	ldr	r3, [r7, #8]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	3304      	adds	r3, #4
 8001efe:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3308      	adds	r3, #8
 8001f04:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8001f06:	f000 fab3 	bl	8002470 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8001f1c:	e03c      	b.n	8001f98 <xEventGroupSetBits+0xb4>
        {
            pxNext = listGET_NEXT( pxListItem );
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f34:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f3c:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <xEventGroupSetBits+0x76>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <xEventGroupSetBits+0x88>
                {
                    xMatchFound = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e008      	b.n	8001f6c <xEventGroupSetBits+0x88>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d101      	bne.n	8001f6c <xEventGroupSetBits+0x88>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <xEventGroupSetBits+0xb0>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <xEventGroupSetBits+0xa0>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8001f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f90:	f000 fcec 	bl	800296c <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 8001f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1be      	bne.n	8001f1e <xEventGroupSetBits+0x3a>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	401a      	ands	r2, r3
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8001fae:	f000 fa6d 	bl	800248c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	681b      	ldr	r3, [r3, #0]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e007      	b.n	8001ff4 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d101      	bne.n	8001ff4 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8001ff4:	697b      	ldr	r3, [r7, #20]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0208 	add.w	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f103 0208 	add.w	r2, r3, #8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d103      	bne.n	8002076 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e00c      	b.n	8002090 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3308      	adds	r3, #8
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e002      	b.n	8002084 <vListInsert+0x2e>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d2f6      	bcs.n	800207e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6892      	ldr	r2, [r2, #8]
 80020dc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6852      	ldr	r2, [r2, #4]
 80020e6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af04      	add	r7, sp, #16
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 ff2f 	bl	8002f90 <pvPortMalloc>
 8002132:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00e      	beq.n	8002158 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800213a:	204c      	movs	r0, #76	; 0x4c
 800213c:	f000 ff28 	bl	8002f90 <pvPortMalloc>
 8002140:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
 800214e:	e005      	b.n	800215c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002150:	6978      	ldr	r0, [r7, #20]
 8002152:	f000 ffcb 	bl	80030ec <vPortFree>
 8002156:	e001      	b.n	800215c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d013      	beq.n	800218a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	2300      	movs	r3, #0
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f80e 	bl	800219a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800217e:	69f8      	ldr	r0, [r7, #28]
 8002180:	f000 f884 	bl	800228c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002184:	2301      	movs	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e002      	b.n	8002190 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002190:	69bb      	ldr	r3, [r7, #24]
    }
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b2:	3b01      	subs	r3, #1
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f023 0307 	bic.w	r3, r3, #7
 80021c0:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01f      	beq.n	8002208 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e012      	b.n	80021f4 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4413      	add	r3, r2
 80021d4:	7819      	ldrb	r1, [r3, #0]
 80021d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4413      	add	r3, r2
 80021dc:	3334      	adds	r3, #52	; 0x34
 80021de:	460a      	mov	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	d9e9      	bls.n	80021ce <prvInitialiseNewTask+0x34>
 80021fa:	e000      	b.n	80021fe <prvInitialiseNewTask+0x64>
            {
                break;
 80021fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002206:	e003      	b.n	8002210 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d901      	bls.n	800221a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002216:	2304      	movs	r3, #4
 8002218:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	3304      	adds	r3, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff0a 	bl	800203e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	3318      	adds	r3, #24
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff05 	bl	800203e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002238:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f1c3 0205 	rsb	r2, r3, #5
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	3344      	adds	r3, #68	; 0x44
 800224e:	2204      	movs	r2, #4
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fc18 	bl	8004a88 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	2201      	movs	r2, #1
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fc11 	bl	8004a88 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	6938      	ldr	r0, [r7, #16]
 800226c:	f000 fd66 	bl	8002d3c <pxPortInitialiseStack>
 8002270:	4602      	mov	r2, r0
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002280:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002294:	f000 fde2 	bl	8002e5c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002298:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <prvAddNewTaskToReadyList+0x108>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <prvAddNewTaskToReadyList+0x108>)
 80022a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <prvAddNewTaskToReadyList+0x10c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <prvAddNewTaskToReadyList+0x10c>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <prvAddNewTaskToReadyList+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d110      	bne.n	80022da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022b8:	f000 fc10 	bl	8002adc <prvInitialiseTaskLists>
 80022bc:	e00d      	b.n	80022da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <prvAddNewTaskToReadyList+0x110>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <prvAddNewTaskToReadyList+0x10c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d802      	bhi.n	80022da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <prvAddNewTaskToReadyList+0x10c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <prvAddNewTaskToReadyList+0x114>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <prvAddNewTaskToReadyList+0x114>)
 80022e2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <prvAddNewTaskToReadyList+0x118>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <prvAddNewTaskToReadyList+0x118>)
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	492b      	ldr	r1, [pc, #172]	; (80023a8 <prvAddNewTaskToReadyList+0x11c>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3304      	adds	r3, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	3204      	adds	r2, #4
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <prvAddNewTaskToReadyList+0x11c>)
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	615a      	str	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	4918      	ldr	r1, [pc, #96]	; (80023a8 <prvAddNewTaskToReadyList+0x11c>)
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c59      	adds	r1, r3, #1
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <prvAddNewTaskToReadyList+0x11c>)
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4403      	add	r3, r0
 8002360:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002362:	f000 fd95 	bl	8002e90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <prvAddNewTaskToReadyList+0x110>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00e      	beq.n	800238c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <prvAddNewTaskToReadyList+0x10c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <prvAddNewTaskToReadyList+0x120>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200001bc 	.word	0x200001bc
 8002398:	200000e4 	.word	0x200000e4
 800239c:	200001c8 	.word	0x200001c8
 80023a0:	200001d8 	.word	0x200001d8
 80023a4:	200001c4 	.word	0x200001c4
 80023a8:	200000e8 	.word	0x200000e8
 80023ac:	e000ed04 	.word	0xe000ed04

080023b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80023c2:	f000 f855 	bl	8002470 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023c6:	2100      	movs	r1, #0
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fc37 	bl	8002c3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80023ce:	f000 f85d 	bl	800248c <xTaskResumeAll>
 80023d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <vTaskDelay+0x44>)
 80023dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000ed04 	.word	0xe000ed04

080023f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <vTaskStartScheduler+0x5c>)
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	4912      	ldr	r1, [pc, #72]	; (8002458 <vTaskStartScheduler+0x60>)
 800240e:	4813      	ldr	r0, [pc, #76]	; (800245c <vTaskStartScheduler+0x64>)
 8002410:	f7ff fe82 	bl	8002118 <xTaskCreate>
 8002414:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d115      	bne.n	8002448 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800241c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800242e:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <vTaskStartScheduler+0x68>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <vTaskStartScheduler+0x6c>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <vTaskStartScheduler+0x70>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002444:	f000 fcea 	bl	8002e1c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <vTaskStartScheduler+0x74>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200001e0 	.word	0x200001e0
 8002458:	0800526c 	.word	0x0800526c
 800245c:	08002aad 	.word	0x08002aad
 8002460:	200001dc 	.word	0x200001dc
 8002464:	200001c8 	.word	0x200001c8
 8002468:	200001c0 	.word	0x200001c0
 800246c:	20000000 	.word	0x20000000

08002470 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <vTaskSuspendAll+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a03      	ldr	r2, [pc, #12]	; (8002488 <vTaskSuspendAll+0x18>)
 800247c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200001e4 	.word	0x200001e4

0800248c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800249a:	f000 fcdf 	bl	8002e5c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800249e:	4b68      	ldr	r3, [pc, #416]	; (8002640 <xTaskResumeAll+0x1b4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	4a66      	ldr	r2, [pc, #408]	; (8002640 <xTaskResumeAll+0x1b4>)
 80024a6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024a8:	4b65      	ldr	r3, [pc, #404]	; (8002640 <xTaskResumeAll+0x1b4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80c0 	bne.w	8002632 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024b2:	4b64      	ldr	r3, [pc, #400]	; (8002644 <xTaskResumeAll+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80bb 	beq.w	8002632 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024bc:	e08a      	b.n	80025d4 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024be:	4b62      	ldr	r3, [pc, #392]	; (8002648 <xTaskResumeAll+0x1bc>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6a12      	ldr	r2, [r2, #32]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	69d2      	ldr	r2, [r2, #28]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3318      	adds	r3, #24
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d103      	bne.n	80024f4 <xTaskResumeAll+0x68>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6892      	ldr	r2, [r2, #8]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3304      	adds	r3, #4
 8002526:	429a      	cmp	r2, r3
 8002528:	d103      	bne.n	8002532 <xTaskResumeAll+0xa6>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1e5a      	subs	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <xTaskResumeAll+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	4a3e      	ldr	r2, [pc, #248]	; (800264c <xTaskResumeAll+0x1c0>)
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	493d      	ldr	r1, [pc, #244]	; (8002650 <xTaskResumeAll+0x1c4>)
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3304      	adds	r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	3204      	adds	r2, #4
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1d1a      	adds	r2, r3, #4
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <xTaskResumeAll+0x1c4>)
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	615a      	str	r2, [r3, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a2:	492b      	ldr	r1, [pc, #172]	; (8002650 <xTaskResumeAll+0x1c4>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c59      	adds	r1, r3, #1
 80025b2:	4827      	ldr	r0, [pc, #156]	; (8002650 <xTaskResumeAll+0x1c4>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4403      	add	r3, r0
 80025be:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <xTaskResumeAll+0x1c8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <xTaskResumeAll+0x1cc>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <xTaskResumeAll+0x1bc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f af70 	bne.w	80024be <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025e4:	f000 faf8 	bl	8002bd8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <xTaskResumeAll+0x1d0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025f4:	f000 f836 	bl	8002664 <xTaskIncrementTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <xTaskResumeAll+0x1cc>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f1      	bne.n	80025f4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <xTaskResumeAll+0x1d0>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <xTaskResumeAll+0x1cc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800261e:	2301      	movs	r3, #1
 8002620:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <xTaskResumeAll+0x1d4>)
 8002624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002632:	f000 fc2d 	bl	8002e90 <vPortExitCritical>

    return xAlreadyYielded;
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200001e4 	.word	0x200001e4
 8002644:	200001bc 	.word	0x200001bc
 8002648:	2000017c 	.word	0x2000017c
 800264c:	200001c4 	.word	0x200001c4
 8002650:	200000e8 	.word	0x200000e8
 8002654:	200000e4 	.word	0x200000e4
 8002658:	200001d0 	.word	0x200001d0
 800265c:	200001cc 	.word	0x200001cc
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266e:	4b75      	ldr	r3, [pc, #468]	; (8002844 <xTaskIncrementTick+0x1e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 80dc 	bne.w	8002830 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <xTaskIncrementTick+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002680:	4a71      	ldr	r2, [pc, #452]	; (8002848 <xTaskIncrementTick+0x1e4>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d110      	bne.n	80026ae <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800268c:	4b6f      	ldr	r3, [pc, #444]	; (800284c <xTaskIncrementTick+0x1e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <xTaskIncrementTick+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6d      	ldr	r2, [pc, #436]	; (800284c <xTaskIncrementTick+0x1e8>)
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	; (8002850 <xTaskIncrementTick+0x1ec>)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <xTaskIncrementTick+0x1f0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <xTaskIncrementTick+0x1f0>)
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	f000 fa95 	bl	8002bd8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <xTaskIncrementTick+0x1f4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f0c0 80a6 	bcc.w	8002806 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <xTaskIncrementTick+0x1e8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c4:	4b64      	ldr	r3, [pc, #400]	; (8002858 <xTaskIncrementTick+0x1f4>)
 80026c6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ca:	601a      	str	r2, [r3, #0]
                    break;
 80026cc:	e09b      	b.n	8002806 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ce:	4b5f      	ldr	r3, [pc, #380]	; (800284c <xTaskIncrementTick+0x1e8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d203      	bcs.n	80026ee <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026e6:	4a5c      	ldr	r2, [pc, #368]	; (8002858 <xTaskIncrementTick+0x1f4>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80026ec:	e08b      	b.n	8002806 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68d2      	ldr	r2, [r2, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	3304      	adds	r3, #4
 8002710:	429a      	cmp	r2, r3
 8002712:	d103      	bne.n	800271c <xTaskIncrementTick+0xb8>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01e      	beq.n	8002772 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	6a12      	ldr	r2, [r2, #32]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	69d2      	ldr	r2, [r2, #28]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3318      	adds	r3, #24
 8002756:	429a      	cmp	r2, r3
 8002758:	d103      	bne.n	8002762 <xTaskIncrementTick+0xfe>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2200      	movs	r2, #0
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <xTaskIncrementTick+0x1f8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	4a36      	ldr	r2, [pc, #216]	; (800285c <xTaskIncrementTick+0x1f8>)
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4935      	ldr	r1, [pc, #212]	; (8002860 <xTaskIncrementTick+0x1fc>)
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3304      	adds	r3, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	3204      	adds	r2, #4
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1d1a      	adds	r2, r3, #4
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <xTaskIncrementTick+0x1fc>)
 80027c8:	441a      	add	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	4923      	ldr	r1, [pc, #140]	; (8002860 <xTaskIncrementTick+0x1fc>)
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	481f      	ldr	r0, [pc, #124]	; (8002860 <xTaskIncrementTick+0x1fc>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <xTaskIncrementTick+0x200>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	429a      	cmp	r2, r3
 80027fc:	f4ff af5d 	bcc.w	80026ba <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002804:	e759      	b.n	80026ba <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <xTaskIncrementTick+0x200>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4914      	ldr	r1, [pc, #80]	; (8002860 <xTaskIncrementTick+0x1fc>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d901      	bls.n	8002822 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800281e:	2301      	movs	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <xTaskIncrementTick+0x204>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e004      	b.n	800283a <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <xTaskIncrementTick+0x208>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a0d      	ldr	r2, [pc, #52]	; (800286c <xTaskIncrementTick+0x208>)
 8002838:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800283a:	69fb      	ldr	r3, [r7, #28]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200001e4 	.word	0x200001e4
 8002848:	200001c0 	.word	0x200001c0
 800284c:	20000174 	.word	0x20000174
 8002850:	20000178 	.word	0x20000178
 8002854:	200001d4 	.word	0x200001d4
 8002858:	200001dc 	.word	0x200001dc
 800285c:	200001c4 	.word	0x200001c4
 8002860:	200000e8 	.word	0x200000e8
 8002864:	200000e4 	.word	0x200000e4
 8002868:	200001d0 	.word	0x200001d0
 800286c:	200001cc 	.word	0x200001cc

08002870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <vTaskSwitchContext+0x78>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <vTaskSwitchContext+0x7c>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002884:	e02a      	b.n	80028dc <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <vTaskSwitchContext+0x7c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <vTaskSwitchContext+0x80>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f1c3 031f 	rsb	r3, r3, #31
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <vTaskSwitchContext+0x84>)
 80028ae:	4413      	add	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3308      	adds	r3, #8
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d104      	bne.n	80028d2 <vTaskSwitchContext+0x62>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <vTaskSwitchContext+0x88>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200001e4 	.word	0x200001e4
 80028ec:	200001d0 	.word	0x200001d0
 80028f0:	200001c4 	.word	0x200001c4
 80028f4:	200000e8 	.word	0x200000e8
 80028f8:	200000e4 	.word	0x200000e4

080028fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
    configASSERT( uxSchedulerSuspended != 0 );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002912:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	61da      	str	r2, [r3, #28]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6892      	ldr	r2, [r2, #8]
 800292a:	621a      	str	r2, [r3, #32]
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	3218      	adds	r2, #24
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f103 0218 	add.w	r2, r3, #24
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002956:	2101      	movs	r1, #1
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f96f 	bl	8002c3c <prvAddCurrentTaskToDelayedList>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200000e4 	.word	0x200000e4

0800296c <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6852      	ldr	r2, [r2, #4]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d103      	bne.n	80029b2 <vTaskRemoveFromUnorderedEventList+0x46>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	68d2      	ldr	r2, [r2, #12]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3304      	adds	r3, #4
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d103      	bne.n	80029f0 <vTaskRemoveFromUnorderedEventList+0x84>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1e5a      	subs	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <vTaskRemoveFromUnorderedEventList+0x130>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <vTaskRemoveFromUnorderedEventList+0x130>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a16:	4922      	ldr	r1, [pc, #136]	; (8002aa0 <vTaskRemoveFromUnorderedEventList+0x134>)
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	3204      	adds	r2, #4
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <vTaskRemoveFromUnorderedEventList+0x134>)
 8002a56:	441a      	add	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	490f      	ldr	r1, [pc, #60]	; (8002aa0 <vTaskRemoveFromUnorderedEventList+0x134>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <vTaskRemoveFromUnorderedEventList+0x134>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4403      	add	r3, r0
 8002a7c:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <vTaskRemoveFromUnorderedEventList+0x138>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d902      	bls.n	8002a92 <vTaskRemoveFromUnorderedEventList+0x126>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <vTaskRemoveFromUnorderedEventList+0x13c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    }
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	200001c4 	.word	0x200001c4
 8002aa0:	200000e8 	.word	0x200000e8
 8002aa4:	200000e4 	.word	0x200000e4
 8002aa8:	200001d0 	.word	0x200001d0

08002aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ab4:	f000 f852 	bl	8002b5c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <prvIdleTask+0x28>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d9f9      	bls.n	8002ab4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <prvIdleTask+0x2c>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ad0:	e7f0      	b.n	8002ab4 <prvIdleTask+0x8>
 8002ad2:	bf00      	nop
 8002ad4:	200000e8 	.word	0x200000e8
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	e00c      	b.n	8002b02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <prvInitialiseTaskLists+0x60>)
 8002af4:	4413      	add	r3, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fa82 	bl	8002000 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d9ef      	bls.n	8002ae8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <prvInitialiseTaskLists+0x64>)
 8002b0a:	f7ff fa79 	bl	8002000 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b0e:	480d      	ldr	r0, [pc, #52]	; (8002b44 <prvInitialiseTaskLists+0x68>)
 8002b10:	f7ff fa76 	bl	8002000 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <prvInitialiseTaskLists+0x6c>)
 8002b16:	f7ff fa73 	bl	8002000 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b1a:	480c      	ldr	r0, [pc, #48]	; (8002b4c <prvInitialiseTaskLists+0x70>)
 8002b1c:	f7ff fa70 	bl	8002000 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b20:	480b      	ldr	r0, [pc, #44]	; (8002b50 <prvInitialiseTaskLists+0x74>)
 8002b22:	f7ff fa6d 	bl	8002000 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <prvInitialiseTaskLists+0x78>)
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <prvInitialiseTaskLists+0x64>)
 8002b2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <prvInitialiseTaskLists+0x7c>)
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <prvInitialiseTaskLists+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200000e8 	.word	0x200000e8
 8002b40:	2000014c 	.word	0x2000014c
 8002b44:	20000160 	.word	0x20000160
 8002b48:	2000017c 	.word	0x2000017c
 8002b4c:	20000190 	.word	0x20000190
 8002b50:	200001a8 	.word	0x200001a8
 8002b54:	20000174 	.word	0x20000174
 8002b58:	20000178 	.word	0x20000178

08002b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b62:	e019      	b.n	8002b98 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b64:	f000 f97a 	bl	8002e5c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <prvCheckTasksWaitingTermination+0x50>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff faa6 	bl	80020c6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <prvCheckTasksWaitingTermination+0x54>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <prvCheckTasksWaitingTermination+0x54>)
 8002b82:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <prvCheckTasksWaitingTermination+0x58>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <prvCheckTasksWaitingTermination+0x58>)
 8002b8c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b8e:	f000 f97f 	bl	8002e90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f810 	bl	8002bb8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <prvCheckTasksWaitingTermination+0x58>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e1      	bne.n	8002b64 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000190 	.word	0x20000190
 8002bb0:	200001bc 	.word	0x200001bc
 8002bb4:	200001a4 	.word	0x200001a4

08002bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fa91 	bl	80030ec <vPortFree>
                vPortFree( pxTCB );
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa8e 	bl	80030ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <prvResetNextTaskUnblockTime+0x2c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <prvResetNextTaskUnblockTime+0x30>)
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bee:	e005      	b.n	8002bfc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <prvResetNextTaskUnblockTime+0x2c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <prvResetNextTaskUnblockTime+0x30>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000174 	.word	0x20000174
 8002c08:	200001dc 	.word	0x200001dc

08002c0c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <uxTaskResetEventItemValue+0x2c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <uxTaskResetEventItemValue+0x2c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <uxTaskResetEventItemValue+0x2c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1c2 0205 	rsb	r2, r2, #5
 8002c28:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200000e4 	.word	0x200000e4

08002c3c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fa37 	bl	80020c6 <uxListRemove>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4013      	ands	r3, r2
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d124      	bne.n	8002cc8 <prvAddCurrentTaskToDelayedList+0x8c>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d021      	beq.n	8002cc8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	6892      	ldr	r2, [r2, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	3204      	adds	r2, #4
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002cb8:	615a      	str	r2, [r3, #20]
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002cc6:	e026      	b.n	8002d16 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d209      	bcs.n	8002cf4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f7ff f9b2 	bl	8002056 <vListInsert>
}
 8002cf2:	e010      	b.n	8002d16 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7ff f9a8 	bl	8002056 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d202      	bcs.n	8002d16 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200001c0 	.word	0x200001c0
 8002d24:	200000e4 	.word	0x200000e4
 8002d28:	200001c4 	.word	0x200001c4
 8002d2c:	200001a8 	.word	0x200001a8
 8002d30:	20000178 	.word	0x20000178
 8002d34:	20000174 	.word	0x20000174
 8002d38:	200001dc 	.word	0x200001dc

08002d3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3b04      	subs	r3, #4
 8002d6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d6c:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <pxPortInitialiseStack+0x54>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3b14      	subs	r3, #20
 8002d76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3b20      	subs	r3, #32
 8002d82:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d84:	68fb      	ldr	r3, [r7, #12]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	08002d95 	.word	0x08002d95

08002d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	607b      	str	r3, [r7, #4]
    }
 8002db0:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002db2:	bf00      	nop
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0fc      	beq.n	8002db4 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dda:	f380 8809 	msr	PSP, r0
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8811 	msr	BASEPRI, r0
 8002dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8002dee:	4770      	bx	lr

08002df0 <pxCurrentTCBConst2>:
 8002df0:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <prvPortStartFirstTask+0x1c>)
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f380 8808 	msr	MSP, r0
 8002e02:	b662      	cpsie	i
 8002e04:	b661      	cpsie	f
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	df00      	svc	0
 8002e10:	bf00      	nop
 8002e12:	0000      	.short	0x0000
 8002e14:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop

08002e1c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <xPortStartScheduler+0x38>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <xPortStartScheduler+0x38>)
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <xPortStartScheduler+0x38>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <xPortStartScheduler+0x38>)
 8002e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e36:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e38:	f000 f890 	bl	8002f5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <xPortStartScheduler+0x3c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e42:	f7ff ffd9 	bl	8002df8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e46:	f7ff fd13 	bl	8002870 <vTaskSwitchContext>
    prvTaskExitError();
 8002e4a:	f7ff ffa3 	bl	8002d94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e000ed20 	.word	0xe000ed20
 8002e58:	20000004 	.word	0x20000004

08002e5c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
        __asm volatile
 8002e62:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	607b      	str	r3, [r7, #4]
    }
 8002e74:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <vPortEnterCritical+0x30>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a03      	ldr	r2, [pc, #12]	; (8002e8c <vPortEnterCritical+0x30>)
 8002e7e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000004 	.word	0x20000004

08002e90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <vPortExitCritical+0x30>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <vPortExitCritical+0x30>)
 8002e9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <vPortExitCritical+0x30>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <vPortExitCritical+0x24>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002eb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000004 	.word	0x20000004
	...

08002ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ed0:	f3ef 8009 	mrs	r0, PSP
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <pxCurrentTCBConst>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ee0:	6010      	str	r0, [r2, #0]
 8002ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002ee6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002eea:	f380 8811 	msr	BASEPRI, r0
 8002eee:	f7ff fcbf 	bl	8002870 <vTaskSwitchContext>
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8811 	msr	BASEPRI, r0
 8002efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	6808      	ldr	r0, [r1, #0]
 8002f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f06:	f380 8809 	msr	PSP, r0
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	4770      	bx	lr

08002f10 <pxCurrentTCBConst>:
 8002f10:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop

08002f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	607b      	str	r3, [r7, #4]
    }
 8002f30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f32:	f7ff fb97 	bl	8002664 <xTaskIncrementTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <SysTick_Handler+0x40>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f383 8811 	msr	BASEPRI, r3
    }
 8002f4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <vPortSetupTimerInterrupt+0x28>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <vPortSetupTimerInterrupt+0x2c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <vPortSetupTimerInterrupt+0x30>)
 8002f6e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002f72:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <vPortSetupTimerInterrupt+0x28>)
 8002f76:	2207      	movs	r2, #7
 8002f78:	601a      	str	r2, [r3, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010
 8002f88:	e000e018 	.word	0xe000e018
 8002f8c:	e000e014 	.word	0xe000e014

08002f90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002f9c:	f7ff fa68 	bl	8002470 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <pvPortMalloc+0x144>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fa8:	f000 f8e0 	bl	800316c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fac:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <pvPortMalloc+0x148>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 8086 	bne.w	80030c6 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01e      	beq.n	8002ffe <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d218      	bcs.n	8002ffe <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8002fcc:	2208      	movs	r2, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d011      	beq.n	8003002 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d205      	bcs.n	8002ff8 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff6:	e004      	b.n	8003002 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ffc:	e001      	b.n	8003002 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05e      	beq.n	80030c6 <pvPortMalloc+0x136>
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <pvPortMalloc+0x14c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d859      	bhi.n	80030c6 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003012:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <pvPortMalloc+0x150>)
 8003014:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <pvPortMalloc+0x150>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800301c:	e004      	b.n	8003028 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d903      	bls.n	800303a <pvPortMalloc+0xaa>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f1      	bne.n	800301e <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <pvPortMalloc+0x144>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d040      	beq.n	80030c6 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2208      	movs	r2, #8
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	2308      	movs	r3, #8
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	429a      	cmp	r2, r3
 8003064:	d90f      	bls.n	8003086 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003080:	68b8      	ldr	r0, [r7, #8]
 8003082:	f000 f8d5 	bl	8003230 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <pvPortMalloc+0x14c>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	4a12      	ldr	r2, [pc, #72]	; (80030dc <pvPortMalloc+0x14c>)
 8003092:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <pvPortMalloc+0x14c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <pvPortMalloc+0x154>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d203      	bcs.n	80030a8 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <pvPortMalloc+0x14c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <pvPortMalloc+0x154>)
 80030a6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <pvPortMalloc+0x148>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <pvPortMalloc+0x158>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <pvPortMalloc+0x158>)
 80030c4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030c6:	f7ff f9e1 	bl	800248c <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200045f0 	.word	0x200045f0
 80030d8:	20004604 	.word	0x20004604
 80030dc:	200045f4 	.word	0x200045f4
 80030e0:	200045e8 	.word	0x200045e8
 80030e4:	200045f8 	.word	0x200045f8
 80030e8:	200045fc 	.word	0x200045fc

080030ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02c      	beq.n	8003158 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030fe:	2308      	movs	r3, #8
 8003100:	425b      	negs	r3, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <vPortFree+0x74>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01e      	beq.n	8003158 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11a      	bne.n	8003158 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <vPortFree+0x74>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	43db      	mvns	r3, r3
 800312c:	401a      	ands	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003132:	f7ff f99d 	bl	8002470 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <vPortFree+0x78>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <vPortFree+0x78>)
 8003142:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f000 f873 	bl	8003230 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <vPortFree+0x7c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a05      	ldr	r2, [pc, #20]	; (8003168 <vPortFree+0x7c>)
 8003152:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003154:	f7ff f99a 	bl	800248c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20004604 	.word	0x20004604
 8003164:	200045f4 	.word	0x200045f4
 8003168:	20004600 	.word	0x20004600

0800316c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003172:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003176:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <prvHeapInit+0xac>)
 800317a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3307      	adds	r3, #7
 800318a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0307 	bic.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	4a1f      	ldr	r2, [pc, #124]	; (8003218 <prvHeapInit+0xac>)
 800319c:	4413      	add	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <prvHeapInit+0xb0>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <prvHeapInit+0xb0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031b8:	2208      	movs	r2, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <prvHeapInit+0xb4>)
 80031cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <prvHeapInit+0xb4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <prvHeapInit+0xb4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <prvHeapInit+0xb4>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <prvHeapInit+0xb8>)
 80031fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <prvHeapInit+0xbc>)
 8003202:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <prvHeapInit+0xc0>)
 8003206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800320a:	601a      	str	r2, [r3, #0]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	200001e8 	.word	0x200001e8
 800321c:	200045e8 	.word	0x200045e8
 8003220:	200045f0 	.word	0x200045f0
 8003224:	200045f8 	.word	0x200045f8
 8003228:	200045f4 	.word	0x200045f4
 800322c:	20004604 	.word	0x20004604

08003230 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <prvInsertBlockIntoFreeList+0xa8>)
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e002      	b.n	8003244 <prvInsertBlockIntoFreeList+0x14>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d8f7      	bhi.n	800323e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d108      	bne.n	8003272 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	441a      	add	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d118      	bne.n	80032b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <prvInsertBlockIntoFreeList+0xac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d00d      	beq.n	80032ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e008      	b.n	80032c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <prvInsertBlockIntoFreeList+0xac>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e003      	b.n	80032c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d002      	beq.n	80032ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	200045e8 	.word	0x200045e8
 80032dc:	200045f0 	.word	0x200045f0

080032e0 <drawPixel>:
#include "stdint.h"
#include "stdlib.h"


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
 80032ea:	460b      	mov	r3, r1
 80032ec:	80bb      	strh	r3, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	88b9      	ldrh	r1, [r7, #4]
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fc43 	bl	8003b84 <ST7735_DrawPixel>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003306:	b590      	push	{r4, r7, lr}
 8003308:	b085      	sub	sp, #20
 800330a:	af02      	add	r7, sp, #8
 800330c:	4604      	mov	r4, r0
 800330e:	4608      	mov	r0, r1
 8003310:	4611      	mov	r1, r2
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	80fb      	strh	r3, [r7, #6]
 8003318:	4603      	mov	r3, r0
 800331a:	80bb      	strh	r3, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8003324:	88f8      	ldrh	r0, [r7, #6]
 8003326:	88b9      	ldrh	r1, [r7, #4]
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	883c      	ldrh	r4, [r7, #0]
 800332c:	8b3b      	ldrh	r3, [r7, #24]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4623      	mov	r3, r4
 8003332:	f000 fd1d 	bl	8003d70 <ST7735_FillRectangle>
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	80fb      	strh	r3, [r7, #6]
 8003348:	460b      	mov	r3, r1
 800334a:	80bb      	strh	r3, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffc0 	bl	80032e0 <drawPixel>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	80fb      	strh	r3, [r7, #6]
 800337a:	4603      	mov	r3, r0
 800337c:	80bb      	strh	r3, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
 8003382:	4613      	mov	r3, r2
 8003384:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003386:	f9b7 2000 	ldrsh.w	r2, [r7]
 800338a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003394:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003398:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800339c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a0:	1acb      	subs	r3, r1, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfb8      	it	lt
 80033a6:	425b      	neglt	r3, r3
 80033a8:	429a      	cmp	r2, r3
 80033aa:	bfcc      	ite	gt
 80033ac:	2301      	movgt	r3, #1
 80033ae:	2300      	movle	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80033b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	833b      	strh	r3, [r7, #24]
 80033c0:	88bb      	ldrh	r3, [r7, #4]
 80033c2:	80fb      	strh	r3, [r7, #6]
 80033c4:	8b3b      	ldrh	r3, [r7, #24]
 80033c6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	82fb      	strh	r3, [r7, #22]
 80033cc:	883b      	ldrh	r3, [r7, #0]
 80033ce:	807b      	strh	r3, [r7, #2]
 80033d0:	8afb      	ldrh	r3, [r7, #22]
 80033d2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80033d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033dc:	429a      	cmp	r2, r3
 80033de:	dd0b      	ble.n	80033f8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	82bb      	strh	r3, [r7, #20]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	80fb      	strh	r3, [r7, #6]
 80033e8:	8abb      	ldrh	r3, [r7, #20]
 80033ea:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80033ec:	88bb      	ldrh	r3, [r7, #4]
 80033ee:	827b      	strh	r3, [r7, #18]
 80033f0:	883b      	ldrh	r3, [r7, #0]
 80033f2:	80bb      	strh	r3, [r7, #4]
 80033f4:	8a7b      	ldrh	r3, [r7, #18]
 80033f6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80033f8:	887a      	ldrh	r2, [r7, #2]
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8003402:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bfb8      	it	lt
 8003410:	425b      	neglt	r3, r3
 8003412:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8003414:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003418:	0fda      	lsrs	r2, r3, #31
 800341a:	4413      	add	r3, r2
 800341c:	105b      	asrs	r3, r3, #1
 800341e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8003420:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003424:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003428:	429a      	cmp	r2, r3
 800342a:	da02      	bge.n	8003432 <writeLine+0xca>
        ystep = 1;
 800342c:	2301      	movs	r3, #1
 800342e:	83bb      	strh	r3, [r7, #28]
 8003430:	e031      	b.n	8003496 <writeLine+0x12e>
    } else {
        ystep = -1;
 8003432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003436:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8003438:	e02d      	b.n	8003496 <writeLine+0x12e>
        if (steep) {
 800343a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <writeLine+0xec>
            writePixel(y0, x0, color);
 8003442:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003444:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003448:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff76 	bl	800333e <writePixel>
 8003452:	e007      	b.n	8003464 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8003454:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003456:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800345a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff6d 	bl	800333e <writePixel>
        }
        err -= dy;
 8003464:	8bfa      	ldrh	r2, [r7, #30]
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b29b      	uxth	r3, r3
 800346c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800346e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003472:	2b00      	cmp	r3, #0
 8003474:	da09      	bge.n	800348a <writeLine+0x122>
            y0 += ystep;
 8003476:	88ba      	ldrh	r2, [r7, #4]
 8003478:	8bbb      	ldrh	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8003480:	8bfa      	ldrh	r2, [r7, #30]
 8003482:	8a3b      	ldrh	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	b29b      	uxth	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	b29b      	uxth	r3, r3
 8003494:	80fb      	strh	r3, [r7, #6]
 8003496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800349a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800349e:	429a      	cmp	r2, r3
 80034a0:	ddcb      	ble.n	800343a <writeLine+0xd2>
        }
    }
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	3724      	adds	r7, #36	; 0x24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}

080034ac <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	80fb      	strh	r3, [r7, #6]
 80034be:	4603      	mov	r3, r0
 80034c0:	80bb      	strh	r3, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	807b      	strh	r3, [r7, #2]
 80034c6:	4613      	mov	r3, r2
 80034c8:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80034ca:	88ba      	ldrh	r2, [r7, #4]
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	4413      	add	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	b21c      	sxth	r4, r3
 80034d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80034e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80034e4:	883b      	ldrh	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4623      	mov	r3, r4
 80034ea:	f7ff ff3d 	bl	8003368 <writeLine>
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af02      	add	r7, sp, #8
 80034fc:	4604      	mov	r4, r0
 80034fe:	4608      	mov	r0, r1
 8003500:	4611      	mov	r1, r2
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	80fb      	strh	r3, [r7, #6]
 8003508:	4603      	mov	r3, r0
 800350a:	80bb      	strh	r3, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	4413      	add	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	b21a      	sxth	r2, r3
 8003522:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003526:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800352a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800352e:	883b      	ldrh	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4623      	mov	r3, r4
 8003534:	f7ff ff18 	bl	8003368 <writeLine>
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}

08003540 <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4604      	mov	r4, r0
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4623      	mov	r3, r4
 8003550:	80fb      	strh	r3, [r7, #6]
 8003552:	4603      	mov	r3, r0
 8003554:	80bb      	strh	r3, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	807b      	strh	r3, [r7, #2]
 800355a:	4613      	mov	r3, r2
 800355c:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 800355e:	8b3b      	ldrh	r3, [r7, #24]
 8003560:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003564:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003568:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800356c:	f7ff ffc3 	bl	80034f6 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8003570:	88ba      	ldrh	r2, [r7, #4]
 8003572:	883b      	ldrh	r3, [r7, #0]
 8003574:	4413      	add	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29b      	uxth	r3, r3
 800357c:	b219      	sxth	r1, r3
 800357e:	8b3b      	ldrh	r3, [r7, #24]
 8003580:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003584:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003588:	f7ff ffb5 	bl	80034f6 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 800358c:	8b3b      	ldrh	r3, [r7, #24]
 800358e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003592:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003596:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800359a:	f7ff ff87 	bl	80034ac <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4413      	add	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b218      	sxth	r0, r3
 80035ac:	8b3b      	ldrh	r3, [r7, #24]
 80035ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80035b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80035b6:	f7ff ff79 	bl	80034ac <drawFastVLine>
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}

080035c2 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b08f      	sub	sp, #60	; 0x3c
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	80fb      	strh	r3, [r7, #6]
 80035d4:	4603      	mov	r3, r0
 80035d6:	80bb      	strh	r3, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80035e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80035e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dd0b      	ble.n	8003604 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80035ec:	88bb      	ldrh	r3, [r7, #4]
 80035ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035f0:	883b      	ldrh	r3, [r7, #0]
 80035f2:	80bb      	strh	r3, [r7, #4]
 80035f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035f6:	803b      	strh	r3, [r7, #0]
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	80fb      	strh	r3, [r7, #6]
 8003600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003602:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8003604:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003608:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800360c:	429a      	cmp	r2, r3
 800360e:	dd0f      	ble.n	8003630 <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003614:	847b      	strh	r3, [r7, #34]	; 0x22
 8003616:	883b      	ldrh	r3, [r7, #0]
 8003618:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800361c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800361e:	803b      	strh	r3, [r7, #0]
 8003620:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003624:	843b      	strh	r3, [r7, #32]
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800362c:	8c3b      	ldrh	r3, [r7, #32]
 800362e:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8003630:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003634:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003638:	429a      	cmp	r2, r3
 800363a:	dd0b      	ble.n	8003654 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	83fb      	strh	r3, [r7, #30]
 8003640:	883b      	ldrh	r3, [r7, #0]
 8003642:	80bb      	strh	r3, [r7, #4]
 8003644:	8bfb      	ldrh	r3, [r7, #30]
 8003646:	803b      	strh	r3, [r7, #0]
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	83bb      	strh	r3, [r7, #28]
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	80fb      	strh	r3, [r7, #6]
 8003650:	8bbb      	ldrh	r3, [r7, #28]
 8003652:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8003654:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003658:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800365c:	429a      	cmp	r2, r3
 800365e:	d137      	bne.n	80036d0 <fillTriangle+0x10e>
        a = b = x0;
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003664:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003666:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8003668:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800366c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003670:	429a      	cmp	r2, r3
 8003672:	da02      	bge.n	800367a <fillTriangle+0xb8>
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003678:	e007      	b.n	800368a <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800367a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800367e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003682:	429a      	cmp	r2, r3
 8003684:	dd01      	ble.n	800368a <fillTriangle+0xc8>
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 800368a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800368e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003692:	429a      	cmp	r2, r3
 8003694:	da03      	bge.n	800369e <fillTriangle+0xdc>
 8003696:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800369a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800369c:	e008      	b.n	80036b0 <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800369e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80036a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80036a6:	429a      	cmp	r2, r3
 80036a8:	dd02      	ble.n	80036b0 <fillTriangle+0xee>
 80036aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036ae:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 80036b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b21a      	sxth	r2, r3
 80036be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036c6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80036ca:	f7ff ff14 	bl	80034f6 <drawFastHLine>
        return;
 80036ce:	e0d4      	b.n	800387a <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 80036d0:	887a      	ldrh	r2, [r7, #2]
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80036da:	883a      	ldrh	r2, [r7, #0]
 80036dc:	88bb      	ldrh	r3, [r7, #4]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80036e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80036f0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80036f4:	88bb      	ldrh	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80036fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	b29b      	uxth	r3, r3
 8003706:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8003708:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800370c:	883b      	ldrh	r3, [r7, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800371c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003720:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003724:	429a      	cmp	r2, r3
 8003726:	d102      	bne.n	800372e <fillTriangle+0x16c>
 8003728:	883b      	ldrh	r3, [r7, #0]
 800372a:	863b      	strh	r3, [r7, #48]	; 0x30
 800372c:	e003      	b.n	8003736 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 800372e:	883b      	ldrh	r3, [r7, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8003736:	88bb      	ldrh	r3, [r7, #4]
 8003738:	867b      	strh	r3, [r7, #50]	; 0x32
 800373a:	e03e      	b.n	80037ba <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 800373c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	fb92 f3f3 	sdiv	r3, r2, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	4413      	add	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003750:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003756:	fb92 f3f3 	sdiv	r3, r2, r3
 800375a:	b29a      	uxth	r2, r3
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	4413      	add	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8003764:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	4413      	add	r3, r2
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800376e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003774:	4413      	add	r3, r2
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003778:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800377c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003780:	429a      	cmp	r2, r3
 8003782:	dd05      	ble.n	8003790 <fillTriangle+0x1ce>
 8003784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003786:	81bb      	strh	r3, [r7, #12]
 8003788:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800378a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800378c:	89bb      	ldrh	r3, [r7, #12]
 800378e:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8003790:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	b21a      	sxth	r2, r3
 800379e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037a2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80037a6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80037aa:	f7ff fea4 	bl	80034f6 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80037ae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80037ba:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80037be:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80037c2:	429a      	cmp	r2, r3
 80037c4:	ddba      	ble.n	800373c <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80037c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037ca:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80037ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80037d2:	1a8a      	subs	r2, r1, r2
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80037da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037de:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80037e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80037e6:	1a8a      	subs	r2, r1, r2
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80037ee:	e03e      	b.n	800386e <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 80037f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4413      	add	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003804:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	fb92 f3f3 	sdiv	r3, r2, r3
 800380e:	b29a      	uxth	r2, r3
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	4413      	add	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8003818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381e:	4413      	add	r3, r2
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003822:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003828:	4413      	add	r3, r2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800382c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003830:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003834:	429a      	cmp	r2, r3
 8003836:	dd05      	ble.n	8003844 <fillTriangle+0x282>
 8003838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383a:	81fb      	strh	r3, [r7, #14]
 800383c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800383e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8003844:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	b29b      	uxth	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	b29b      	uxth	r3, r3
 8003850:	b21a      	sxth	r2, r3
 8003852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003856:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800385a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800385e:	f7ff fe4a 	bl	80034f6 <drawFastHLine>
    for(; y<=y2; y++) {
 8003862:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	867b      	strh	r3, [r7, #50]	; 0x32
 800386e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003872:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003876:	429a      	cmp	r2, r3
 8003878:	ddba      	ble.n	80037f0 <fillTriangle+0x22e>
    }
}
 800387a:	373c      	adds	r7, #60	; 0x3c
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <Send_cmd>:

// 0 --> No Feedback  1 --> For Feedback
#define Feedback   0x00

void Send_cmd (uint16_t cmd, uint16_t Parameter1, uint16_t Parameter2)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
 800388a:	460b      	mov	r3, r1
 800388c:	80bb      	strh	r3, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	807b      	strh	r3, [r7, #2]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	88bb      	ldrh	r3, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	4413      	add	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f203 1305 	addw	r3, r3, #261	; 0x105
 80038a4:	83fb      	strh	r3, [r7, #30]
	Checksum = 0-Checksum;
 80038a6:	8bfb      	ldrh	r3, [r7, #30]
 80038a8:	425b      	negs	r3, r3
 80038aa:	83fb      	strh	r3, [r7, #30]

	uint16_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80038ac:	237e      	movs	r3, #126	; 0x7e
 80038ae:	813b      	strh	r3, [r7, #8]
 80038b0:	23ff      	movs	r3, #255	; 0xff
 80038b2:	817b      	strh	r3, [r7, #10]
 80038b4:	2306      	movs	r3, #6
 80038b6:	81bb      	strh	r3, [r7, #12]
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	81fb      	strh	r3, [r7, #14]
 80038bc:	2300      	movs	r3, #0
 80038be:	823b      	strh	r3, [r7, #16]
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	827b      	strh	r3, [r7, #18]
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	82bb      	strh	r3, [r7, #20]
 80038c8:	8bfb      	ldrh	r3, [r7, #30]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	82fb      	strh	r3, [r7, #22]
 80038d0:	8bfb      	ldrh	r3, [r7, #30]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	833b      	strh	r3, [r7, #24]
 80038d8:	23ef      	movs	r3, #239	; 0xef
 80038da:	837b      	strh	r3, [r7, #26]
	MCAL_USART_Send_Data(DF_UART, CmdSequence, enable, 10);
 80038dc:	f107 0108 	add.w	r1, r7, #8
 80038e0:	230a      	movs	r3, #10
 80038e2:	2200      	movs	r2, #0
 80038e4:	4803      	ldr	r0, [pc, #12]	; (80038f4 <Send_cmd+0x74>)
 80038e6:	f7fe f8e3 	bl	8001ab0 <MCAL_USART_Send_Data>
}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40013800 	.word	0x40013800

080038f8 <HAL_DF_Init>:


void HAL_DF_Init (uint8_t volume)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8003902:	2202      	movs	r2, #2
 8003904:	2100      	movs	r1, #0
 8003906:	203f      	movs	r0, #63	; 0x3f
 8003908:	f7ff ffba 	bl	8003880 <Send_cmd>
	Send_cmd(0x06, 0x00, volume);
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	2100      	movs	r1, #0
 8003914:	2006      	movs	r0, #6
 8003916:	f7ff ffb3 	bl	8003880 <Send_cmd>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_DF_Next>:

void HAL_DF_Next (void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
	Send_cmd(0x01, 0x00, 0x00);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	2001      	movs	r0, #1
 800392c:	f7ff ffa8 	bl	8003880 <Send_cmd>
}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DF_Pause>:

void HAL_DF_Pause (void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	200e      	movs	r0, #14
 800393e:	f7ff ff9f 	bl	8003880 <Send_cmd>
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_DF_Previous>:

void HAL_DF_Previous (void)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	af00      	add	r7, sp, #0
	Send_cmd(0x02, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2002      	movs	r0, #2
 8003950:	f7ff ff96 	bl	8003880 <Send_cmd>
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DF_Playback>:

void HAL_DF_Playback (void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	200d      	movs	r0, #13
 8003962:	f7ff ff8d 	bl	8003880 <Send_cmd>
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_DF_SpecifyVolume>:

void HAL_DF_SpecifyVolume(uint8_t volume)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x06, 0x00, volume);
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	2006      	movs	r0, #6
 800397e:	f7ff ff7f 	bl	8003880 <Send_cmd>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003990:	2200      	movs	r2, #0
 8003992:	2108      	movs	r1, #8
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <ST7735_Select+0x14>)
 8003996:	f7fd fc75 	bl	8001284 <MCAL_GPIO_WritePin>
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40010800 	.word	0x40010800

080039a4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	2108      	movs	r1, #8
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <ST7735_Unselect+0x14>)
 80039ae:	f7fd fc69 	bl	8001284 <MCAL_GPIO_WritePin>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40010800 	.word	0x40010800

080039bc <ST7735_Reset>:

static void ST7735_Reset() {
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2104      	movs	r1, #4
 80039c4:	4806      	ldr	r0, [pc, #24]	; (80039e0 <ST7735_Reset+0x24>)
 80039c6:	f7fd fc5d 	bl	8001284 <MCAL_GPIO_WritePin>
    STK_SetDelay_ms(5);
 80039ca:	4806      	ldr	r0, [pc, #24]	; (80039e4 <ST7735_Reset+0x28>)
 80039cc:	f7fd ff6e 	bl	80018ac <STK_SetDelay_ms>
    MCAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80039d0:	2201      	movs	r2, #1
 80039d2:	2104      	movs	r1, #4
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <ST7735_Reset+0x24>)
 80039d6:	f7fd fc55 	bl	8001284 <MCAL_GPIO_WritePin>
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40010800 	.word	0x40010800
 80039e4:	40a00000 	.word	0x40a00000

080039e8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2110      	movs	r1, #16
 80039f6:	4806      	ldr	r0, [pc, #24]	; (8003a10 <ST7735_WriteCommand+0x28>)
 80039f8:	f7fd fc44 	bl	8001284 <MCAL_GPIO_WritePin>
    MCAL_SPI_TX(ST7735_SPI_PORT, &cmd, sizeof(cmd));
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	2201      	movs	r2, #1
 8003a00:	4619      	mov	r1, r3
 8003a02:	4804      	ldr	r0, [pc, #16]	; (8003a14 <ST7735_WriteCommand+0x2c>)
 8003a04:	f7fd feb6 	bl	8001774 <MCAL_SPI_TX>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40010800 	.word	0x40010800
 8003a14:	40013000 	.word	0x40013000

08003a18 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003a22:	2201      	movs	r2, #1
 8003a24:	2110      	movs	r1, #16
 8003a26:	4807      	ldr	r0, [pc, #28]	; (8003a44 <ST7735_WriteData+0x2c>)
 8003a28:	f7fd fc2c 	bl	8001284 <MCAL_GPIO_WritePin>
    MCAL_SPI_TX(ST7735_SPI_PORT, buff, buff_size);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <ST7735_WriteData+0x30>)
 8003a36:	f7fd fe9d 	bl	8001774 <MCAL_SPI_TX>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40010800 	.word	0x40010800
 8003a48:	40013000 	.word	0x40013000

08003a4c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003a5e:	e038      	b.n	8003ad2 <ST7735_ExecuteCommandList+0x86>
        uint8_t cmd = *addr++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ffbb 	bl	80039e8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003a7c:	7abb      	ldrb	r3, [r7, #10]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003a86:	7abb      	ldrb	r3, [r7, #10]
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003a8e:	7abb      	ldrb	r3, [r7, #10]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003a94:	7abb      	ldrb	r3, [r7, #10]
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffbd 	bl	8003a18 <ST7735_WriteData>
            addr += numArgs;
 8003a9e:	7abb      	ldrb	r3, [r7, #10]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003aa6:	89bb      	ldrh	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <ST7735_ExecuteCommandList+0x86>
            ms = *addr++;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003ab6:	89bb      	ldrh	r3, [r7, #12]
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d102      	bne.n	8003ac2 <ST7735_ExecuteCommandList+0x76>
 8003abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ac0:	81bb      	strh	r3, [r7, #12]
            STK_SetDelay_ms(ms);
 8003ac2:	89bb      	ldrh	r3, [r7, #12]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fff7 	bl	8000ab8 <__aeabi_ui2f>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd feed 	bl	80018ac <STK_SetDelay_ms>
    while(numCommands--) {
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	73fa      	strb	r2, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1c1      	bne.n	8003a60 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003ae6:	b590      	push	{r4, r7, lr}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4604      	mov	r4, r0
 8003aee:	4608      	mov	r0, r1
 8003af0:	4611      	mov	r1, r2
 8003af2:	461a      	mov	r2, r3
 8003af4:	4623      	mov	r3, r4
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	4603      	mov	r3, r0
 8003afa:	71bb      	strb	r3, [r7, #6]
 8003afc:	460b      	mov	r3, r1
 8003afe:	717b      	strb	r3, [r7, #5]
 8003b00:	4613      	mov	r3, r2
 8003b02:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003b04:	202a      	movs	r0, #42	; 0x2a
 8003b06:	f7ff ff6f 	bl	80039e8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	733b      	strb	r3, [r7, #12]
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	737b      	strb	r3, [r7, #13]
 8003b12:	2300      	movs	r3, #0
 8003b14:	73bb      	strb	r3, [r7, #14]
 8003b16:	797b      	ldrb	r3, [r7, #5]
 8003b18:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2104      	movs	r1, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff79 	bl	8003a18 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003b26:	202b      	movs	r0, #43	; 0x2b
 8003b28:	f7ff ff5e 	bl	80039e8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003b2c:	79bb      	ldrb	r3, [r7, #6]
 8003b2e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003b30:	793b      	ldrb	r3, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	2104      	movs	r1, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff6c 	bl	8003a18 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003b40:	202c      	movs	r0, #44	; 0x2c
 8003b42:	f7ff ff51 	bl	80039e8 <ST7735_WriteCommand>
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
	...

08003b50 <ST7735_Init>:

void ST7735_Init() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    ST7735_Select();
 8003b54:	f7ff ff1a 	bl	800398c <ST7735_Select>
    ST7735_Reset();
 8003b58:	f7ff ff30 	bl	80039bc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8003b5c:	4806      	ldr	r0, [pc, #24]	; (8003b78 <ST7735_Init+0x28>)
 8003b5e:	f7ff ff75 	bl	8003a4c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <ST7735_Init+0x2c>)
 8003b64:	f7ff ff72 	bl	8003a4c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <ST7735_Init+0x30>)
 8003b6a:	f7ff ff6f 	bl	8003a4c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8003b6e:	f7ff ff19 	bl	80039a4 <ST7735_Unselect>
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	0800603c 	.word	0x0800603c
 8003b7c:	08006078 	.word	0x08006078
 8003b80:	08006088 	.word	0x08006088

08003b84 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	80bb      	strh	r3, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b9f      	cmp	r3, #159	; 0x9f
 8003b9a:	d823      	bhi.n	8003be4 <ST7735_DrawPixel+0x60>
 8003b9c:	88bb      	ldrh	r3, [r7, #4]
 8003b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba0:	d820      	bhi.n	8003be4 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8003ba2:	f7ff fef3 	bl	800398c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	b2d8      	uxtb	r0, r3
 8003baa:	88bb      	ldrh	r3, [r7, #4]
 8003bac:	b2d9      	uxtb	r1, r3
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	88bb      	ldrh	r3, [r7, #4]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f7ff ff92 	bl	8003ae6 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	733b      	strb	r3, [r7, #12]
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff1d 	bl	8003a18 <ST7735_WriteData>

    ST7735_Unselect();
 8003bde:	f7ff fee1 	bl	80039a4 <ST7735_Unselect>
 8003be2:	e000      	b.n	8003be6 <ST7735_DrawPixel+0x62>
        return;
 8003be4:	bf00      	nop
}
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003bec:	b082      	sub	sp, #8
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b089      	sub	sp, #36	; 0x24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	80fb      	strh	r3, [r7, #6]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	80bb      	strh	r3, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	b2d8      	uxtb	r0, r3
 8003c06:	88bb      	ldrh	r3, [r7, #4]
 8003c08:	b2d9      	uxtb	r1, r3
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c12:	4413      	add	r3, r2
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b2dc      	uxtb	r4, r3
 8003c1a:	88bb      	ldrh	r3, [r7, #4]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003c22:	4413      	add	r3, r2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	f7ff ff5b 	bl	8003ae6 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e043      	b.n	8003cbe <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	3b20      	subs	r3, #32
 8003c3c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4619      	mov	r1, r3
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	440b      	add	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e029      	b.n	8003cac <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8003c68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	743b      	strb	r3, [r7, #16]
 8003c72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff feca 	bl	8003a18 <ST7735_WriteData>
 8003c84:	e00f      	b.n	8003ca6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	733b      	strb	r3, [r7, #12]
 8003c92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff feb9 	bl	8003a18 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d3cf      	bcc.n	8003c58 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d3b5      	bcc.n	8003c36 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	3724      	adds	r7, #36	; 0x24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003cd6:	b002      	add	sp, #8
 8003cd8:	4770      	bx	lr

08003cda <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003cda:	b082      	sub	sp, #8
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af04      	add	r7, sp, #16
 8003ce2:	603a      	str	r2, [r7, #0]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
 8003cea:	460b      	mov	r3, r1
 8003cec:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8003cee:	f7ff fe4d 	bl	800398c <ST7735_Select>

    while(*str) {
 8003cf2:	e02d      	b.n	8003d50 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	7d3a      	ldrb	r2, [r7, #20]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	2b9f      	cmp	r3, #159	; 0x9f
 8003cfc:	dd13      	ble.n	8003d26 <ST7735_WriteString+0x4c>
            x = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003d02:	7d7b      	ldrb	r3, [r7, #21]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	88bb      	ldrh	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	7d7a      	ldrb	r2, [r7, #21]
 8003d10:	4413      	add	r3, r2
 8003d12:	2b7f      	cmp	r3, #127	; 0x7f
 8003d14:	dc21      	bgt.n	8003d5a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d103      	bne.n	8003d26 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	603b      	str	r3, [r7, #0]
                continue;
 8003d24:	e014      	b.n	8003d50 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	88b9      	ldrh	r1, [r7, #4]
 8003d2c:	88f8      	ldrh	r0, [r7, #6]
 8003d2e:	8c3b      	ldrh	r3, [r7, #32]
 8003d30:	9302      	str	r3, [sp, #8]
 8003d32:	8bbb      	ldrh	r3, [r7, #28]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f7ff ff56 	bl	8003bec <ST7735_WriteChar>
        x += font.width;
 8003d40:	7d3b      	ldrb	r3, [r7, #20]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	4413      	add	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
        str++;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1cd      	bne.n	8003cf4 <ST7735_WriteString+0x1a>
 8003d58:	e000      	b.n	8003d5c <ST7735_WriteString+0x82>
                break;
 8003d5a:	bf00      	nop
    }

    ST7735_Unselect();
 8003d5c:	f7ff fe22 	bl	80039a4 <ST7735_Unselect>
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d6a:	b002      	add	sp, #8
 8003d6c:	4770      	bx	lr
	...

08003d70 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4623      	mov	r3, r4
 8003d80:	80fb      	strh	r3, [r7, #6]
 8003d82:	4603      	mov	r3, r0
 8003d84:	80bb      	strh	r3, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	807b      	strh	r3, [r7, #2]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b9f      	cmp	r3, #159	; 0x9f
 8003d92:	d856      	bhi.n	8003e42 <ST7735_FillRectangle+0xd2>
 8003d94:	88bb      	ldrh	r3, [r7, #4]
 8003d96:	2b7f      	cmp	r3, #127	; 0x7f
 8003d98:	d853      	bhi.n	8003e42 <ST7735_FillRectangle+0xd2>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	4413      	add	r3, r2
 8003da0:	2ba0      	cmp	r3, #160	; 0xa0
 8003da2:	dd03      	ble.n	8003dac <ST7735_FillRectangle+0x3c>
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8003daa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003dac:	88ba      	ldrh	r2, [r7, #4]
 8003dae:	883b      	ldrh	r3, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	dd03      	ble.n	8003dbe <ST7735_FillRectangle+0x4e>
 8003db6:	88bb      	ldrh	r3, [r7, #4]
 8003db8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003dbc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003dbe:	f7ff fde5 	bl	800398c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	b2d8      	uxtb	r0, r3
 8003dc6:	88bb      	ldrh	r3, [r7, #4]
 8003dc8:	b2d9      	uxtb	r1, r3
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b2dc      	uxtb	r4, r3
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	883b      	ldrh	r3, [r7, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	4622      	mov	r2, r4
 8003dec:	f7ff fe7b 	bl	8003ae6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003df0:	8c3b      	ldrh	r3, [r7, #32]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	733b      	strb	r3, [r7, #12]
 8003dfa:	8c3b      	ldrh	r3, [r7, #32]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	737b      	strb	r3, [r7, #13]
    MCAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003e00:	2201      	movs	r2, #1
 8003e02:	2110      	movs	r1, #16
 8003e04:	4811      	ldr	r0, [pc, #68]	; (8003e4c <ST7735_FillRectangle+0xdc>)
 8003e06:	f7fd fa3d 	bl	8001284 <MCAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003e0a:	883b      	ldrh	r3, [r7, #0]
 8003e0c:	80bb      	strh	r3, [r7, #4]
 8003e0e:	e012      	b.n	8003e36 <ST7735_FillRectangle+0xc6>
        for(x = w; x > 0; x--) {
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	e009      	b.n	8003e2a <ST7735_FillRectangle+0xba>
            MCAL_SPI_TX(ST7735_SPI_PORT, data, sizeof(data));
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	480c      	ldr	r0, [pc, #48]	; (8003e50 <ST7735_FillRectangle+0xe0>)
 8003e20:	f7fd fca8 	bl	8001774 <MCAL_SPI_TX>
        for(x = w; x > 0; x--) {
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	80fb      	strh	r3, [r7, #6]
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f2      	bne.n	8003e16 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	80bb      	strh	r3, [r7, #4]
 8003e36:	88bb      	ldrh	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e9      	bne.n	8003e10 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8003e3c:	f7ff fdb2 	bl	80039a4 <ST7735_Unselect>
 8003e40:	e000      	b.n	8003e44 <ST7735_FillRectangle+0xd4>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003e42:	bf00      	nop
}
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40010800 	.word	0x40010800
 8003e50:	40013000 	.word	0x40013000

08003e54 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	22a0      	movs	r2, #160	; 0xa0
 8003e66:	2100      	movs	r1, #0
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff ff81 	bl	8003d70 <ST7735_FillRectangle>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <getTrackName>:
//uint8_t update_track = 0;

const char *trackNames[MAX_TRACK_NUM] = { "Genesis", "Mem Reboot",
		"Rapp Snitch", "Killin' on demand" };

const char* getTrackName(uint8_t trackNumber) {
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
	return trackNames[trackNumber];
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <getTrackName+0x1c>)
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	20000014 	.word	0x20000014

08003e98 <main>:

#define BUTTON_ACT_BIT_M    	(1 << 0)
#define BUTTON_UP_BIT_M  	  	(1 << 1)
#define BUTTON_DOWN_BIT_M    	(1 << 2)

int main(void) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	; 0x48
 8003e9c:	af02      	add	r7, sp, #8

	// Event Groups

	buttonEventGroup = xEventGroupCreate();
 8003e9e:	f7fd ff65 	bl	8001d6c <xEventGroupCreate>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <main+0x200>)
 8003ea6:	6013      	str	r3, [r2, #0]
	buttonEventGroup_M = xEventGroupCreate();
 8003ea8:	f7fd ff60 	bl	8001d6c <xEventGroupCreate>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4a7b      	ldr	r2, [pc, #492]	; (800409c <main+0x204>)
 8003eb0:	6013      	str	r3, [r2, #0]

	// Task Creation

	xTaskCreate(vUpdate_Screen_Handler, "Screen Updater",
 8003eb2:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <main+0x208>)
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec0:	4978      	ldr	r1, [pc, #480]	; (80040a4 <main+0x20c>)
 8003ec2:	4879      	ldr	r0, [pc, #484]	; (80040a8 <main+0x210>)
 8003ec4:	f7fe f928 	bl	8002118 <xTaskCreate>
	configMINIMAL_STACK_SIZE, NULL, 1, &xUpdate_Screen_Handle);
	xTaskCreate(vMP3_Player_Handler, "MP3 USART1", configMINIMAL_STACK_SIZE,
 8003ec8:	4b78      	ldr	r3, [pc, #480]	; (80040ac <main+0x214>)
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed6:	4976      	ldr	r1, [pc, #472]	; (80040b0 <main+0x218>)
 8003ed8:	4876      	ldr	r0, [pc, #472]	; (80040b4 <main+0x21c>)
 8003eda:	f7fe f91d 	bl	8002118 <xTaskCreate>
	NULL, 1, &xMP3_Player_Handle);
	xTaskCreate(vButton_Handler, "Check Butttons", configMINIMAL_STACK_SIZE,
 8003ede:	4b76      	ldr	r3, [pc, #472]	; (80040b8 <main+0x220>)
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eec:	4973      	ldr	r1, [pc, #460]	; (80040bc <main+0x224>)
 8003eee:	4874      	ldr	r0, [pc, #464]	; (80040c0 <main+0x228>)
 8003ef0:	f7fe f912 	bl	8002118 <xTaskCreate>
	NULL, 1, &xButton_Handle);

	//Welcome Screen

	MCAL_RCC_InitSysClock();
 8003ef4:	f7fd fa0e 	bl	8001314 <MCAL_RCC_InitSysClock>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPAEN);
 8003ef8:	2102      	movs	r1, #2
 8003efa:	2002      	movs	r0, #2
 8003efc:	f7fd fa7c 	bl	80013f8 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPBEN);
 8003f00:	2103      	movs	r1, #3
 8003f02:	2002      	movs	r0, #2
 8003f04:	f7fd fa78 	bl	80013f8 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPDEN);
 8003f08:	2105      	movs	r1, #5
 8003f0a:	2002      	movs	r0, #2
 8003f0c:	f7fd fa74 	bl	80013f8 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_AFIOEN);
 8003f10:	2100      	movs	r1, #0
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fd fa70 	bl	80013f8 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_SPI1EN);
 8003f18:	210c      	movs	r1, #12
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f7fd fa6c 	bl	80013f8 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_USART1EN);
 8003f20:	210e      	movs	r1, #14
 8003f22:	2002      	movs	r0, #2
 8003f24:	f7fd fa68 	bl	80013f8 <MCAL_RCC_EnablePeripheral>

	USART_Config_t uartcfg;
	uartcfg.BaudRate = USART_BAUD_RATE_9600;
 8003f28:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
	uartcfg.FlowCTRL = USART_FLOW_CTRL_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
	uartcfg.IRQ_Enable = USART_IRQ_ENABLE_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
	uartcfg.P_IRQ_CallBack = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uartcfg.Parity = USART_PARITY_NONE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartcfg.PayLoadLength = USART_DATA_8bits;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
	uartcfg.StopBits = USART_STOP_BITS_1;
 8003f42:	2300      	movs	r3, #0
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
	uartcfg.USART_Mode = USART_MODE_TX_RX;
 8003f46:	230c      	movs	r3, #12
 8003f48:	623b      	str	r3, [r7, #32]

	MCAL_USART_Init(USART1, &uartcfg);
 8003f4a:	f107 0320 	add.w	r3, r7, #32
 8003f4e:	4619      	mov	r1, r3
 8003f50:	485c      	ldr	r0, [pc, #368]	; (80040c4 <main+0x22c>)
 8003f52:	f7fd fd2d 	bl	80019b0 <MCAL_USART_Init>
	MCAL_USART_GPIO_SetPins(USART1);
 8003f56:	485b      	ldr	r0, [pc, #364]	; (80040c4 <main+0x22c>)
 8003f58:	f7fd fdf2 	bl	8001b40 <MCAL_USART_GPIO_SetPins>

	SPI_Config_t spicfg;
	spicfg.Baud_PS = SPI_Baud_PS_2;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	82fb      	strh	r3, [r7, #22]
	spicfg.Device_Mode = SPI_Device_Mode_Master;
 8003f60:	2304      	movs	r3, #4
 8003f62:	813b      	strh	r3, [r7, #8]
	spicfg.Com_Mode = SPI_Com_Mode_1L_TX;
 8003f64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f68:	817b      	strh	r3, [r7, #10]
	spicfg.Data_Size = SPI_Data_Size_8;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	81fb      	strh	r3, [r7, #14]
	spicfg.Frame_Format = SPI_Frame_Format_MSB;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	81bb      	strh	r3, [r7, #12]
	spicfg.IRQ_En = SPI_IRQ_NONE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	833b      	strh	r3, [r7, #24]
	spicfg.NSS = SPI_NSS_Software_En_Set;
 8003f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f7a:	82bb      	strh	r3, [r7, #20]
	spicfg.P_IRq_CallBack = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
	spicfg.CLK_PHA = SPI_CLK_PHA_1;
 8003f80:	2300      	movs	r3, #0
 8003f82:	827b      	strh	r3, [r7, #18]
	spicfg.CLK_POL = SPI_CLK_POL_Low;
 8003f84:	2300      	movs	r3, #0
 8003f86:	823b      	strh	r3, [r7, #16]

	MCAL_SPI_Init(SPI1, &spicfg);
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	484e      	ldr	r0, [pc, #312]	; (80040c8 <main+0x230>)
 8003f90:	f7fd fad2 	bl	8001538 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_PINS(SPI1);
 8003f94:	484c      	ldr	r0, [pc, #304]	; (80040c8 <main+0x230>)
 8003f96:	f7fd fb29 	bl	80015ec <MCAL_SPI_GPIO_PINS>

	/* TFT LCD CONTROL */
	GPIO_PinConfig_t ccfg;
	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_2;
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4848      	ldr	r0, [pc, #288]	; (80040cc <main+0x234>)
 8003fac:	f7fd f8d2 	bl	8001154 <MCAL_GPIO_Init>

	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_3;
 8003fb8:	2308      	movs	r3, #8
 8003fba:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4842      	ldr	r0, [pc, #264]	; (80040cc <main+0x234>)
 8003fc2:	f7fd f8c7 	bl	8001154 <MCAL_GPIO_Init>

	ccfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_4;
 8003fce:	2310      	movs	r3, #16
 8003fd0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	483d      	ldr	r0, [pc, #244]	; (80040cc <main+0x234>)
 8003fd8:	f7fd f8bc 	bl	8001154 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2104      	movs	r1, #4
 8003fe0:	483a      	ldr	r0, [pc, #232]	; (80040cc <main+0x234>)
 8003fe2:	f7fd f94f 	bl	8001284 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2108      	movs	r1, #8
 8003fea:	4838      	ldr	r0, [pc, #224]	; (80040cc <main+0x234>)
 8003fec:	f7fd f94a 	bl	8001284 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	4835      	ldr	r0, [pc, #212]	; (80040cc <main+0x234>)
 8003ff6:	f7fd f945 	bl	8001284 <MCAL_GPIO_WritePin>

	// PIN B6 BSY LINE
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8003ffe:	2302      	movs	r3, #2
 8004000:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_6;
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4831      	ldr	r0, [pc, #196]	; (80040d0 <main+0x238>)
 800400c:	f7fd f8a2 	bl	8001154 <MCAL_GPIO_Init>

	/* MENU CONTROL */
	// PIN B7 FORWARD BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8004010:	2302      	movs	r3, #2
 8004012:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8004014:	2302      	movs	r3, #2
 8004016:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_7;
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	4619      	mov	r1, r3
 8004020:	482b      	ldr	r0, [pc, #172]	; (80040d0 <main+0x238>)
 8004022:	f7fd f897 	bl	8001154 <MCAL_GPIO_Init>

	// PIN B8 ACTION BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8004026:	2302      	movs	r3, #2
 8004028:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800402a:	2302      	movs	r3, #2
 800402c:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_8;
 800402e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004032:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <main+0x238>)
 800403a:	f7fd f88b 	bl	8001154 <MCAL_GPIO_Init>

	// PIN B9 BACKWARD BUTTON
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800403e:	2302      	movs	r3, #2
 8004040:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8004042:	2302      	movs	r3, #2
 8004044:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_9;
 8004046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800404a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ccfg);
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	481f      	ldr	r0, [pc, #124]	; (80040d0 <main+0x238>)
 8004052:	f7fd f87f 	bl	8001154 <MCAL_GPIO_Init>

	// PIN A11 VOL UP
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8004056:	2302      	movs	r3, #2
 8004058:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 800405a:	2302      	movs	r3, #2
 800405c:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_11;
 800405e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004062:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4818      	ldr	r0, [pc, #96]	; (80040cc <main+0x234>)
 800406a:	f7fd f873 	bl	8001154 <MCAL_GPIO_Init>

	// PIN A12 VOL DOWN
	ccfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 800406e:	2302      	movs	r3, #2
 8004070:	71bb      	strb	r3, [r7, #6]
	ccfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8004072:	2302      	movs	r3, #2
 8004074:	71fb      	strb	r3, [r7, #7]
	ccfg.GPIO_PinNumber = GPIO_PIN_12;
 8004076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800407a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &ccfg);
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4812      	ldr	r0, [pc, #72]	; (80040cc <main+0x234>)
 8004082:	f7fd f867 	bl	8001154 <MCAL_GPIO_Init>

	ST7735_Init();
 8004086:	f7ff fd63 	bl	8003b50 <ST7735_Init>
	HAL_DF_Init(15);
 800408a:	200f      	movs	r0, #15
 800408c:	f7ff fc34 	bl	80038f8 <HAL_DF_Init>

//	ST7735_DrawImage(0, 0, 160, 128, img);

	vTaskStartScheduler();
 8004090:	f7fe f9b2 	bl	80023f8 <vTaskStartScheduler>

	for (;;)
 8004094:	e7fe      	b.n	8004094 <main+0x1fc>
 8004096:	bf00      	nop
 8004098:	20004618 	.word	0x20004618
 800409c:	2000461c 	.word	0x2000461c
 80040a0:	2000460c 	.word	0x2000460c
 80040a4:	080052a8 	.word	0x080052a8
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	20004610 	.word	0x20004610
 80040b0:	080052b8 	.word	0x080052b8
 80040b4:	08004539 	.word	0x08004539
 80040b8:	20004614 	.word	0x20004614
 80040bc:	080052c4 	.word	0x080052c4
 80040c0:	08004681 	.word	0x08004681
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40013000 	.word	0x40013000
 80040cc:	40010800 	.word	0x40010800
 80040d0:	40010c00 	.word	0x40010c00

080040d4 <vUpdate_Screen_Handler>:
		;
}

void vUpdate_Screen_Handler(void *params) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af04      	add	r7, sp, #16
 80040da:	6078      	str	r0, [r7, #4]

	// START SCREEN
	ST7735_FillScreen(ST7735_BLACK);
 80040dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80040e0:	f7ff feb8 	bl	8003e54 <ST7735_FillScreen>
	//BACKWARD
	fillTriangle(12, 106, 23, 95, 23, 117, ST7735_RED);
 80040e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	2375      	movs	r3, #117	; 0x75
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	2317      	movs	r3, #23
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	235f      	movs	r3, #95	; 0x5f
 80040f4:	2217      	movs	r2, #23
 80040f6:	216a      	movs	r1, #106	; 0x6a
 80040f8:	200c      	movs	r0, #12
 80040fa:	f7ff fa62 	bl	80035c2 <fillTriangle>
	fillTriangle(19, 106, 30, 95, 30, 117, ST7735_RED);
 80040fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004102:	9302      	str	r3, [sp, #8]
 8004104:	2375      	movs	r3, #117	; 0x75
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	231e      	movs	r3, #30
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	235f      	movs	r3, #95	; 0x5f
 800410e:	221e      	movs	r2, #30
 8004110:	216a      	movs	r1, #106	; 0x6a
 8004112:	2013      	movs	r0, #19
 8004114:	f7ff fa55 	bl	80035c2 <fillTriangle>
	//FORWARD
	fillTriangle(148, 106, 137, 95, 137, 117, ST7735_RED);
 8004118:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	2375      	movs	r3, #117	; 0x75
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2389      	movs	r3, #137	; 0x89
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	235f      	movs	r3, #95	; 0x5f
 8004128:	2289      	movs	r2, #137	; 0x89
 800412a:	216a      	movs	r1, #106	; 0x6a
 800412c:	2094      	movs	r0, #148	; 0x94
 800412e:	f7ff fa48 	bl	80035c2 <fillTriangle>
	fillTriangle(141, 106, 130, 95, 130, 117, ST7735_RED);
 8004132:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004136:	9302      	str	r3, [sp, #8]
 8004138:	2375      	movs	r3, #117	; 0x75
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	2382      	movs	r3, #130	; 0x82
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	235f      	movs	r3, #95	; 0x5f
 8004142:	2282      	movs	r2, #130	; 0x82
 8004144:	216a      	movs	r1, #106	; 0x6a
 8004146:	208d      	movs	r0, #141	; 0x8d
 8004148:	f7ff fa3b 	bl	80035c2 <fillTriangle>
	//PLAY
	fillTriangle(91, 106, 69, 84, 69, 128, ST7735_RED);
 800414c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004150:	9302      	str	r3, [sp, #8]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2345      	movs	r3, #69	; 0x45
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2354      	movs	r3, #84	; 0x54
 800415c:	2245      	movs	r2, #69	; 0x45
 800415e:	216a      	movs	r1, #106	; 0x6a
 8004160:	205b      	movs	r0, #91	; 0x5b
 8004162:	f7ff fa2e 	bl	80035c2 <fillTriangle>
	//FIRST SELECTION
	drawRect(10, 92, 24, 29, ST7735_GREEN);
 8004166:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	231d      	movs	r3, #29
 800416e:	2218      	movs	r2, #24
 8004170:	215c      	movs	r1, #92	; 0x5c
 8004172:	200a      	movs	r0, #10
 8004174:	f7ff f9e4 	bl	8003540 <drawRect>
	//TRACK NAME
	ST7735_WriteString(9, 25, getTrackName(Track_Counter), Font_11x18,
 8004178:	4b98      	ldr	r3, [pc, #608]	; (80043dc <vUpdate_Screen_Handler+0x308>)
 800417a:	f993 3000 	ldrsb.w	r3, [r3]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fe79 	bl	8003e78 <getTrackName>
 8004186:	4601      	mov	r1, r0
 8004188:	4b95      	ldr	r3, [pc, #596]	; (80043e0 <vUpdate_Screen_Handler+0x30c>)
 800418a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004194:	9201      	str	r2, [sp, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	9200      	str	r2, [sp, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	460a      	mov	r2, r1
 800419e:	2119      	movs	r1, #25
 80041a0:	2009      	movs	r0, #9
 80041a2:	f7ff fd9a 	bl	8003cda <ST7735_WriteString>
	ST7735_RED, ST7735_BLACK);
	//INDICATOR BAR
	drawFastHLine(1, 22, 159, ST7735_RED);
 80041a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80041aa:	229f      	movs	r2, #159	; 0x9f
 80041ac:	2116      	movs	r1, #22
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7ff f9a1 	bl	80034f6 <drawFastHLine>
	ST7735_WriteString(97, 5, "VOL", Font_11x18, ST7735_RED, ST7735_BLACK);
 80041b4:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <vUpdate_Screen_Handler+0x30c>)
 80041b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ba:	9202      	str	r2, [sp, #8]
 80041bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	9200      	str	r2, [sp, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a86      	ldr	r2, [pc, #536]	; (80043e4 <vUpdate_Screen_Handler+0x310>)
 80041ca:	2105      	movs	r1, #5
 80041cc:	2061      	movs	r0, #97	; 0x61
 80041ce:	f7ff fd84 	bl	8003cda <ST7735_WriteString>
	ST7735_WriteString(130, 5, "15", Font_11x18, ST7735_RED, ST7735_BLACK);
 80041d2:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <vUpdate_Screen_Handler+0x30c>)
 80041d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d8:	9202      	str	r2, [sp, #8]
 80041da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80041de:	9201      	str	r2, [sp, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	9200      	str	r2, [sp, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a80      	ldr	r2, [pc, #512]	; (80043e8 <vUpdate_Screen_Handler+0x314>)
 80041e8:	2105      	movs	r1, #5
 80041ea:	2082      	movs	r0, #130	; 0x82
 80041ec:	f7ff fd75 	bl	8003cda <ST7735_WriteString>

	int8_t Prev_Track_Counter = Track_Counter;
 80041f0:	4b7a      	ldr	r3, [pc, #488]	; (80043dc <vUpdate_Screen_Handler+0x308>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	75fb      	strb	r3, [r7, #23]
	int8_t Prev_Vol_Counter = Vol_Counter;
 80041f6:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <vUpdate_Screen_Handler+0x318>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	75bb      	strb	r3, [r7, #22]

	for (;;) {
		EventBits_t bits = xEventGroupWaitBits(buttonEventGroup,
 80041fc:	4b7c      	ldr	r3, [pc, #496]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	2301      	movs	r3, #1
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	2300      	movs	r3, #0
 8004206:	2200      	movs	r2, #0
 8004208:	211f      	movs	r1, #31
 800420a:	f7fd fdc7 	bl	8001d9c <xEventGroupWaitBits>
 800420e:	6138      	str	r0, [r7, #16]
				BUTTON_PP_BIT | BUTTON_UP_BIT | BUTTON_DOWN_BIT
						| BUTTON_BACK_BIT | BUTTON_FOR_BIT,
				pdFALSE, pdFALSE, 1);

		if (bits & BUTTON_BACK_BIT) {
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04d      	beq.n	80042b6 <vUpdate_Screen_Handler+0x1e2>
			xEventGroupClearBits(buttonEventGroup, BUTTON_BACK_BIT);
 800421a:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd fe45 	bl	8001eb0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 8004226:	4b73      	ldr	r3, [pc, #460]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 8004228:	f993 3000 	ldrsb.w	r3, [r3]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d112      	bne.n	8004256 <vUpdate_Screen_Handler+0x182>
				drawRect(59, 80, 39, 48, ST7735_BLACK);
 8004230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2330      	movs	r3, #48	; 0x30
 8004238:	2227      	movs	r2, #39	; 0x27
 800423a:	2150      	movs	r1, #80	; 0x50
 800423c:	203b      	movs	r0, #59	; 0x3b
 800423e:	f7ff f97f 	bl	8003540 <drawRect>
				drawRect(10, 92, 24, 29, ST7735_GREEN);
 8004242:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	231d      	movs	r3, #29
 800424a:	2218      	movs	r2, #24
 800424c:	215c      	movs	r1, #92	; 0x5c
 800424e:	200a      	movs	r0, #10
 8004250:	f7ff f976 	bl	8003540 <drawRect>
 8004254:	e081      	b.n	800435a <vUpdate_Screen_Handler+0x286>
			} else if (Menu_Counter == 1) {
 8004256:	4b67      	ldr	r3, [pc, #412]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 8004258:	f993 3000 	ldrsb.w	r3, [r3]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d112      	bne.n	8004286 <vUpdate_Screen_Handler+0x1b2>
				drawRect(126, 92, 24, 29, ST7735_BLACK);
 8004260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	231d      	movs	r3, #29
 8004268:	2218      	movs	r2, #24
 800426a:	215c      	movs	r1, #92	; 0x5c
 800426c:	207e      	movs	r0, #126	; 0x7e
 800426e:	f7ff f967 	bl	8003540 <drawRect>
				drawRect(59, 80, 39, 48, ST7735_GREEN);
 8004272:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2330      	movs	r3, #48	; 0x30
 800427a:	2227      	movs	r2, #39	; 0x27
 800427c:	2150      	movs	r1, #80	; 0x50
 800427e:	203b      	movs	r0, #59	; 0x3b
 8004280:	f7ff f95e 	bl	8003540 <drawRect>
 8004284:	e069      	b.n	800435a <vUpdate_Screen_Handler+0x286>
			} else if (Menu_Counter == 2) {
 8004286:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 8004288:	f993 3000 	ldrsb.w	r3, [r3]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d164      	bne.n	800435a <vUpdate_Screen_Handler+0x286>
				drawRect(10, 92, 24, 29, ST7735_BLACK);
 8004290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	231d      	movs	r3, #29
 8004298:	2218      	movs	r2, #24
 800429a:	215c      	movs	r1, #92	; 0x5c
 800429c:	200a      	movs	r0, #10
 800429e:	f7ff f94f 	bl	8003540 <drawRect>
				drawRect(126, 92, 24, 29, ST7735_GREEN);
 80042a2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	231d      	movs	r3, #29
 80042aa:	2218      	movs	r2, #24
 80042ac:	215c      	movs	r1, #92	; 0x5c
 80042ae:	207e      	movs	r0, #126	; 0x7e
 80042b0:	f7ff f946 	bl	8003540 <drawRect>
 80042b4:	e051      	b.n	800435a <vUpdate_Screen_Handler+0x286>
			}
		}

		else if (bits & BUTTON_FOR_BIT) {
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d04c      	beq.n	800435a <vUpdate_Screen_Handler+0x286>
			xEventGroupClearBits(buttonEventGroup, BUTTON_FOR_BIT);
 80042c0:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fdf2 	bl	8001eb0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 80042cc:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 80042ce:	f993 3000 	ldrsb.w	r3, [r3]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d112      	bne.n	80042fc <vUpdate_Screen_Handler+0x228>
				drawRect(126, 92, 24, 29, ST7735_BLACK);
 80042d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	231d      	movs	r3, #29
 80042de:	2218      	movs	r2, #24
 80042e0:	215c      	movs	r1, #92	; 0x5c
 80042e2:	207e      	movs	r0, #126	; 0x7e
 80042e4:	f7ff f92c 	bl	8003540 <drawRect>
				drawRect(10, 92, 24, 29, ST7735_GREEN);
 80042e8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	231d      	movs	r3, #29
 80042f0:	2218      	movs	r2, #24
 80042f2:	215c      	movs	r1, #92	; 0x5c
 80042f4:	200a      	movs	r0, #10
 80042f6:	f7ff f923 	bl	8003540 <drawRect>
 80042fa:	e02e      	b.n	800435a <vUpdate_Screen_Handler+0x286>
			} else if (Menu_Counter == 1) {
 80042fc:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 80042fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d112      	bne.n	800432c <vUpdate_Screen_Handler+0x258>
				drawRect(10, 92, 24, 29, ST7735_BLACK);
 8004306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	231d      	movs	r3, #29
 800430e:	2218      	movs	r2, #24
 8004310:	215c      	movs	r1, #92	; 0x5c
 8004312:	200a      	movs	r0, #10
 8004314:	f7ff f914 	bl	8003540 <drawRect>
				drawRect(59, 80, 39, 48, ST7735_GREEN);
 8004318:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2330      	movs	r3, #48	; 0x30
 8004320:	2227      	movs	r2, #39	; 0x27
 8004322:	2150      	movs	r1, #80	; 0x50
 8004324:	203b      	movs	r0, #59	; 0x3b
 8004326:	f7ff f90b 	bl	8003540 <drawRect>
 800432a:	e016      	b.n	800435a <vUpdate_Screen_Handler+0x286>
			} else if (Menu_Counter == 2) {
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <vUpdate_Screen_Handler+0x320>)
 800432e:	f993 3000 	ldrsb.w	r3, [r3]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d111      	bne.n	800435a <vUpdate_Screen_Handler+0x286>
				drawRect(59, 80, 39, 48, ST7735_BLACK);
 8004336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	2227      	movs	r2, #39	; 0x27
 8004340:	2150      	movs	r1, #80	; 0x50
 8004342:	203b      	movs	r0, #59	; 0x3b
 8004344:	f7ff f8fc 	bl	8003540 <drawRect>
				drawRect(126, 92, 24, 29, ST7735_GREEN);
 8004348:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	231d      	movs	r3, #29
 8004350:	2218      	movs	r2, #24
 8004352:	215c      	movs	r1, #92	; 0x5c
 8004354:	207e      	movs	r0, #126	; 0x7e
 8004356:	f7ff f8f3 	bl	8003540 <drawRect>
			}
		}

		if (bits & (BUTTON_UP_BIT | BUTTON_DOWN_BIT)) {
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0318 	and.w	r3, r3, #24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <vUpdate_Screen_Handler+0x2a8>
			// WRITE PREVIOUS VOL COUNTER IN BLACK AND THEN THE NEW IN RED

			xEventGroupClearBits(buttonEventGroup, BUTTON_FOR_BIT);
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fda0 	bl	8001eb0 <xEventGroupClearBits>
			xEventGroupClearBits(buttonEventGroup, BUTTON_FOR_BIT);
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fd9a 	bl	8001eb0 <xEventGroupClearBits>
		}

		if (bits & BUTTON_PP_BIT) {
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d059      	beq.n	800443a <vUpdate_Screen_Handler+0x366>

			xEventGroupClearBits(buttonEventGroup, BUTTON_PP_BIT);
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <vUpdate_Screen_Handler+0x31c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2104      	movs	r1, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd fd8f 	bl	8001eb0 <xEventGroupClearBits>
			if (BSY) {
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <vUpdate_Screen_Handler+0x324>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d030      	beq.n	80043fc <vUpdate_Screen_Handler+0x328>
				fillTriangle(91, 106, 69, 84, 69, 128, ST7735_BLACK);
 800439a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2345      	movs	r3, #69	; 0x45
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2354      	movs	r3, #84	; 0x54
 80043aa:	2245      	movs	r2, #69	; 0x45
 80043ac:	216a      	movs	r1, #106	; 0x6a
 80043ae:	205b      	movs	r0, #91	; 0x5b
 80043b0:	f7ff f907 	bl	80035c2 <fillTriangle>
				fillRect(69, 84, 5, 44, ST7735_RED);
 80043b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	232c      	movs	r3, #44	; 0x2c
 80043bc:	2205      	movs	r2, #5
 80043be:	2154      	movs	r1, #84	; 0x54
 80043c0:	2045      	movs	r0, #69	; 0x45
 80043c2:	f7fe ffa0 	bl	8003306 <fillRect>
				fillRect(86, 84, 5, 44, ST7735_RED);
 80043c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	232c      	movs	r3, #44	; 0x2c
 80043ce:	2205      	movs	r2, #5
 80043d0:	2154      	movs	r1, #84	; 0x54
 80043d2:	2056      	movs	r0, #86	; 0x56
 80043d4:	f7fe ff97 	bl	8003306 <fillRect>
 80043d8:	e02f      	b.n	800443a <vUpdate_Screen_Handler+0x366>
 80043da:	bf00      	nop
 80043dc:	20004609 	.word	0x20004609
 80043e0:	20000008 	.word	0x20000008
 80043e4:	080052d4 	.word	0x080052d4
 80043e8:	080052d8 	.word	0x080052d8
 80043ec:	20000010 	.word	0x20000010
 80043f0:	20004618 	.word	0x20004618
 80043f4:	20004608 	.word	0x20004608
 80043f8:	2000460a 	.word	0x2000460a
			}

			else {
				fillRect(69, 84, 5, 44, ST7735_BLACK);
 80043fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	232c      	movs	r3, #44	; 0x2c
 8004404:	2205      	movs	r2, #5
 8004406:	2154      	movs	r1, #84	; 0x54
 8004408:	2045      	movs	r0, #69	; 0x45
 800440a:	f7fe ff7c 	bl	8003306 <fillRect>
				fillRect(86, 84, 5, 44, ST7735_BLACK);
 800440e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	232c      	movs	r3, #44	; 0x2c
 8004416:	2205      	movs	r2, #5
 8004418:	2154      	movs	r1, #84	; 0x54
 800441a:	2056      	movs	r0, #86	; 0x56
 800441c:	f7fe ff73 	bl	8003306 <fillRect>
				fillTriangle(91, 106, 69, 84, 69, 128, ST7735_RED);
 8004420:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	2345      	movs	r3, #69	; 0x45
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2354      	movs	r3, #84	; 0x54
 8004430:	2245      	movs	r2, #69	; 0x45
 8004432:	216a      	movs	r1, #106	; 0x6a
 8004434:	205b      	movs	r0, #91	; 0x5b
 8004436:	f7ff f8c4 	bl	80035c2 <fillTriangle>
			}
		}

		if (Prev_Track_Counter != Track_Counter) {
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <vUpdate_Screen_Handler+0x454>)
 800443c:	f993 3000 	ldrsb.w	r3, [r3]
 8004440:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004444:	429a      	cmp	r2, r3
 8004446:	d02a      	beq.n	800449e <vUpdate_Screen_Handler+0x3ca>
			ST7735_WriteString(9, 25, getTrackName(Prev_Track_Counter),
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd14 	bl	8003e78 <getTrackName>
 8004450:	4601      	mov	r1, r0
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <vUpdate_Screen_Handler+0x458>)
 8004454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	9200      	str	r2, [sp, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	460a      	mov	r2, r1
 8004468:	2119      	movs	r1, #25
 800446a:	2009      	movs	r0, #9
 800446c:	f7ff fc35 	bl	8003cda <ST7735_WriteString>
					Font_11x18,
					ST7735_BLACK, ST7735_BLACK);

			ST7735_WriteString(9, 25, getTrackName(Track_Counter), Font_11x18,
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <vUpdate_Screen_Handler+0x454>)
 8004472:	f993 3000 	ldrsb.w	r3, [r3]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fcfd 	bl	8003e78 <getTrackName>
 800447e:	4601      	mov	r1, r0
 8004480:	4b2a      	ldr	r3, [pc, #168]	; (800452c <vUpdate_Screen_Handler+0x458>)
 8004482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004486:	9202      	str	r2, [sp, #8]
 8004488:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800448c:	9201      	str	r2, [sp, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	460a      	mov	r2, r1
 8004496:	2119      	movs	r1, #25
 8004498:	2009      	movs	r0, #9
 800449a:	f7ff fc1e 	bl	8003cda <ST7735_WriteString>
			ST7735_RED, ST7735_BLACK);

			//update_track = 0;
		}

		if (Prev_Vol_Counter != Vol_Counter) {
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <vUpdate_Screen_Handler+0x45c>)
 80044a0:	f993 3000 	ldrsb.w	r3, [r3]
 80044a4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d032      	beq.n	8004512 <vUpdate_Screen_Handler+0x43e>
			char str[4];
			snprintf(str, sizeof(str), "%d", Prev_Vol_Counter);
 80044ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80044b0:	f107 000c 	add.w	r0, r7, #12
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <vUpdate_Screen_Handler+0x460>)
 80044b6:	2104      	movs	r1, #4
 80044b8:	f000 fab2 	bl	8004a20 <sniprintf>
			ST7735_WriteString(130, 5, str, Font_11x18, ST7735_BLACK,
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <vUpdate_Screen_Handler+0x458>)
 80044be:	f107 010c 	add.w	r1, r7, #12
 80044c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c6:	9202      	str	r2, [sp, #8]
 80044c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044cc:	9201      	str	r2, [sp, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	460a      	mov	r2, r1
 80044d6:	2105      	movs	r1, #5
 80044d8:	2082      	movs	r0, #130	; 0x82
 80044da:	f7ff fbfe 	bl	8003cda <ST7735_WriteString>
					ST7735_BLACK);
			snprintf(str, sizeof(str), "%d", Vol_Counter);
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <vUpdate_Screen_Handler+0x45c>)
 80044e0:	f993 3000 	ldrsb.w	r3, [r3]
 80044e4:	f107 000c 	add.w	r0, r7, #12
 80044e8:	4a12      	ldr	r2, [pc, #72]	; (8004534 <vUpdate_Screen_Handler+0x460>)
 80044ea:	2104      	movs	r1, #4
 80044ec:	f000 fa98 	bl	8004a20 <sniprintf>
			ST7735_WriteString(130, 5, str, Font_11x18, ST7735_RED,
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <vUpdate_Screen_Handler+0x458>)
 80044f2:	f107 010c 	add.w	r1, r7, #12
 80044f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fa:	9202      	str	r2, [sp, #8]
 80044fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	9200      	str	r2, [sp, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	460a      	mov	r2, r1
 800450a:	2105      	movs	r1, #5
 800450c:	2082      	movs	r0, #130	; 0x82
 800450e:	f7ff fbe4 	bl	8003cda <ST7735_WriteString>
					ST7735_BLACK);
		}
		Prev_Track_Counter = Track_Counter;
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <vUpdate_Screen_Handler+0x454>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	75fb      	strb	r3, [r7, #23]
		Prev_Vol_Counter = Vol_Counter;
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <vUpdate_Screen_Handler+0x45c>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	75bb      	strb	r3, [r7, #22]

		vTaskDelay(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f7fd ff46 	bl	80023b0 <vTaskDelay>
	for (;;) {
 8004524:	e66a      	b.n	80041fc <vUpdate_Screen_Handler+0x128>
 8004526:	bf00      	nop
 8004528:	20004609 	.word	0x20004609
 800452c:	20000008 	.word	0x20000008
 8004530:	20000010 	.word	0x20000010
 8004534:	080052dc 	.word	0x080052dc

08004538 <vMP3_Player_Handler>:

	}
}
void vMP3_Player_Handler(void *params) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
	uint8_t prev_busy = BSY;
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <vMP3_Player_Handler+0x12c>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		prev_busy = BSY;
 8004546:	4b47      	ldr	r3, [pc, #284]	; (8004664 <vMP3_Player_Handler+0x12c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	73fb      	strb	r3, [r7, #15]
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	4846      	ldr	r0, [pc, #280]	; (8004668 <vMP3_Player_Handler+0x130>)
 8004550:	f7fc fe81 	bl	8001256 <MCAL_GPIO_ReadPin>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <vMP3_Player_Handler+0x2a>
			BSY = 1;
 800455a:	4b42      	ldr	r3, [pc, #264]	; (8004664 <vMP3_Player_Handler+0x12c>)
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e002      	b.n	8004568 <vMP3_Player_Handler+0x30>
		} else {
			BSY = 0;
 8004562:	4b40      	ldr	r3, [pc, #256]	; (8004664 <vMP3_Player_Handler+0x12c>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
		}

		if (prev_busy != BSY) {
 8004568:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <vMP3_Player_Handler+0x12c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	429a      	cmp	r2, r3
 8004570:	d005      	beq.n	800457e <vMP3_Player_Handler+0x46>
			xEventGroupSetBits(buttonEventGroup, BUTTON_PP_BIT);
 8004572:	4b3e      	ldr	r3, [pc, #248]	; (800466c <vMP3_Player_Handler+0x134>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2104      	movs	r1, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7fd fcb3 	bl	8001ee4 <xEventGroupSetBits>
		}

		EventBits_t bits = xEventGroupWaitBits(buttonEventGroup_M,
 800457e:	4b3c      	ldr	r3, [pc, #240]	; (8004670 <vMP3_Player_Handler+0x138>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	2200      	movs	r2, #0
 800458a:	2107      	movs	r1, #7
 800458c:	f7fd fc06 	bl	8001d9c <xEventGroupWaitBits>
 8004590:	60b8      	str	r0, [r7, #8]
		BUTTON_ACT_BIT_M | BUTTON_UP_BIT_M | BUTTON_DOWN_BIT_M,
		pdFALSE, pdFALSE, 1);

		if (bits & BUTTON_ACT_BIT_M) {
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d046      	beq.n	800462a <vMP3_Player_Handler+0xf2>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_ACT_BIT_M);
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <vMP3_Player_Handler+0x138>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fc84 	bl	8001eb0 <xEventGroupClearBits>
			if (Menu_Counter == 0) {
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <vMP3_Player_Handler+0x13c>)
 80045aa:	f993 3000 	ldrsb.w	r3, [r3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <vMP3_Player_Handler+0x92>
				HAL_DF_Previous();
 80045b2:	f7ff f9c8 	bl	8003946 <HAL_DF_Previous>
				Track_Counter--;
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <vMP3_Player_Handler+0x140>)
 80045b8:	f993 3000 	ldrsb.w	r3, [r3]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	b25a      	sxtb	r2, r3
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <vMP3_Player_Handler+0x140>)
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e01e      	b.n	8004608 <vMP3_Player_Handler+0xd0>
				//update_track = 1;
			}

			else if (Menu_Counter == 2) {
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <vMP3_Player_Handler+0x13c>)
 80045cc:	f993 3000 	ldrsb.w	r3, [r3]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d10b      	bne.n	80045ec <vMP3_Player_Handler+0xb4>
				HAL_DF_Next();
 80045d4:	f7ff f9a5 	bl	8003922 <HAL_DF_Next>
				Track_Counter++;
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <vMP3_Player_Handler+0x140>)
 80045da:	f993 3000 	ldrsb.w	r3, [r3]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	b25a      	sxtb	r2, r3
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <vMP3_Player_Handler+0x140>)
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e00d      	b.n	8004608 <vMP3_Player_Handler+0xd0>
				//update_track = 1;
			} else if (Menu_Counter == 1) {
 80045ec:	4b21      	ldr	r3, [pc, #132]	; (8004674 <vMP3_Player_Handler+0x13c>)
 80045ee:	f993 3000 	ldrsb.w	r3, [r3]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <vMP3_Player_Handler+0xd0>
				if (BSY) {
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <vMP3_Player_Handler+0x12c>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <vMP3_Player_Handler+0xcc>
					HAL_DF_Pause();
 80045fe:	f7ff f999 	bl	8003934 <HAL_DF_Pause>
 8004602:	e001      	b.n	8004608 <vMP3_Player_Handler+0xd0>
				} else {
					HAL_DF_Playback();
 8004604:	f7ff f9a8 	bl	8003958 <HAL_DF_Playback>
				}
			}

			if (Track_Counter < 0) {
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <vMP3_Player_Handler+0x140>)
 800460a:	f993 3000 	ldrsb.w	r3, [r3]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da03      	bge.n	800461a <vMP3_Player_Handler+0xe2>
				Track_Counter = MAX_TRACK_NUM - 1;
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <vMP3_Player_Handler+0x140>)
 8004614:	2203      	movs	r2, #3
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e007      	b.n	800462a <vMP3_Player_Handler+0xf2>
			} else if (Track_Counter > MAX_TRACK_NUM - 1) {
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <vMP3_Player_Handler+0x140>)
 800461c:	f993 3000 	ldrsb.w	r3, [r3]
 8004620:	2b03      	cmp	r3, #3
 8004622:	dd02      	ble.n	800462a <vMP3_Player_Handler+0xf2>
				Track_Counter = 0;
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <vMP3_Player_Handler+0x140>)
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
			}
		}

		if (bits & (BUTTON_DOWN_BIT_M | BUTTON_UP_BIT_M)) {
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 0306 	and.w	r3, r3, #6
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <vMP3_Player_Handler+0x122>
			HAL_DF_SpecifyVolume(Vol_Counter);
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <vMP3_Player_Handler+0x144>)
 8004636:	f993 3000 	ldrsb.w	r3, [r3]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f994 	bl	800396a <HAL_DF_SpecifyVolume>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vMP3_Player_Handler+0x138>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd fc31 	bl	8001eb0 <xEventGroupClearBits>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <vMP3_Player_Handler+0x138>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2104      	movs	r1, #4
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fc2b 	bl	8001eb0 <xEventGroupClearBits>
		}
		vTaskDelay(20);
 800465a:	2014      	movs	r0, #20
 800465c:	f7fd fea8 	bl	80023b0 <vTaskDelay>
	for (;;) {
 8004660:	e771      	b.n	8004546 <vMP3_Player_Handler+0xe>
 8004662:	bf00      	nop
 8004664:	2000460a 	.word	0x2000460a
 8004668:	40010c00 	.word	0x40010c00
 800466c:	20004618 	.word	0x20004618
 8004670:	2000461c 	.word	0x2000461c
 8004674:	20004608 	.word	0x20004608
 8004678:	20004609 	.word	0x20004609
 800467c:	20000010 	.word	0x20000010

08004680 <vButton_Handler>:
	}
}
void vButton_Handler(void *params) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

	for (;;) {
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	4859      	ldr	r0, [pc, #356]	; (80047f0 <vButton_Handler+0x170>)
 800468c:	f7fc fde3 	bl	8001256 <MCAL_GPIO_ReadPin>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <vButton_Handler+0x34>
			xEventGroupSetBits(buttonEventGroup, BUTTON_FOR_BIT);
 8004696:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <vButton_Handler+0x174>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fc21 	bl	8001ee4 <xEventGroupSetBits>
			Menu_Counter++;
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <vButton_Handler+0x178>)
 80046a4:	f993 3000 	ldrsb.w	r3, [r3]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	b25a      	sxtb	r2, r3
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <vButton_Handler+0x178>)
 80046b2:	701a      	strb	r2, [r3, #0]
		}
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {
 80046b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046b8:	484d      	ldr	r0, [pc, #308]	; (80047f0 <vButton_Handler+0x170>)
 80046ba:	f7fc fdcc 	bl	8001256 <MCAL_GPIO_ReadPin>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <vButton_Handler+0x50>
			xEventGroupSetBits(buttonEventGroup_M, BUTTON_ACT_BIT_M);
 80046c4:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <vButton_Handler+0x17c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fc0a 	bl	8001ee4 <xEventGroupSetBits>
		}
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) {
 80046d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046d4:	4846      	ldr	r0, [pc, #280]	; (80047f0 <vButton_Handler+0x170>)
 80046d6:	f7fc fdbe 	bl	8001256 <MCAL_GPIO_ReadPin>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10e      	bne.n	80046fe <vButton_Handler+0x7e>
			xEventGroupSetBits(buttonEventGroup, BUTTON_BACK_BIT);
 80046e0:	4b44      	ldr	r3, [pc, #272]	; (80047f4 <vButton_Handler+0x174>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fbfc 	bl	8001ee4 <xEventGroupSetBits>
			Menu_Counter--;
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <vButton_Handler+0x178>)
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	b25a      	sxtb	r2, r3
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <vButton_Handler+0x178>)
 80046fc:	701a      	strb	r2, [r3, #0]
		}
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80046fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004702:	483f      	ldr	r0, [pc, #252]	; (8004800 <vButton_Handler+0x180>)
 8004704:	f7fc fda7 	bl	8001256 <MCAL_GPIO_ReadPin>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d114      	bne.n	8004738 <vButton_Handler+0xb8>
			xEventGroupSetBits(buttonEventGroup, BUTTON_UP_BIT);
 800470e:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <vButton_Handler+0x174>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2108      	movs	r1, #8
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fbe5 	bl	8001ee4 <xEventGroupSetBits>
			xEventGroupSetBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 800471a:	4b38      	ldr	r3, [pc, #224]	; (80047fc <vButton_Handler+0x17c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f7fd fbdf 	bl	8001ee4 <xEventGroupSetBits>
			Vol_Counter++;
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <vButton_Handler+0x184>)
 8004728:	f993 3000 	ldrsb.w	r3, [r3]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3301      	adds	r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	b25a      	sxtb	r2, r3
 8004734:	4b33      	ldr	r3, [pc, #204]	; (8004804 <vButton_Handler+0x184>)
 8004736:	701a      	strb	r2, [r3, #0]
		}
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8004738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800473c:	4830      	ldr	r0, [pc, #192]	; (8004800 <vButton_Handler+0x180>)
 800473e:	f7fc fd8a 	bl	8001256 <MCAL_GPIO_ReadPin>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d114      	bne.n	8004772 <vButton_Handler+0xf2>
			xEventGroupSetBits(buttonEventGroup, BUTTON_DOWN_BIT);
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <vButton_Handler+0x174>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2110      	movs	r1, #16
 800474e:	4618      	mov	r0, r3
 8004750:	f7fd fbc8 	bl	8001ee4 <xEventGroupSetBits>
			xEventGroupSetBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 8004754:	4b29      	ldr	r3, [pc, #164]	; (80047fc <vButton_Handler+0x17c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2104      	movs	r1, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd fbc2 	bl	8001ee4 <xEventGroupSetBits>
			Vol_Counter--;
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <vButton_Handler+0x184>)
 8004762:	f993 3000 	ldrsb.w	r3, [r3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	b25a      	sxtb	r2, r3
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <vButton_Handler+0x184>)
 8004770:	701a      	strb	r2, [r3, #0]
		}

		// Sliding Constraint
		if (Menu_Counter < 0) {
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <vButton_Handler+0x178>)
 8004774:	f993 3000 	ldrsb.w	r3, [r3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da03      	bge.n	8004784 <vButton_Handler+0x104>
			Menu_Counter = 2;
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <vButton_Handler+0x178>)
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <vButton_Handler+0x114>
		} else if (Menu_Counter > 2) {
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <vButton_Handler+0x178>)
 8004786:	f993 3000 	ldrsb.w	r3, [r3]
 800478a:	2b02      	cmp	r3, #2
 800478c:	dd02      	ble.n	8004794 <vButton_Handler+0x114>
			Menu_Counter = 0;
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <vButton_Handler+0x178>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
		}

		//Volume Constraint
		if (Vol_Counter < 0) {
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <vButton_Handler+0x184>)
 8004796:	f993 3000 	ldrsb.w	r3, [r3]
 800479a:	2b00      	cmp	r3, #0
 800479c:	da0f      	bge.n	80047be <vButton_Handler+0x13e>
			Vol_Counter = 0;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <vButton_Handler+0x184>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
			xEventGroupClearBits(buttonEventGroup, BUTTON_DOWN_BIT);
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <vButton_Handler+0x174>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2110      	movs	r1, #16
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fd fb80 	bl	8001eb0 <xEventGroupClearBits>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_DOWN_BIT_M);
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <vButton_Handler+0x17c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2104      	movs	r1, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fb7a 	bl	8001eb0 <xEventGroupClearBits>
 80047bc:	e013      	b.n	80047e6 <vButton_Handler+0x166>
		} else if (Vol_Counter > 30) {
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <vButton_Handler+0x184>)
 80047c0:	f993 3000 	ldrsb.w	r3, [r3]
 80047c4:	2b1e      	cmp	r3, #30
 80047c6:	dd0e      	ble.n	80047e6 <vButton_Handler+0x166>
			Vol_Counter = 30;
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <vButton_Handler+0x184>)
 80047ca:	221e      	movs	r2, #30
 80047cc:	701a      	strb	r2, [r3, #0]
			xEventGroupClearBits(buttonEventGroup, BUTTON_UP_BIT);
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <vButton_Handler+0x174>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2108      	movs	r1, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd fb6b 	bl	8001eb0 <xEventGroupClearBits>
			xEventGroupClearBits(buttonEventGroup_M, BUTTON_UP_BIT_M);
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <vButton_Handler+0x17c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2102      	movs	r1, #2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd fb65 	bl	8001eb0 <xEventGroupClearBits>
		}

		// Mainly to avoid bouncing
		vTaskDelay(200);
 80047e6:	20c8      	movs	r0, #200	; 0xc8
 80047e8:	f7fd fde2 	bl	80023b0 <vTaskDelay>
		if (MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 80047ec:	e74c      	b.n	8004688 <vButton_Handler+0x8>
 80047ee:	bf00      	nop
 80047f0:	40010c00 	.word	0x40010c00
 80047f4:	20004618 	.word	0x20004618
 80047f8:	20004608 	.word	0x20004608
 80047fc:	2000461c 	.word	0x2000461c
 8004800:	40010800 	.word	0x40010800
 8004804:	20000010 	.word	0x20000010

08004808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <_sbrk+0x5c>)
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <_sbrk+0x60>)
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800481c:	4b13      	ldr	r3, [pc, #76]	; (800486c <_sbrk+0x64>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <_sbrk+0x64>)
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <_sbrk+0x68>)
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <_sbrk+0x64>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d207      	bcs.n	8004848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004838:	f000 f93e 	bl	8004ab8 <__errno>
 800483c:	4603      	mov	r3, r0
 800483e:	220c      	movs	r2, #12
 8004840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	e009      	b.n	800485c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <_sbrk+0x64>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <_sbrk+0x64>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <_sbrk+0x64>)
 8004858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20005000 	.word	0x20005000
 8004868:	00000400 	.word	0x00000400
 800486c:	20004620 	.word	0x20004620
 8004870:	20004770 	.word	0x20004770

08004874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004874:	480d      	ldr	r0, [pc, #52]	; (80048ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004876:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004878:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800487c:	480c      	ldr	r0, [pc, #48]	; (80048b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800487e:	490d      	ldr	r1, [pc, #52]	; (80048b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <LoopForever+0xe>)
  movs r3, #0
 8004882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004884:	e002      	b.n	800488c <LoopCopyDataInit>

08004886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800488a:	3304      	adds	r3, #4

0800488c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800488c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800488e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004890:	d3f9      	bcc.n	8004886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004894:	4c0a      	ldr	r4, [pc, #40]	; (80048c0 <LoopForever+0x16>)
  movs r3, #0
 8004896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004898:	e001      	b.n	800489e <LoopFillZerobss>

0800489a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800489a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800489c:	3204      	adds	r2, #4

0800489e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800489e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048a0:	d3fb      	bcc.n	800489a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048a2:	f000 f90f 	bl	8004ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048a6:	f7ff faf7 	bl	8003e98 <main>

080048aa <LoopForever>:

LoopForever:
  b LoopForever
 80048aa:	e7fe      	b.n	80048aa <LoopForever>
  ldr   r0, =_estack
 80048ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80048b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80048b8:	080060f0 	.word	0x080060f0
  ldr r2, =_sbss
 80048bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80048c0:	2000476c 	.word	0x2000476c

080048c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048c4:	e7fe      	b.n	80048c4 <ADC1_2_IRQHandler>
	...

080048c8 <sbrk_aligned>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0e      	ldr	r6, [pc, #56]	; (8004904 <sbrk_aligned+0x3c>)
 80048cc:	460c      	mov	r4, r1
 80048ce:	6831      	ldr	r1, [r6, #0]
 80048d0:	4605      	mov	r5, r0
 80048d2:	b911      	cbnz	r1, 80048da <sbrk_aligned+0x12>
 80048d4:	f000 f8e0 	bl	8004a98 <_sbrk_r>
 80048d8:	6030      	str	r0, [r6, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 f8db 	bl	8004a98 <_sbrk_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d00a      	beq.n	80048fc <sbrk_aligned+0x34>
 80048e6:	1cc4      	adds	r4, r0, #3
 80048e8:	f024 0403 	bic.w	r4, r4, #3
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d007      	beq.n	8004900 <sbrk_aligned+0x38>
 80048f0:	1a21      	subs	r1, r4, r0
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f8d0 	bl	8004a98 <_sbrk_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d101      	bne.n	8004900 <sbrk_aligned+0x38>
 80048fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004900:	4620      	mov	r0, r4
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	20004628 	.word	0x20004628

08004908 <_malloc_r>:
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800490c:	1ccd      	adds	r5, r1, #3
 800490e:	f025 0503 	bic.w	r5, r5, #3
 8004912:	3508      	adds	r5, #8
 8004914:	2d0c      	cmp	r5, #12
 8004916:	bf38      	it	cc
 8004918:	250c      	movcc	r5, #12
 800491a:	2d00      	cmp	r5, #0
 800491c:	4607      	mov	r7, r0
 800491e:	db01      	blt.n	8004924 <_malloc_r+0x1c>
 8004920:	42a9      	cmp	r1, r5
 8004922:	d905      	bls.n	8004930 <_malloc_r+0x28>
 8004924:	230c      	movs	r3, #12
 8004926:	2600      	movs	r6, #0
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4630      	mov	r0, r6
 800492c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a04 <_malloc_r+0xfc>
 8004934:	f000 f868 	bl	8004a08 <__malloc_lock>
 8004938:	f8d8 3000 	ldr.w	r3, [r8]
 800493c:	461c      	mov	r4, r3
 800493e:	bb5c      	cbnz	r4, 8004998 <_malloc_r+0x90>
 8004940:	4629      	mov	r1, r5
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ffc0 	bl	80048c8 <sbrk_aligned>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	4604      	mov	r4, r0
 800494c:	d155      	bne.n	80049fa <_malloc_r+0xf2>
 800494e:	f8d8 4000 	ldr.w	r4, [r8]
 8004952:	4626      	mov	r6, r4
 8004954:	2e00      	cmp	r6, #0
 8004956:	d145      	bne.n	80049e4 <_malloc_r+0xdc>
 8004958:	2c00      	cmp	r4, #0
 800495a:	d048      	beq.n	80049ee <_malloc_r+0xe6>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	4631      	mov	r1, r6
 8004960:	4638      	mov	r0, r7
 8004962:	eb04 0903 	add.w	r9, r4, r3
 8004966:	f000 f897 	bl	8004a98 <_sbrk_r>
 800496a:	4581      	cmp	r9, r0
 800496c:	d13f      	bne.n	80049ee <_malloc_r+0xe6>
 800496e:	6821      	ldr	r1, [r4, #0]
 8004970:	4638      	mov	r0, r7
 8004972:	1a6d      	subs	r5, r5, r1
 8004974:	4629      	mov	r1, r5
 8004976:	f7ff ffa7 	bl	80048c8 <sbrk_aligned>
 800497a:	3001      	adds	r0, #1
 800497c:	d037      	beq.n	80049ee <_malloc_r+0xe6>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	442b      	add	r3, r5
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	f8d8 3000 	ldr.w	r3, [r8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d038      	beq.n	80049fe <_malloc_r+0xf6>
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	42a2      	cmp	r2, r4
 8004990:	d12b      	bne.n	80049ea <_malloc_r+0xe2>
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	e00f      	b.n	80049b8 <_malloc_r+0xb0>
 8004998:	6822      	ldr	r2, [r4, #0]
 800499a:	1b52      	subs	r2, r2, r5
 800499c:	d41f      	bmi.n	80049de <_malloc_r+0xd6>
 800499e:	2a0b      	cmp	r2, #11
 80049a0:	d917      	bls.n	80049d2 <_malloc_r+0xca>
 80049a2:	1961      	adds	r1, r4, r5
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	6025      	str	r5, [r4, #0]
 80049a8:	bf18      	it	ne
 80049aa:	6059      	strne	r1, [r3, #4]
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	bf08      	it	eq
 80049b0:	f8c8 1000 	streq.w	r1, [r8]
 80049b4:	5162      	str	r2, [r4, r5]
 80049b6:	604b      	str	r3, [r1, #4]
 80049b8:	4638      	mov	r0, r7
 80049ba:	f104 060b 	add.w	r6, r4, #11
 80049be:	f000 f829 	bl	8004a14 <__malloc_unlock>
 80049c2:	f026 0607 	bic.w	r6, r6, #7
 80049c6:	1d23      	adds	r3, r4, #4
 80049c8:	1af2      	subs	r2, r6, r3
 80049ca:	d0ae      	beq.n	800492a <_malloc_r+0x22>
 80049cc:	1b9b      	subs	r3, r3, r6
 80049ce:	50a3      	str	r3, [r4, r2]
 80049d0:	e7ab      	b.n	800492a <_malloc_r+0x22>
 80049d2:	42a3      	cmp	r3, r4
 80049d4:	6862      	ldr	r2, [r4, #4]
 80049d6:	d1dd      	bne.n	8004994 <_malloc_r+0x8c>
 80049d8:	f8c8 2000 	str.w	r2, [r8]
 80049dc:	e7ec      	b.n	80049b8 <_malloc_r+0xb0>
 80049de:	4623      	mov	r3, r4
 80049e0:	6864      	ldr	r4, [r4, #4]
 80049e2:	e7ac      	b.n	800493e <_malloc_r+0x36>
 80049e4:	4634      	mov	r4, r6
 80049e6:	6876      	ldr	r6, [r6, #4]
 80049e8:	e7b4      	b.n	8004954 <_malloc_r+0x4c>
 80049ea:	4613      	mov	r3, r2
 80049ec:	e7cc      	b.n	8004988 <_malloc_r+0x80>
 80049ee:	230c      	movs	r3, #12
 80049f0:	4638      	mov	r0, r7
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	f000 f80e 	bl	8004a14 <__malloc_unlock>
 80049f8:	e797      	b.n	800492a <_malloc_r+0x22>
 80049fa:	6025      	str	r5, [r4, #0]
 80049fc:	e7dc      	b.n	80049b8 <_malloc_r+0xb0>
 80049fe:	605b      	str	r3, [r3, #4]
 8004a00:	deff      	udf	#255	; 0xff
 8004a02:	bf00      	nop
 8004a04:	20004624 	.word	0x20004624

08004a08 <__malloc_lock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__malloc_lock+0x8>)
 8004a0a:	f000 b87f 	b.w	8004b0c <__retarget_lock_acquire_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20004768 	.word	0x20004768

08004a14 <__malloc_unlock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__malloc_unlock+0x8>)
 8004a16:	f000 b87a 	b.w	8004b0e <__retarget_lock_release_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	20004768 	.word	0x20004768

08004a20 <sniprintf>:
 8004a20:	b40c      	push	{r2, r3}
 8004a22:	b530      	push	{r4, r5, lr}
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <sniprintf+0x64>)
 8004a26:	1e0c      	subs	r4, r1, #0
 8004a28:	681d      	ldr	r5, [r3, #0]
 8004a2a:	b09d      	sub	sp, #116	; 0x74
 8004a2c:	da08      	bge.n	8004a40 <sniprintf+0x20>
 8004a2e:	238b      	movs	r3, #139	; 0x8b
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	602b      	str	r3, [r5, #0]
 8004a36:	b01d      	add	sp, #116	; 0x74
 8004a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a3c:	b002      	add	sp, #8
 8004a3e:	4770      	bx	lr
 8004a40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a48:	bf0c      	ite	eq
 8004a4a:	4623      	moveq	r3, r4
 8004a4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	9307      	str	r3, [sp, #28]
 8004a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a58:	9002      	str	r0, [sp, #8]
 8004a5a:	9006      	str	r0, [sp, #24]
 8004a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a60:	4628      	mov	r0, r5
 8004a62:	ab21      	add	r3, sp, #132	; 0x84
 8004a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a66:	a902      	add	r1, sp, #8
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	f000 f901 	bl	8004c70 <_svfiprintf_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	bfbc      	itt	lt
 8004a72:	238b      	movlt	r3, #139	; 0x8b
 8004a74:	602b      	strlt	r3, [r5, #0]
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d0dd      	beq.n	8004a36 <sniprintf+0x16>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	9b02      	ldr	r3, [sp, #8]
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e7d9      	b.n	8004a36 <sniprintf+0x16>
 8004a82:	bf00      	nop
 8004a84:	20000070 	.word	0x20000070

08004a88 <memset>:
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4402      	add	r2, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <_sbrk_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4d05      	ldr	r5, [pc, #20]	; (8004ab4 <_sbrk_r+0x1c>)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7ff feb0 	bl	8004808 <_sbrk>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_sbrk_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_sbrk_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20004764 	.word	0x20004764

08004ab8 <__errno>:
 8004ab8:	4b01      	ldr	r3, [pc, #4]	; (8004ac0 <__errno+0x8>)
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000070 	.word	0x20000070

08004ac4 <__libc_init_array>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	4d0c      	ldr	r5, [pc, #48]	; (8004afc <__libc_init_array+0x38>)
 8004aca:	4c0d      	ldr	r4, [pc, #52]	; (8004b00 <__libc_init_array+0x3c>)
 8004acc:	1b64      	subs	r4, r4, r5
 8004ace:	10a4      	asrs	r4, r4, #2
 8004ad0:	42a6      	cmp	r6, r4
 8004ad2:	d109      	bne.n	8004ae8 <__libc_init_array+0x24>
 8004ad4:	f000 fbbe 	bl	8005254 <_init>
 8004ad8:	2600      	movs	r6, #0
 8004ada:	4d0a      	ldr	r5, [pc, #40]	; (8004b04 <__libc_init_array+0x40>)
 8004adc:	4c0a      	ldr	r4, [pc, #40]	; (8004b08 <__libc_init_array+0x44>)
 8004ade:	1b64      	subs	r4, r4, r5
 8004ae0:	10a4      	asrs	r4, r4, #2
 8004ae2:	42a6      	cmp	r6, r4
 8004ae4:	d105      	bne.n	8004af2 <__libc_init_array+0x2e>
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
 8004ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aec:	4798      	blx	r3
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7ee      	b.n	8004ad0 <__libc_init_array+0xc>
 8004af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af6:	4798      	blx	r3
 8004af8:	3601      	adds	r6, #1
 8004afa:	e7f2      	b.n	8004ae2 <__libc_init_array+0x1e>
 8004afc:	080060e8 	.word	0x080060e8
 8004b00:	080060e8 	.word	0x080060e8
 8004b04:	080060e8 	.word	0x080060e8
 8004b08:	080060ec 	.word	0x080060ec

08004b0c <__retarget_lock_acquire_recursive>:
 8004b0c:	4770      	bx	lr

08004b0e <__retarget_lock_release_recursive>:
 8004b0e:	4770      	bx	lr

08004b10 <memcpy>:
 8004b10:	440a      	add	r2, r1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b18:	d100      	bne.n	8004b1c <memcpy+0xc>
 8004b1a:	4770      	bx	lr
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b28:	d1f9      	bne.n	8004b1e <memcpy+0xe>
 8004b2a:	bd10      	pop	{r4, pc}

08004b2c <_free_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4605      	mov	r5, r0
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d040      	beq.n	8004bb6 <_free_r+0x8a>
 8004b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b38:	1f0c      	subs	r4, r1, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bfb8      	it	lt
 8004b3e:	18e4      	addlt	r4, r4, r3
 8004b40:	f7ff ff62 	bl	8004a08 <__malloc_lock>
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <_free_r+0x8c>)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	b933      	cbnz	r3, 8004b58 <_free_r+0x2c>
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	6014      	str	r4, [r2, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b54:	f7ff bf5e 	b.w	8004a14 <__malloc_unlock>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d908      	bls.n	8004b6e <_free_r+0x42>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	1821      	adds	r1, r4, r0
 8004b60:	428b      	cmp	r3, r1
 8004b62:	bf01      	itttt	eq
 8004b64:	6819      	ldreq	r1, [r3, #0]
 8004b66:	685b      	ldreq	r3, [r3, #4]
 8004b68:	1809      	addeq	r1, r1, r0
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	e7ed      	b.n	8004b4a <_free_r+0x1e>
 8004b6e:	461a      	mov	r2, r3
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b10b      	cbz	r3, 8004b78 <_free_r+0x4c>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d9fa      	bls.n	8004b6e <_free_r+0x42>
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	1850      	adds	r0, r2, r1
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d10b      	bne.n	8004b98 <_free_r+0x6c>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	4401      	add	r1, r0
 8004b84:	1850      	adds	r0, r2, r1
 8004b86:	4283      	cmp	r3, r0
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	d1e0      	bne.n	8004b4e <_free_r+0x22>
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4408      	add	r0, r1
 8004b92:	6010      	str	r0, [r2, #0]
 8004b94:	6053      	str	r3, [r2, #4]
 8004b96:	e7da      	b.n	8004b4e <_free_r+0x22>
 8004b98:	d902      	bls.n	8004ba0 <_free_r+0x74>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	e7d6      	b.n	8004b4e <_free_r+0x22>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	1821      	adds	r1, r4, r0
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	bf01      	itttt	eq
 8004ba8:	6819      	ldreq	r1, [r3, #0]
 8004baa:	685b      	ldreq	r3, [r3, #4]
 8004bac:	1809      	addeq	r1, r1, r0
 8004bae:	6021      	streq	r1, [r4, #0]
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	6054      	str	r4, [r2, #4]
 8004bb4:	e7cb      	b.n	8004b4e <_free_r+0x22>
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	20004624 	.word	0x20004624

08004bbc <__ssputs_r>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	461f      	mov	r7, r3
 8004bc2:	688e      	ldr	r6, [r1, #8]
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	42be      	cmp	r6, r7
 8004bc8:	460c      	mov	r4, r1
 8004bca:	4690      	mov	r8, r2
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	d82c      	bhi.n	8004c2a <__ssputs_r+0x6e>
 8004bd0:	898a      	ldrh	r2, [r1, #12]
 8004bd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd6:	d026      	beq.n	8004c26 <__ssputs_r+0x6a>
 8004bd8:	6965      	ldr	r5, [r4, #20]
 8004bda:	6909      	ldr	r1, [r1, #16]
 8004bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be0:	eba3 0901 	sub.w	r9, r3, r1
 8004be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be8:	1c7b      	adds	r3, r7, #1
 8004bea:	444b      	add	r3, r9
 8004bec:	106d      	asrs	r5, r5, #1
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	bf38      	it	cc
 8004bf2:	461d      	movcc	r5, r3
 8004bf4:	0553      	lsls	r3, r2, #21
 8004bf6:	d527      	bpl.n	8004c48 <__ssputs_r+0x8c>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7ff fe85 	bl	8004908 <_malloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b360      	cbz	r0, 8004c5c <__ssputs_r+0xa0>
 8004c02:	464a      	mov	r2, r9
 8004c04:	6921      	ldr	r1, [r4, #16]
 8004c06:	f7ff ff83 	bl	8004b10 <memcpy>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	6126      	str	r6, [r4, #16]
 8004c18:	444e      	add	r6, r9
 8004c1a:	6026      	str	r6, [r4, #0]
 8004c1c:	463e      	mov	r6, r7
 8004c1e:	6165      	str	r5, [r4, #20]
 8004c20:	eba5 0509 	sub.w	r5, r5, r9
 8004c24:	60a5      	str	r5, [r4, #8]
 8004c26:	42be      	cmp	r6, r7
 8004c28:	d900      	bls.n	8004c2c <__ssputs_r+0x70>
 8004c2a:	463e      	mov	r6, r7
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4641      	mov	r1, r8
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	f000 faaf 	bl	8005194 <memmove>
 8004c36:	2000      	movs	r0, #0
 8004c38:	68a3      	ldr	r3, [r4, #8]
 8004c3a:	1b9b      	subs	r3, r3, r6
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	4433      	add	r3, r6
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	462a      	mov	r2, r5
 8004c4a:	f000 facb 	bl	80051e4 <_realloc_r>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d1e0      	bne.n	8004c16 <__ssputs_r+0x5a>
 8004c54:	4650      	mov	r0, sl
 8004c56:	6921      	ldr	r1, [r4, #16]
 8004c58:	f7ff ff68 	bl	8004b2c <_free_r>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	f8ca 3000 	str.w	r3, [sl]
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	e7e9      	b.n	8004c44 <__ssputs_r+0x88>

08004c70 <_svfiprintf_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	4698      	mov	r8, r3
 8004c76:	898b      	ldrh	r3, [r1, #12]
 8004c78:	4607      	mov	r7, r0
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	4614      	mov	r4, r2
 8004c80:	b09d      	sub	sp, #116	; 0x74
 8004c82:	d50e      	bpl.n	8004ca2 <_svfiprintf_r+0x32>
 8004c84:	690b      	ldr	r3, [r1, #16]
 8004c86:	b963      	cbnz	r3, 8004ca2 <_svfiprintf_r+0x32>
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	f7ff fe3d 	bl	8004908 <_malloc_r>
 8004c8e:	6028      	str	r0, [r5, #0]
 8004c90:	6128      	str	r0, [r5, #16]
 8004c92:	b920      	cbnz	r0, 8004c9e <_svfiprintf_r+0x2e>
 8004c94:	230c      	movs	r3, #12
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e0d0      	b.n	8004e40 <_svfiprintf_r+0x1d0>
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	616b      	str	r3, [r5, #20]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cac:	2330      	movs	r3, #48	; 0x30
 8004cae:	f04f 0901 	mov.w	r9, #1
 8004cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004e58 <_svfiprintf_r+0x1e8>
 8004cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	469a      	mov	sl, r3
 8004cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc6:	b10a      	cbz	r2, 8004ccc <_svfiprintf_r+0x5c>
 8004cc8:	2a25      	cmp	r2, #37	; 0x25
 8004cca:	d1f9      	bne.n	8004cc0 <_svfiprintf_r+0x50>
 8004ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd0:	d00b      	beq.n	8004cea <_svfiprintf_r+0x7a>
 8004cd2:	465b      	mov	r3, fp
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ff6f 	bl	8004bbc <__ssputs_r>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f000 80a9 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce6:	445a      	add	r2, fp
 8004ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cea:	f89a 3000 	ldrb.w	r3, [sl]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80a1 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cfe:	f10a 0a01 	add.w	sl, sl, #1
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	9307      	str	r3, [sp, #28]
 8004d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d0c:	4654      	mov	r4, sl
 8004d0e:	2205      	movs	r2, #5
 8004d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d14:	4850      	ldr	r0, [pc, #320]	; (8004e58 <_svfiprintf_r+0x1e8>)
 8004d16:	f000 fa57 	bl	80051c8 <memchr>
 8004d1a:	9a04      	ldr	r2, [sp, #16]
 8004d1c:	b9d8      	cbnz	r0, 8004d56 <_svfiprintf_r+0xe6>
 8004d1e:	06d0      	lsls	r0, r2, #27
 8004d20:	bf44      	itt	mi
 8004d22:	2320      	movmi	r3, #32
 8004d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d28:	0711      	lsls	r1, r2, #28
 8004d2a:	bf44      	itt	mi
 8004d2c:	232b      	movmi	r3, #43	; 0x2b
 8004d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d32:	f89a 3000 	ldrb.w	r3, [sl]
 8004d36:	2b2a      	cmp	r3, #42	; 0x2a
 8004d38:	d015      	beq.n	8004d66 <_svfiprintf_r+0xf6>
 8004d3a:	4654      	mov	r4, sl
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f04f 0c0a 	mov.w	ip, #10
 8004d42:	9a07      	ldr	r2, [sp, #28]
 8004d44:	4621      	mov	r1, r4
 8004d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d4a:	3b30      	subs	r3, #48	; 0x30
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d94d      	bls.n	8004dec <_svfiprintf_r+0x17c>
 8004d50:	b1b0      	cbz	r0, 8004d80 <_svfiprintf_r+0x110>
 8004d52:	9207      	str	r2, [sp, #28]
 8004d54:	e014      	b.n	8004d80 <_svfiprintf_r+0x110>
 8004d56:	eba0 0308 	sub.w	r3, r0, r8
 8004d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	46a2      	mov	sl, r4
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	e7d2      	b.n	8004d0c <_svfiprintf_r+0x9c>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	1d19      	adds	r1, r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	9103      	str	r1, [sp, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfbb      	ittet	lt
 8004d72:	425b      	neglt	r3, r3
 8004d74:	f042 0202 	orrlt.w	r2, r2, #2
 8004d78:	9307      	strge	r3, [sp, #28]
 8004d7a:	9307      	strlt	r3, [sp, #28]
 8004d7c:	bfb8      	it	lt
 8004d7e:	9204      	strlt	r2, [sp, #16]
 8004d80:	7823      	ldrb	r3, [r4, #0]
 8004d82:	2b2e      	cmp	r3, #46	; 0x2e
 8004d84:	d10c      	bne.n	8004da0 <_svfiprintf_r+0x130>
 8004d86:	7863      	ldrb	r3, [r4, #1]
 8004d88:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8a:	d134      	bne.n	8004df6 <_svfiprintf_r+0x186>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	3402      	adds	r4, #2
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	9203      	str	r2, [sp, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004e5c <_svfiprintf_r+0x1ec>
 8004da4:	2203      	movs	r2, #3
 8004da6:	4650      	mov	r0, sl
 8004da8:	7821      	ldrb	r1, [r4, #0]
 8004daa:	f000 fa0d 	bl	80051c8 <memchr>
 8004dae:	b138      	cbz	r0, 8004dc0 <_svfiprintf_r+0x150>
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	eba0 000a 	sub.w	r0, r0, sl
 8004db8:	4082      	lsls	r2, r0
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc4:	2206      	movs	r2, #6
 8004dc6:	4826      	ldr	r0, [pc, #152]	; (8004e60 <_svfiprintf_r+0x1f0>)
 8004dc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dcc:	f000 f9fc 	bl	80051c8 <memchr>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d038      	beq.n	8004e46 <_svfiprintf_r+0x1d6>
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <_svfiprintf_r+0x1f4>)
 8004dd6:	bb1b      	cbnz	r3, 8004e20 <_svfiprintf_r+0x1b0>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	3307      	adds	r3, #7
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	3308      	adds	r3, #8
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de6:	4433      	add	r3, r6
 8004de8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dea:	e768      	b.n	8004cbe <_svfiprintf_r+0x4e>
 8004dec:	460c      	mov	r4, r1
 8004dee:	2001      	movs	r0, #1
 8004df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df4:	e7a6      	b.n	8004d44 <_svfiprintf_r+0xd4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	f04f 0c0a 	mov.w	ip, #10
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	3401      	adds	r4, #1
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e08:	3a30      	subs	r2, #48	; 0x30
 8004e0a:	2a09      	cmp	r2, #9
 8004e0c:	d903      	bls.n	8004e16 <_svfiprintf_r+0x1a6>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0c6      	beq.n	8004da0 <_svfiprintf_r+0x130>
 8004e12:	9105      	str	r1, [sp, #20]
 8004e14:	e7c4      	b.n	8004da0 <_svfiprintf_r+0x130>
 8004e16:	4604      	mov	r4, r0
 8004e18:	2301      	movs	r3, #1
 8004e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e1e:	e7f0      	b.n	8004e02 <_svfiprintf_r+0x192>
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <_svfiprintf_r+0x1f8>)
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	f3af 8000 	nop.w
 8004e30:	1c42      	adds	r2, r0, #1
 8004e32:	4606      	mov	r6, r0
 8004e34:	d1d6      	bne.n	8004de4 <_svfiprintf_r+0x174>
 8004e36:	89ab      	ldrh	r3, [r5, #12]
 8004e38:	065b      	lsls	r3, r3, #25
 8004e3a:	f53f af2d 	bmi.w	8004c98 <_svfiprintf_r+0x28>
 8004e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e40:	b01d      	add	sp, #116	; 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	ab03      	add	r3, sp, #12
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	462a      	mov	r2, r5
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <_svfiprintf_r+0x1f8>)
 8004e50:	a904      	add	r1, sp, #16
 8004e52:	f000 f87d 	bl	8004f50 <_printf_i>
 8004e56:	e7eb      	b.n	8004e30 <_svfiprintf_r+0x1c0>
 8004e58:	080060b3 	.word	0x080060b3
 8004e5c:	080060b9 	.word	0x080060b9
 8004e60:	080060bd 	.word	0x080060bd
 8004e64:	00000000 	.word	0x00000000
 8004e68:	08004bbd 	.word	0x08004bbd

08004e6c <_printf_common>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4616      	mov	r6, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	4607      	mov	r7, r0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bfb8      	it	lt
 8004e7e:	4613      	movlt	r3, r2
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8c:	b10a      	cbz	r2, 8004e92 <_printf_common+0x26>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	6833      	ldrmi	r3, [r6, #0]
 8004e9a:	3302      	addmi	r3, #2
 8004e9c:	6033      	strmi	r3, [r6, #0]
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	f015 0506 	ands.w	r5, r5, #6
 8004ea4:	d106      	bne.n	8004eb4 <_printf_common+0x48>
 8004ea6:	f104 0a19 	add.w	sl, r4, #25
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc2b      	bgt.n	8004f0c <_printf_common+0xa0>
 8004eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb8:	1e13      	subs	r3, r2, #0
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	0692      	lsls	r2, r2, #26
 8004ec2:	d430      	bmi.n	8004f26 <_printf_common+0xba>
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d023      	beq.n	8004f1a <_printf_common+0xae>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf14      	ite	ne
 8004ede:	2500      	movne	r5, #0
 8004ee0:	6833      	ldreq	r3, [r6, #0]
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	bf08      	it	eq
 8004ee8:	68e5      	ldreq	r5, [r4, #12]
 8004eea:	f104 041a 	add.w	r4, r4, #26
 8004eee:	bf08      	it	eq
 8004ef0:	1aed      	subeq	r5, r5, r3
 8004ef2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ef6:	bf08      	it	eq
 8004ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bfc4      	itt	gt
 8004f00:	1a9b      	subgt	r3, r3, r2
 8004f02:	18ed      	addgt	r5, r5, r3
 8004f04:	42b5      	cmp	r5, r6
 8004f06:	d11a      	bne.n	8004f3e <_printf_common+0xd2>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e008      	b.n	8004f1e <_printf_common+0xb2>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4652      	mov	r2, sl
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d103      	bne.n	8004f22 <_printf_common+0xb6>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	3501      	adds	r5, #1
 8004f24:	e7c1      	b.n	8004eaa <_printf_common+0x3e>
 8004f26:	2030      	movs	r0, #48	; 0x30
 8004f28:	18e1      	adds	r1, r4, r3
 8004f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f34:	4422      	add	r2, r4
 8004f36:	3302      	adds	r3, #2
 8004f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f3c:	e7c2      	b.n	8004ec4 <_printf_common+0x58>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4622      	mov	r2, r4
 8004f42:	4649      	mov	r1, r9
 8004f44:	4638      	mov	r0, r7
 8004f46:	47c0      	blx	r8
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0e6      	beq.n	8004f1a <_printf_common+0xae>
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7d9      	b.n	8004f04 <_printf_common+0x98>

08004f50 <_printf_i>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	7e0f      	ldrb	r7, [r1, #24]
 8004f56:	4691      	mov	r9, r2
 8004f58:	2f78      	cmp	r7, #120	; 0x78
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	469a      	mov	sl, r3
 8004f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f66:	d807      	bhi.n	8004f78 <_printf_i+0x28>
 8004f68:	2f62      	cmp	r7, #98	; 0x62
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x32>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 80d5 	beq.w	800511c <_printf_i+0x1cc>
 8004f72:	2f58      	cmp	r7, #88	; 0x58
 8004f74:	f000 80c1 	beq.w	80050fa <_printf_i+0x1aa>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f80:	e03a      	b.n	8004ff8 <_printf_i+0xa8>
 8004f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	d8f6      	bhi.n	8004f78 <_printf_i+0x28>
 8004f8a:	a101      	add	r1, pc, #4	; (adr r1, 8004f90 <_printf_i+0x40>)
 8004f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004f79 	.word	0x08004f79
 8004f9c:	08004f79 	.word	0x08004f79
 8004fa0:	08004f79 	.word	0x08004f79
 8004fa4:	08004f79 	.word	0x08004f79
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f79 	.word	0x08004f79
 8004fb0:	08004f79 	.word	0x08004f79
 8004fb4:	08004f79 	.word	0x08004f79
 8004fb8:	08004f79 	.word	0x08004f79
 8004fbc:	08005103 	.word	0x08005103
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	080050bd 	.word	0x080050bd
 8004fc8:	08004f79 	.word	0x08004f79
 8004fcc:	08004f79 	.word	0x08004f79
 8004fd0:	08005125 	.word	0x08005125
 8004fd4:	08004f79 	.word	0x08004f79
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08004f79 	.word	0x08004f79
 8004fe0:	08004f79 	.word	0x08004f79
 8004fe4:	080050c5 	.word	0x080050c5
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0a0      	b.n	800513e <_printf_i+0x1ee>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	0607      	lsls	r7, r0, #24
 8005002:	f103 0104 	add.w	r1, r3, #4
 8005006:	6029      	str	r1, [r5, #0]
 8005008:	d501      	bpl.n	800500e <_printf_i+0xbe>
 800500a:	681e      	ldr	r6, [r3, #0]
 800500c:	e003      	b.n	8005016 <_printf_i+0xc6>
 800500e:	0646      	lsls	r6, r0, #25
 8005010:	d5fb      	bpl.n	800500a <_printf_i+0xba>
 8005012:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005016:	2e00      	cmp	r6, #0
 8005018:	da03      	bge.n	8005022 <_printf_i+0xd2>
 800501a:	232d      	movs	r3, #45	; 0x2d
 800501c:	4276      	negs	r6, r6
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005022:	230a      	movs	r3, #10
 8005024:	4859      	ldr	r0, [pc, #356]	; (800518c <_printf_i+0x23c>)
 8005026:	e012      	b.n	800504e <_printf_i+0xfe>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	6029      	str	r1, [r5, #0]
 8005030:	0605      	lsls	r5, r0, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xe8>
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xee>
 8005038:	0641      	lsls	r1, r0, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe4>
 800503c:	881e      	ldrh	r6, [r3, #0]
 800503e:	2f6f      	cmp	r7, #111	; 0x6f
 8005040:	bf0c      	ite	eq
 8005042:	2308      	moveq	r3, #8
 8005044:	230a      	movne	r3, #10
 8005046:	4851      	ldr	r0, [pc, #324]	; (800518c <_printf_i+0x23c>)
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6865      	ldr	r5, [r4, #4]
 8005050:	2d00      	cmp	r5, #0
 8005052:	bfa8      	it	ge
 8005054:	6821      	ldrge	r1, [r4, #0]
 8005056:	60a5      	str	r5, [r4, #8]
 8005058:	bfa4      	itt	ge
 800505a:	f021 0104 	bicge.w	r1, r1, #4
 800505e:	6021      	strge	r1, [r4, #0]
 8005060:	b90e      	cbnz	r6, 8005066 <_printf_i+0x116>
 8005062:	2d00      	cmp	r5, #0
 8005064:	d04b      	beq.n	80050fe <_printf_i+0x1ae>
 8005066:	4615      	mov	r5, r2
 8005068:	fbb6 f1f3 	udiv	r1, r6, r3
 800506c:	fb03 6711 	mls	r7, r3, r1, r6
 8005070:	5dc7      	ldrb	r7, [r0, r7]
 8005072:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005076:	4637      	mov	r7, r6
 8005078:	42bb      	cmp	r3, r7
 800507a:	460e      	mov	r6, r1
 800507c:	d9f4      	bls.n	8005068 <_printf_i+0x118>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d10b      	bne.n	800509a <_printf_i+0x14a>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07de      	lsls	r6, r3, #31
 8005086:	d508      	bpl.n	800509a <_printf_i+0x14a>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6861      	ldr	r1, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	bfde      	ittt	le
 8005090:	2330      	movle	r3, #48	; 0x30
 8005092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800509a:	1b52      	subs	r2, r2, r5
 800509c:	6122      	str	r2, [r4, #16]
 800509e:	464b      	mov	r3, r9
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	aa03      	add	r2, sp, #12
 80050aa:	f7ff fedf 	bl	8004e6c <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	d14a      	bne.n	8005148 <_printf_i+0x1f8>
 80050b2:	f04f 30ff 	mov.w	r0, #4294967295
 80050b6:	b004      	add	sp, #16
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f043 0320 	orr.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	2778      	movs	r7, #120	; 0x78
 80050c6:	4832      	ldr	r0, [pc, #200]	; (8005190 <_printf_i+0x240>)
 80050c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	6829      	ldr	r1, [r5, #0]
 80050d0:	061f      	lsls	r7, r3, #24
 80050d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80050d6:	d402      	bmi.n	80050de <_printf_i+0x18e>
 80050d8:	065f      	lsls	r7, r3, #25
 80050da:	bf48      	it	mi
 80050dc:	b2b6      	uxthmi	r6, r6
 80050de:	07df      	lsls	r7, r3, #31
 80050e0:	bf48      	it	mi
 80050e2:	f043 0320 	orrmi.w	r3, r3, #32
 80050e6:	6029      	str	r1, [r5, #0]
 80050e8:	bf48      	it	mi
 80050ea:	6023      	strmi	r3, [r4, #0]
 80050ec:	b91e      	cbnz	r6, 80050f6 <_printf_i+0x1a6>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	2310      	movs	r3, #16
 80050f8:	e7a6      	b.n	8005048 <_printf_i+0xf8>
 80050fa:	4824      	ldr	r0, [pc, #144]	; (800518c <_printf_i+0x23c>)
 80050fc:	e7e4      	b.n	80050c8 <_printf_i+0x178>
 80050fe:	4615      	mov	r5, r2
 8005100:	e7bd      	b.n	800507e <_printf_i+0x12e>
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	6826      	ldr	r6, [r4, #0]
 8005106:	1d18      	adds	r0, r3, #4
 8005108:	6961      	ldr	r1, [r4, #20]
 800510a:	6028      	str	r0, [r5, #0]
 800510c:	0635      	lsls	r5, r6, #24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	d501      	bpl.n	8005116 <_printf_i+0x1c6>
 8005112:	6019      	str	r1, [r3, #0]
 8005114:	e002      	b.n	800511c <_printf_i+0x1cc>
 8005116:	0670      	lsls	r0, r6, #25
 8005118:	d5fb      	bpl.n	8005112 <_printf_i+0x1c2>
 800511a:	8019      	strh	r1, [r3, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	4615      	mov	r5, r2
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	e7bc      	b.n	800509e <_printf_i+0x14e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	2100      	movs	r1, #0
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	681d      	ldr	r5, [r3, #0]
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f849 	bl	80051c8 <memchr>
 8005136:	b108      	cbz	r0, 800513c <_printf_i+0x1ec>
 8005138:	1b40      	subs	r0, r0, r5
 800513a:	6060      	str	r0, [r4, #4]
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	2300      	movs	r3, #0
 8005142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005146:	e7aa      	b.n	800509e <_printf_i+0x14e>
 8005148:	462a      	mov	r2, r5
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	47d0      	blx	sl
 8005152:	3001      	adds	r0, #1
 8005154:	d0ad      	beq.n	80050b2 <_printf_i+0x162>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	079b      	lsls	r3, r3, #30
 800515a:	d413      	bmi.n	8005184 <_printf_i+0x234>
 800515c:	68e0      	ldr	r0, [r4, #12]
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	4298      	cmp	r0, r3
 8005162:	bfb8      	it	lt
 8005164:	4618      	movlt	r0, r3
 8005166:	e7a6      	b.n	80050b6 <_printf_i+0x166>
 8005168:	2301      	movs	r3, #1
 800516a:	4632      	mov	r2, r6
 800516c:	4649      	mov	r1, r9
 800516e:	4640      	mov	r0, r8
 8005170:	47d0      	blx	sl
 8005172:	3001      	adds	r0, #1
 8005174:	d09d      	beq.n	80050b2 <_printf_i+0x162>
 8005176:	3501      	adds	r5, #1
 8005178:	68e3      	ldr	r3, [r4, #12]
 800517a:	9903      	ldr	r1, [sp, #12]
 800517c:	1a5b      	subs	r3, r3, r1
 800517e:	42ab      	cmp	r3, r5
 8005180:	dcf2      	bgt.n	8005168 <_printf_i+0x218>
 8005182:	e7eb      	b.n	800515c <_printf_i+0x20c>
 8005184:	2500      	movs	r5, #0
 8005186:	f104 0619 	add.w	r6, r4, #25
 800518a:	e7f5      	b.n	8005178 <_printf_i+0x228>
 800518c:	080060c4 	.word	0x080060c4
 8005190:	080060d5 	.word	0x080060d5

08005194 <memmove>:
 8005194:	4288      	cmp	r0, r1
 8005196:	b510      	push	{r4, lr}
 8005198:	eb01 0402 	add.w	r4, r1, r2
 800519c:	d902      	bls.n	80051a4 <memmove+0x10>
 800519e:	4284      	cmp	r4, r0
 80051a0:	4623      	mov	r3, r4
 80051a2:	d807      	bhi.n	80051b4 <memmove+0x20>
 80051a4:	1e43      	subs	r3, r0, #1
 80051a6:	42a1      	cmp	r1, r4
 80051a8:	d008      	beq.n	80051bc <memmove+0x28>
 80051aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b2:	e7f8      	b.n	80051a6 <memmove+0x12>
 80051b4:	4601      	mov	r1, r0
 80051b6:	4402      	add	r2, r0
 80051b8:	428a      	cmp	r2, r1
 80051ba:	d100      	bne.n	80051be <memmove+0x2a>
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051c6:	e7f7      	b.n	80051b8 <memmove+0x24>

080051c8 <memchr>:
 80051c8:	4603      	mov	r3, r0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	b2c9      	uxtb	r1, r1
 80051ce:	4402      	add	r2, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	d101      	bne.n	80051da <memchr+0x12>
 80051d6:	2000      	movs	r0, #0
 80051d8:	e003      	b.n	80051e2 <memchr+0x1a>
 80051da:	7804      	ldrb	r4, [r0, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	428c      	cmp	r4, r1
 80051e0:	d1f6      	bne.n	80051d0 <memchr+0x8>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <_realloc_r>:
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	4680      	mov	r8, r0
 80051ea:	4614      	mov	r4, r2
 80051ec:	460e      	mov	r6, r1
 80051ee:	b921      	cbnz	r1, 80051fa <_realloc_r+0x16>
 80051f0:	4611      	mov	r1, r2
 80051f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	f7ff bb87 	b.w	8004908 <_malloc_r>
 80051fa:	b92a      	cbnz	r2, 8005208 <_realloc_r+0x24>
 80051fc:	f7ff fc96 	bl	8004b2c <_free_r>
 8005200:	4625      	mov	r5, r4
 8005202:	4628      	mov	r0, r5
 8005204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005208:	f000 f81b 	bl	8005242 <_malloc_usable_size_r>
 800520c:	4284      	cmp	r4, r0
 800520e:	4607      	mov	r7, r0
 8005210:	d802      	bhi.n	8005218 <_realloc_r+0x34>
 8005212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005216:	d812      	bhi.n	800523e <_realloc_r+0x5a>
 8005218:	4621      	mov	r1, r4
 800521a:	4640      	mov	r0, r8
 800521c:	f7ff fb74 	bl	8004908 <_malloc_r>
 8005220:	4605      	mov	r5, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d0ed      	beq.n	8005202 <_realloc_r+0x1e>
 8005226:	42bc      	cmp	r4, r7
 8005228:	4622      	mov	r2, r4
 800522a:	4631      	mov	r1, r6
 800522c:	bf28      	it	cs
 800522e:	463a      	movcs	r2, r7
 8005230:	f7ff fc6e 	bl	8004b10 <memcpy>
 8005234:	4631      	mov	r1, r6
 8005236:	4640      	mov	r0, r8
 8005238:	f7ff fc78 	bl	8004b2c <_free_r>
 800523c:	e7e1      	b.n	8005202 <_realloc_r+0x1e>
 800523e:	4635      	mov	r5, r6
 8005240:	e7df      	b.n	8005202 <_realloc_r+0x1e>

08005242 <_malloc_usable_size_r>:
 8005242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005246:	1f18      	subs	r0, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfbc      	itt	lt
 800524c:	580b      	ldrlt	r3, [r1, r0]
 800524e:	18c0      	addlt	r0, r0, r3
 8005250:	4770      	bx	lr
	...

08005254 <_init>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

08005260 <_fini>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr
